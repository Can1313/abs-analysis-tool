'stress' ANAHTAR KELİMESİ İÇİN ARAMA SONUÇLARI
======================================================================

FRONTEND SONUÇLARI:
==================

DOSYA: src\App.js
==================================================
// src/App.js
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";

import TopBar from "./components/TopBar";
import Footer from "./components/Footer";
import HomePage from "./pages/HomePage";
import CalculationPage from "./pages/CalculationPage";
import OptimizationPage from "./pages/OptimizationPage";
import StressTestingPage from "./pages/StressTestingPage";
import { DataProvider } from "./contexts/DataContext";
import ComparisonPage from "./pages/ComparisonPage";

// Create a dark navy theme
const theme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#4e7bea', // Modern blue
      light: '#6d92fd',
      dark: '#3461c7',
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#9c27b0', // Purple
      light: '#bb4fd3',
      dark: '#7b1fa2',
      contrastText: '#ffffff',
    },
    error: {
      main: '#f44336',
      light: '#ff7961',
      dark: '#d32f2f',
    },
    warning: {
      main: '#ff9800',
      light: '#ffb74d',
      dark: '#f57c00',
    },
    info: {
      main: '#29b6f6',
      light: '#4fc3f7',
      dark: '#0288d1',
    },
    success: {
      main: '#4caf50',
      light: '#80e27e',
      dark: '#087f23',
    },
    background: {
      default: '#0f172a', // Dark navy
      paper: '#1e293b', // Lighter navy
    },
    text: {
      primary: '#e2e8f0',
      secondary: '#94a3b8',
    },
    divider: 'rgba(148, 163, 184, 0.12)',
  },
  typography: {
    fontFamily: '"Roboto", "Segoe UI", "Helvetica Neue", sans-serif',
    h4: {
      fontWeight: 500,
    },
    h5: {
      fontWeight: 500,
    },
    h6: {
      fontWeight: 500,
    },
    subtitle1: {
      fontWeight: 500,
    },
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
          borderRadius: 8,
        },
        elevation1: {
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
        },
        elevation2: {
          boxShadow: '0 3px 6px rgba(0,0,0,0.7), 0 2px 4px rgba(0,0,0,0.8)',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          fontWeight: 500,
          borderRadius: 6,
        },
        contained: {
          boxShadow: '0 1px 2px rgba(0,0,0,0.3)',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        head: {
          fontWeight: 600,
          backgroundColor: 'rgba(78, 123, 234, 0.15)',
        },
      },
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          '&:last-child td': {
            borderBottom: 0,
          },
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
          backgroundColor: '#0f172a', // Match background.default
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          borderRadius: 6,
        },
      },
    },
    MuiCssBaseline: {
      styleOverrides: {
        body: {
          scrollbarColor: "#6b6b6b #2b2b2b",
          "&::-webkit-scrollbar, & *::-webkit-scrollbar": {
            backgroundColor: "#2b2b2b",
            width: 8,
          },
          "&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb": {
            borderRadius: 8,
            backgroundColor: "#6b6b6b",
            minHeight: 24,
          },
          "&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus": {
            backgroundColor: "#959595",
          },
          "&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active": {
            backgroundColor: "#959595",
          },
          "&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover": {
            backgroundColor: "#959595",
          },
        },
      },
    },
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <DataProvider>
        <Router>
          <TopBar />
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/calculation" element={<CalculationPage />} />
            <Route path="/optimization" element={<OptimizationPage />} />
            <Route path="/comparison" element={<ComparisonPage />} />
            <Route path="/stress-testing" element={<StressTestingPage />} />
          </Routes>
          <Footer />
        </Router>
      </DataProvider>
    </ThemeProvider>
  );
}

export default App;

======================================================================

DOSYA: src\components\TopBar.js
==================================================
// frontend/src/components/TopBar.js
import React from 'react';
import { Link as RouterLink, useLocation } from 'react-router-dom';
import { 
  AppBar, 
  Toolbar, 
  Typography, 
  Button, 
  Box, 
  Container, 
  useTheme 
} from '@mui/material';
import CalculateIcon from '@mui/icons-material/Calculate';
import OptimizeIcon from '@mui/icons-material/Speed';
import HomeIcon from '@mui/icons-material/Home';
import CompareIcon from '@mui/icons-material/Compare';
import BusinessIcon from '@mui/icons-material/Business';
import AssessmentIcon from '@mui/icons-material/Assessment';
import { alpha } from '@mui/material/styles';

const TopBar = () => {
  const location = useLocation();
  const theme = useTheme();
  
  // Menu items with updated professional names
  const menuItems = [
    {
      path: '/',
      label: 'Dashboard',
      icon: <HomeIcon />
    },
    {
      path: '/calculation',
      label: 'Structure Analysis',
      icon: <CalculateIcon />
    },
    {
      path: '/optimization',
      label: 'Portfolio Optimizer',
      icon: <OptimizeIcon />
    },
    {
      path: '/comparison',
      label: 'Performance Metrics',
      icon: <CompareIcon />
    },
    {
      path: '/stress-testing',
      label: 'Stress Testing',
      icon: <AssessmentIcon />
    }
  ];
  
  return (
    <AppBar 
      position="static" 
      elevation={0}
      sx={{
        background: 'linear-gradient(90deg, #0f172a 0%, #1e293b 100%)',
        borderBottom: '1px solid rgba(78, 123, 234, 0.15)'
      }}
    >
      <Container maxWidth="lg">
        <Toolbar disableGutters>
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              flexGrow: 1,
            }}
          >
            <BusinessIcon 
              sx={{ 
                fontSize: 28, 
                color: theme.palette.primary.main,
                mr: 1.5 
              }} 
            />
            <Typography
              variant="h6"
              component={RouterLink}
              to="/"
              sx={{
                textDecoration: 'none',
                color: 'inherit',
                fontWeight: 600,
                letterSpacing: 0.5,
              }}
            >
              Advanced ABS Design
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', gap: 1 }}>
            {menuItems.map((item) => (
              <Button 
                key={item.path}
                color="inherit" 
                component={RouterLink} 
                to={item.path}
                startIcon={item.icon}
                sx={{
                  px: 2,
                  py: 1,
                  borderRadius: 1,
                  backgroundColor: location.pathname === item.path 
                    ? alpha(theme.palette.primary.main, 0.15) 
                    : 'transparent',
                  '&:hover': {
                    backgroundColor: location.pathname === item.path 
                      ? alpha(theme.palette.primary.main, 0.25) 
                      : alpha(theme.palette.primary.main, 0.1),
                  }
                }}
              >
                {item.label}
              </Button>
            ))}
          </Box>
        </Toolbar>
      </Container>
    </AppBar>
  );
};

export default TopBar;

======================================================================

DOSYA: src\pages\StressTestingPage.js
==================================================
// src/pages/StressTestingPage.js
import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Grid, 
  Slider, 
  TextField, 
  InputAdornment, 
  Button, 
  Tabs, 
  Tab, 
  Divider, 
  Card, 
  CardContent, 
  Chip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  alpha,
  useTheme,
  ThemeProvider,
  createTheme,
  CssBaseline,
  IconButton,
  Tooltip,
  CircularProgress,
  Snackbar,
  Alert,
  Switch,
  FormControlLabel
} from '@mui/material';
import { styled } from '@mui/material/styles';
import RefreshIcon from '@mui/icons-material/Refresh';
import AssessmentIcon from '@mui/icons-material/Assessment';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import WarningAmberIcon from '@mui/icons-material/WarningAmber';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import TrendingDownIcon from '@mui/icons-material/TrendingDown';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import ShowChartIcon from '@mui/icons-material/ShowChart';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import CompareArrowsIcon from '@mui/icons-material/CompareArrows';
import TuneIcon from '@mui/icons-material/Tune';
import ScienceIcon from '@mui/icons-material/Science';
import SettingsIcon from '@mui/icons-material/Settings';
import CompareIcon from '@mui/icons-material/Compare';
import { useData } from '../contexts/DataContext';
import { useNavigate } from 'react-router-dom';

// Import Recharts components
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, 
  Legend, ResponsiveContainer, AreaChart, Area, BarChart, Bar, ReferenceLine,
  ScatterChart, Scatter, ZAxis
} from 'recharts';

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#4dabf5',
    },
    secondary: {
      main: '#ce93d8',
    },
    success: {
      main: '#66bb6a',
    },
    error: {
      main: '#f44336',
    },
    warning: {
      main: '#ffa726',
    },
    info: {
      main: '#29b6f6',
    },
    background: {
      default: '#0a1929',
      paper: '#132f4c',
    },
    text: {
      primary: '#ffffff',
      secondary: 'rgba(255, 255, 255, 0.7)',
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    grid: 'rgba(255, 255, 255, 0.15)',
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 500,
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          '&:last-child': {
            paddingBottom: 16,
          },
        },
      },
    },
  },
});

// Custom styled component for slider
const StyledSlider = styled(Slider)(({ theme }) => ({
  color: theme.palette.primary.main,
  height: 8,
  '& .MuiSlider-track': {
    border: 'none',
    backgroundImage: `linear-gradient(to right, ${theme.palette.primary.main}, ${theme.palette.primary.light})`,
  },
  '& .MuiSlider-thumb': {
    height: 24,
    width: 24,
    backgroundColor: theme.palette.background.paper,
    border: `2px solid ${theme.palette.primary.main}`,
    '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {
      boxShadow: `0 0 0 8px ${alpha(theme.palette.primary.main, 0.16)}`,
    },
    '&:before': {
      display: 'none',
    },
  },
  '& .MuiSlider-valueLabel': {
    lineHeight: 1.2,
    fontSize: 12,
    background: 'unset',
    padding: 0,
    width: 32,
    height: 32,
    borderRadius: '50% 50% 50% 0',
    backgroundColor: theme.palette.primary.main,
    transformOrigin: 'bottom left',
    transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',
    '&:before': { display: 'none' },
    '&.MuiSlider-valueLabelOpen': {
      transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',
    },
    '& > *': {
      transform: 'rotate(45deg)',
    },
  },
}));

// Helper function to get color based on difference value
const getDifferenceColor = (diff, theme) => {
  if (diff >= -1) return theme.palette.success.main;
  if (diff >= -5) return theme.palette.warning.main;
  return theme.palette.error.main;
};

// Custom tooltip for charts
const CustomTooltip = ({ active, payload, label }) => {
  const theme = darkTheme;
  if (active && payload && payload.length) {
    return (
      <Paper
        elevation={3}
        sx={{
          p: 2,
          borderRadius: 1,
          boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
          border: '1px solid',
          borderColor: alpha(theme.palette.primary.main, 0.1),
          backgroundColor: alpha(theme.palette.background.paper, 0.95),
          maxWidth: 300,
        }}
      >
        <Typography variant="subtitle2" gutterBottom>{label}</Typography>
        {payload.map((entry, index) => (
          <Box key={`tooltip-item-${index}`} sx={{ display: 'flex', justifyContent: 'space-between', my: 0.5, alignItems: 'center' }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box
                sx={{
                  width: 12,
                  height: 12,
                  backgroundColor: entry.color,
                  mr: 1,
                  borderRadius: '50%'
                }}
              />
              <Typography variant="body2" color="text.secondary">
                {entry.name}:
              </Typography>
            </Box>
            <Typography variant="body2" fontWeight="medium" color={entry.color}>
              {typeof entry.value === 'number' 
                ? entry.value.toFixed(2) + (entry.unit || '%')
                : entry.value}
            </Typography>
          </Box>
        ))}
      </Paper>
    );
  }
  return null;
};

// Advanced custom tooltip for scatter chart
const ScatterTooltip = ({ active, payload }) => {
  const theme = darkTheme;
  if (active && payload && payload.length) {
    const data = payload[0].payload;
    return (
      <Paper
        elevation={3}
        sx={{
          p: 2,
          borderRadius: 1,
          boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
          border: '1px solid',
          borderColor: alpha(theme.palette.primary.main, 0.1),
          backgroundColor: alpha(theme.palette.background.paper, 0.95),
          maxWidth: 300,
        }}
      >
        <Typography variant="subtitle2" gutterBottom fontWeight="medium">
          Scenario Analysis
        </Typography>
        <Divider sx={{ my: 1 }} />
        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">NPL Rate:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium">{data.npl}%</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Prepayment:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium">{data.prepayment}%</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Reinvest Shift:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium">{data.reinvest}%</Typography>
          </Grid>
          <Grid item xs={12}><Divider sx={{ my: 1 }} /></Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Modeled Rate:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium" color={theme.palette.primary.main}>
              {data.modeled}%
            </Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Realized Rate:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium" color={theme.palette.secondary.main}>
              {data.realized}%
            </Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Difference:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium" 
              color={getDifferenceColor(data.difference, theme)}>
              {data.difference}%
            </Typography>
          </Grid>
        </Grid>
      </Paper>
    );
  }
  return null;
};

const StressTestingPage = () => {
  const theme = darkTheme;
  const { calculationResults, savedResults } = useData();
  const navigate = useNavigate();
  const [tabValue, setTabValue] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  
  // State for stress test parameters
  const [nplRange, setNplRange] = useState([2, 15]);
  const [prepaymentRange, setPrepaymentRange] = useState([5, 25]);
  const [reinvestmentRange, setReinvestmentRange] = useState([-10, 10]);
  const [defaultReinvestRate, setDefaultReinvestRate] = useState(30);
  const [scenarios, setScenarios] = useState(10);
  const [selectedScenarioType, setSelectedScenarioType] = useState('base');
  
  // New state variable for dropdown selection
  const [selectedStructureId, setSelectedStructureId] = useState('');
  const [availableStructures, setAvailableStructures] = useState([]);
  
  // State variables from Step 4
  const [predefinedScenario, setPredefinedScenario] = useState('base');
  
  // State variables from Step 5
  const [applyReinvestmentShift, setApplyReinvestmentShift] = useState(false);
  
  // State variables from Step 8
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  
  // Initialize with safe default values
  const [mockResults, setMockResults] = useState({
    classBCouponRate: {
      modeled: 42.5,
      realized: 38.7,
      difference: -3.8,
      status: 'warning' // 'success', 'warning', 'error'
    },
    scenarioResults: [
      { name: 'Base Case', npl: 5, prepayment: 10, reinvestment: 0, modeled: 42.5, realized: 38.7, difference: -3.8 },
      { name: 'Mild Stress', npl: 8, prepayment: 15, reinvestment: -3, modeled: 41.2, realized: 36.1, difference: -5.1 },
      { name: 'Severe Stress', npl: 12, prepayment: 20, reinvestment: -7, modeled: 39.5, realized: 33.2, difference: -6.3 },
      { name: 'Extreme Stress', npl: 15, prepayment: 25, reinvestment: -10, modeled: 37.8, realized: 30.4, difference: -7.4 },
      { name: 'Best Case', npl: 2, prepayment: 5, reinvestment: 5, modeled: 43.8, realized: 41.3, difference: -2.5 },
    ],
    sensitivityAnalysis: {
      npl: [
        { value: 2, modeled: 43.5, realized: 41.0 },
        { value: 5, modeled: 42.5, realized: 38.7 },
        { value: 8, modeled: 41.2, realized: 36.1 },
        { value: 10, modeled: 40.3, realized: 34.8 },
        { value: 12, modeled: 39.5, realized: 33.2 },
        { value: 15, modeled: 37.8, realized: 30.4 },
      ],
      prepayment: [
        { value: 5, modeled: 43.8, realized: 41.3 },
        { value: 10, modeled: 42.5, realized: 38.7 },
        { value: 15, modeled: 41.2, realized: 36.1 },
        { value: 20, modeled: 39.5, realized: 33.2 },
        { value: 25, modeled: 37.8, realized: 30.4 },
      ],
      reinvestment: [
        { value: -10, modeled: 37.8, realized: 30.4 },
        { value: -5, modeled: 40.3, realized: 34.8 },
        { value: 0, modeled: 42.5, realized: 38.7 },
        { value: 5, modeled: 43.8, realized: 41.3 },
        { value: 10, modeled: 45.0, realized: 43.6 },
      ],
    },
    combinedScenarios: [
      { npl: 2, prepayment: 5, reinvest: 5, modeled: 45.0, realized: 43.6 },
      { npl: 5, prepayment: 5, reinvest: 0, modeled: 43.2, realized: 40.5 },
      { npl: 5, prepayment: 10, reinvest: 0, modeled: 42.5, realized: 38.7 },
      { npl: 5, prepayment: 15, reinvest: 0, modeled: 41.8, realized: 37.2 },
      { npl: 8, prepayment: 10, reinvest: -3, modeled: 41.2, realized: 36.1 },
      { npl: 10, prepayment: 15, reinvest: -5, modeled: 40.3, realized: 34.8 },
      { npl: 12, prepayment: 20, reinvest: -7, modeled: 39.5, realized: 33.2 },
      { npl: 15, prepayment: 20, reinvest: -7, modeled: 38.6, realized: 31.8 },
      { npl: 15, prepayment: 25, reinvest: -10, modeled: 37.8, realized: 30.4 },
    ]
  });
  
  // From Step 2: Fetch Available Structures
  useEffect(() => {
    if (savedResults && savedResults.length > 0) {
      // Group results by structure type
      const structures = savedResults.map(result => {
        // Calculate coupon rate from Class B Coupon and Class B Principal if not available
        let directCouponRate = result.direct_class_b_coupon_rate;
        
        // If value is not present but coupon and principal are, calculate the rate
        if ((!directCouponRate || directCouponRate === 0) && result.class_b_coupon && result.class_b_principal) {
          directCouponRate = (result.class_b_coupon / result.class_b_principal) * 100;
        }
        
        return {
          id: result.id,
          name: result.savedName || `${result.methodType} Structure`,
          type: result.methodType,
          // Use calculated coupon rate
          classBCouponRate: directCouponRate || 0,
          directCouponRate: directCouponRate || 0,
          effectiveCouponRate: result.class_b_coupon_rate || 0
        };
      });
      
      setAvailableStructures(structures);
      
      // Set first structure as default if none selected
      if (structures.length > 0 && !selectedStructureId) {
        setSelectedStructureId(structures[0].id);
      }
    }
  }, [savedResults, selectedStructureId]);
  
  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Handle structure selection change
  const handleStructureChange = (event) => {
    setSelectedStructureId(event.target.value);
  };
  
  // Get selected structure details
  const getSelectedStructure = () => {
    return availableStructures.find(structure => structure.id === selectedStructureId) || null;
  };

  // Updated handleRunStressTest
  const handleRunStressTest = async () => {
    const selectedStructure = getSelectedStructure();
    
    if (!selectedStructure) {
      setSnackbarMessage("Please select a structure to test");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Get the original structure details from savedResults
      const structureDetails = savedResults.find(r => r.id === selectedStructure.id);
      
      if (!structureDetails) {
        throw new Error("Structure details not found");
      }
      
      // Extract parameters for the test
      const nplRate = nplRange[0]; // Use the first value if it's a range
      const prepaymentRate = prepaymentRange[0]; // Use the first value if it's a range
      const reinvestmentShift = applyReinvestmentShift ? reinvestmentRange[0] : 0;
      
      // Here you would typically call your API to run the stress test
      // For now, we'll simulate it with setTimeout
      
      setTimeout(() => {
        // Use the calculated coupon rate as baseline
        const baselineCouponRate = selectedStructure.directCouponRate || 0;
        
        // Calculate impact (this would normally come from backend):
        // Higher NPL rates reduce coupon rate
        // Higher prepayment can reduce or increase depending on structure
        // Reinvestment shifts directly impact
        const nplImpact = -1.5 * (nplRate / 2); // -1.5% per 2% NPL
        const prepaymentImpact = -0.8 * ((prepaymentRate - 20) / 10); // -0.8% per 10% above 20%
        const reinvestmentImpact = reinvestmentShift * 0.3; // 0.3% impact per 1% shift
        
        const modifiedCouponRate = baselineCouponRate + nplImpact + prepaymentImpact + reinvestmentImpact;
        
        // Update the mock results
        const updatedResults = {
          ...mockResults,
          classBCouponRate: {
            modeled: baselineCouponRate,
            realized: Math.max(0, modifiedCouponRate),
            difference: modifiedCouponRate - baselineCouponRate,
            status: modifiedCouponRate < baselineCouponRate - 5 ? 'error' : 
                  modifiedCouponRate < baselineCouponRate - 1 ? 'warning' : 'success'
          },
          scenarioResults: [
            {
              name: "Original",
              npl: 0,
              prepayment: 0,
              reinvestment: 0,
              modeled: baselineCouponRate,
              realized: baselineCouponRate,
              difference: 0
            },
            {
              name: predefinedScenario.charAt(0).toUpperCase() + predefinedScenario.slice(1),
              npl: nplRate,
              prepayment: prepaymentRate,
              reinvestment: reinvestmentShift,
              modeled: baselineCouponRate,
              realized: modifiedCouponRate,
              difference: modifiedCouponRate - baselineCouponRate
            }
          ]
        };
        
        // Update state with the new results
        setMockResults(updatedResults);
        setIsLoading(false);
        
        // Automatically switch to summary tab
        setTabValue(0);
        
        // Show success message
        setSnackbarMessage("Stress test completed successfully");
        setSnackbarSeverity("success");
        setSnackbarOpen(true);
      }, 1500);
      
      // In a real implementation, use the API instead of setTimeout:
      /*
      const response = await runStressTest({
        structure: {
          id: structureDetails.id,
          direct_coupon_rate: selectedStructure.directCouponRate || 0,
          effective_coupon_rate: selectedStructure.effectiveCouponRate || 0
        },
        scenario: {
          name: predefinedScenario,
          npl_rate: nplRate,
          prepayment_rate: prepaymentRate,
          reinvestment_shift: reinvestmentShift
        }
      });
      
      setMockResults(response);
      setIsLoading(false);
      setTabValue(0);
      setSnackbarMessage("Stress test completed successfully");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
      */
      
    } catch (error) {
      console.error("Error running stress test:", error);
      setIsLoading(false);
      setSnackbarMessage("Error running stress test: " + error.message);
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };
  
  // Format data for the sensitivity charts
  const formatSensitivityData = (dataKey) => {
    if (!mockResults?.sensitivityAnalysis?.[dataKey]) {
      return [];
    }
    
    return mockResults.sensitivityAnalysis[dataKey].map(item => ({
      value: item.value || 0,
      modeled: item.modeled || 0,
      realized: item.realized || 0,
      difference: (item.realized || 0) - (item.modeled || 0)
    }));
  };
  
  // Format combined scenarios data for scatter plot
  const formatScatterData = () => {
    if (!mockResults?.combinedScenarios) {
      return [];
    }
    
    return mockResults.combinedScenarios.map(item => ({
      x: item.npl || 0, // NPL rate for X axis
      y: item.prepayment || 0, // Prepayment rate for Y axis
      z: Math.abs((item.realized || 0) - (item.modeled || 0)) * 10, // Difference size for bubble size (scaled)
      npl: item.npl || 0,
      prepayment: item.prepayment || 0,
      reinvest: item.reinvest || 0,
      modeled: item.modeled || 0,
      realized: item.realized || 0,
      difference: ((item.realized || 0) - (item.modeled || 0)).toFixed(2)
    }));
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        {/* Page Header */}
        <Box
          sx={{
            mb: 4,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between'
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <AssessmentIcon 
              sx={{ 
                fontSize: 36, 
                color: theme.palette.primary.main,
                mr: 2,
                filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))'
              }} 
            />
            <Box>
              <Typography variant="h4" fontWeight="500">
                Stress Testing
              </Typography>
              <Typography variant="subtitle1" color="text.secondary">
                Analyze Class B coupon performance under various market conditions
              </Typography>
            </Box>
          </Box>
          
          <Button
            variant="contained"
            color="primary"
            startIcon={<SaveAltIcon />}
            sx={{
              px: 3,
              py: 1,
              borderRadius: 2,
              boxShadow: '0 3px 8px rgba(0,0,0,0.3)',
            }}
          >
            Export Results
          </Button>
        </Box>
        
        {/* Structure Dropdown Selection */}
        <Paper
          elevation={3}
          sx={{
            p: 3,
            mb: 4,
            borderRadius: 2,
            backgroundColor: alpha(theme.palette.background.paper, 0.8),
            border: `1px solid ${alpha(theme.palette.warning.main, 0.2)}`,
          }}
        >
          <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <CompareIcon sx={{ mr: 1, color: theme.palette.warning.light }} />
            Select Structure to Stress Test
          </Typography>
          
          {availableStructures.length > 0 ? (
            <FormControl fullWidth variant="outlined">
              <InputLabel id="structure-select-label">Select Structure</InputLabel>
              <Select
                labelId="structure-select-label"
                id="structure-select"
                value={selectedStructureId}
                onChange={handleStructureChange}
                label="Select Structure"
                sx={{ mb: 2 }}
              >
                {availableStructures.map((structure) => (
                  <MenuItem key={structure.id} value={structure.id}>
                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {structure.type === 'manual' && <TuneIcon sx={{ color: theme.palette.error.main, mr: 1 }} />}
                        {structure.type === 'genetic' && <ScienceIcon sx={{ color: theme.palette.success.main, mr: 1 }} />}
                        {structure.type === 'standard' && <SettingsIcon sx={{ color: theme.palette.primary.main, mr: 1 }} />}
                        <Typography>{structure.name}</Typography>
                      </Box>
                      <Chip 
                        label={`Coupon Rate: ${structure.directCouponRate.toFixed(2)}%`}
                        color="warning"
                        size="small"
                        sx={{ ml: 2 }}
                      />
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          ) : (
            <Alert severity="info">
              No saved structures found. Please calculate and save at least one structure before running stress tests.
            </Alert>
          )}
          
          {getSelectedStructure() && (
            <Box sx={{ mt: 2, p: 2, borderRadius: 1, bgcolor: alpha(theme.palette.warning.main, 0.05) }}>
              <Typography variant="subtitle2" gutterBottom>Selected Structure Details:</Typography>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={4}>
                  <Typography variant="body2" color="text.secondary">Type:</Typography>
                  <Typography variant="body1">
                    {getSelectedStructure().type === 'manual' ? 'Manual Calculation' : 
                     getSelectedStructure().type === 'genetic' ? 'Genetic Algorithm' : 
                     'Grid Algorithm'}
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Typography variant="body2" color="text.secondary">Class B Direct Coupon Rate:</Typography>
                  <Typography variant="body1" color="warning.main" fontWeight="medium">
                    {getSelectedStructure().directCouponRate.toFixed(2)}%
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Typography variant="body2" color="text.secondary">Class B Effective Coupon Rate:</Typography>
                  <Typography variant="body1">
                    {getSelectedStructure().effectiveCouponRate.toFixed(2)}%
                  </Typography>
                </Grid>
              </Grid>
            </Box>
          )}
        </Paper>
        
        <Grid container spacing={4}>
          {/* Parameters Panel */}
          <Grid item xs={12} md={4}>
            <Paper 
              elevation={3}
              sx={{ 
                p: 3, 
                height: '100%',
                borderRadius: 2,
                backgroundColor: alpha(theme.palette.background.paper, 0.8),
                border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              }}
            >
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                <TuneIcon sx={{ mr: 1, color: theme.palette.primary.light }} />
                Stress Test Parameters
              </Typography>
              
              {/* Predefined Scenario Selection from Step 4 */}
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center">
                  <CompareArrowsIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.info.light }} />
                  Predefined Scenarios
                  <Tooltip title="Select a predefined scenario or customize parameters manually" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>
                  <Button
                    variant={predefinedScenario === 'optimistic' ? 'contained' : 'outlined'}
                    color="success"
                    onClick={() => {
                      setPredefinedScenario('optimistic');
                      setNplRange([1, 1]);
                      setPrepaymentRange([20, 20]);
                      setReinvestmentRange([0, 0]);
                    }}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    Optimistic
                  </Button>
                  
                  <Button
                    variant={predefinedScenario === 'base' ? 'contained' : 'outlined'}
                    color="primary"
                    onClick={() => {
                      setPredefinedScenario('base');
                      setNplRange([1.5, 1.5]);
                      setPrepaymentRange([30, 30]);
                      setReinvestmentRange([0, 0]);
                    }}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    Base Case
                  </Button>
                  
                  <Button
                    variant={predefinedScenario === 'pessimistic' ? 'contained' : 'outlined'}
                    color="error"
                    onClick={() => {
                      setPredefinedScenario('pessimistic');
                      setNplRange([5, 5]);
                      setPrepaymentRange([15, 15]);
                      setReinvestmentRange([-5, -5]);
                    }}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    Pessimistic
                  </Button>
                  
                  <Button
                    variant={predefinedScenario === 'extreme' ? 'contained' : 'outlined'}
                    color="warning"
                    onClick={() => {
                      setPredefinedScenario('extreme');
                      setNplRange([10, 10]);
                      setPrepaymentRange([10, 10]);
                      setReinvestmentRange([-10, -10]);
                    }}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    Extreme Stress
                  </Button>
                  
                  <Button
                    variant={predefinedScenario === 'custom' ? 'contained' : 'outlined'}
                    onClick={() => {
                      setPredefinedScenario('custom');
                    }}
                    size="small"
                    sx={{ borderRadius: 2 }}
                  >
                    Custom
                  </Button>
                </Box>
              </Box>
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center">
                  <WarningAmberIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.warning.main }} />
                  NPL Rate Range (%)
                  <Tooltip title="Non-Performing Loan rate affects the cash flow available for Class B payment" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Box sx={{ px: 1, pt: 1, pb: 2 }}>
                  <StyledSlider
                    value={nplRange}
                    onChange={(e, value) => setNplRange(value)}
                    valueLabelDisplay="auto"
                    min={0}
                    max={30}
                    step={1}
                    marks={[
                      { value: 0, label: '0%' },
                      { value: 15, label: '15%' },
                      { value: 30, label: '30%' }
                    ]}
                  />
                </Box>
              </Box>
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center">
                  <TrendingDownIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.primary.light }} />
                  Prepayment Rate Range (%)
                  <Tooltip title="Early prepayment rates affect the expected cash flow timing" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Box sx={{ px: 1, pt: 1, pb: 2 }}>
                  <StyledSlider
                    value={prepaymentRange}
                    onChange={(e, value) => setPrepaymentRange(value)}
                    valueLabelDisplay="auto"
                    min={0}
                    max={50}
                    step={1}
                    marks={[
                      { value: 0, label: '0%' },
                      { value: 25, label: '25%' },
                      { value: 50, label: '50%' }
                    ]}
                  />
                </Box>
              </Box>
              
              {/* Reinvestment Rate Shift Toggle from Step 5 */}
              <Box sx={{ mt: 3 }}>
                <FormControl component="fieldset">
                  <FormControlLabel
                    control={
                      <Switch 
                        checked={applyReinvestmentShift}
                        onChange={(e) => setApplyReinvestmentShift(e.target.checked)}
                        color="primary"
                      />
                    }
                    label="Apply Reinvestment Rate Shift"
                  />
                  <Typography variant="body2" color="text.secondary">
                    When enabled, all reinvestment rates will shift by the specified amount
                  </Typography>
                </FormControl>
                
                {applyReinvestmentShift && (
                  <Box sx={{ px: 1, pt: 1, pb: 2 }}>
                    <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center">
                      <AttachMoneyIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.secondary.light }} />
                      Reinvestment Rate Shift (±%)
                    </Typography>
                    <StyledSlider
                      value={reinvestmentRange}
                      onChange={(e, value) => setReinvestmentRange(value)}
                      valueLabelDisplay="auto"
                      min={-10}
                      max={10}
                      step={1}
                      marks={[
                        { value: -10, label: '-10%' },
                        { value: -5, label: '-5%' },
                        { value: 0, label: '0%' },
                        { value: 5, label: '+5%' },
                        { value: 10, label: '+10%' }
                      ]}
                    />
                  </Box>
                )}
              </Box>
              
              <Box sx={{ mt: 4 }}>
                <TextField
                  fullWidth
                  label="Base Reinvestment Rate (%)"
                  value={defaultReinvestRate}
                  onChange={(e) => setDefaultReinvestRate(Number(e.target.value))}
                  type="number"
                  InputProps={{
                    endAdornment: <InputAdornment position="end">%</InputAdornment>,
                  }}
                  variant="outlined"
                  size="small"
                  sx={{ mb: 3 }}
                />
                
                <TextField
                  fullWidth
                  label="Number of Scenarios"
                  value={scenarios}
                  onChange={(e) => setScenarios(Number(e.target.value))}
                  type="number"
                  variant="outlined"
                  size="small"
                  sx={{ mb: 3 }}
                />
                
                <FormControl fullWidth variant="outlined" size="small" sx={{ mb: 4 }}>
                  <InputLabel>Pre-defined Scenario</InputLabel>
                  <Select
                    value={selectedScenarioType}
                    onChange={(e) => setSelectedScenarioType(e.target.value)}
                    label="Pre-defined Scenario"
                  >
                    <MenuItem value="base">Base Case</MenuItem>
                    <MenuItem value="mild">Mild Stress</MenuItem>
                    <MenuItem value="moderate">Moderate Stress</MenuItem>
                    <MenuItem value="severe">Severe Stress</MenuItem>
                    <MenuItem value="extreme">Extreme Stress</MenuItem>
                    <MenuItem value="custom">Custom Scenario</MenuItem>
                  </Select>
                </FormControl>
                
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  size="large"
                  startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : <AssessmentIcon />}
                  onClick={handleRunStressTest}
                  disabled={isLoading || !selectedStructureId}
                  sx={{
                    py: 1.2,
                    borderRadius: 2,
                    boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                    '&:hover': {
                      boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                    }
                  }}
                >
                  {isLoading ? 'Running Tests...' : 'Run Stress Tests'}
                </Button>
              </Box>
            </Paper>
          </Grid>
          
          {/* Results Panel */}
          <Grid item xs={12} md={8}>
            <Paper 
              elevation={3}
              sx={{ 
                borderRadius: 2,
                overflow: 'hidden',
                backgroundColor: alpha(theme.palette.background.paper, 0.8),
                border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              }}
            >
              <Box sx={{ 
                borderBottom: 1, 
                borderColor: 'divider',
                backgroundColor: alpha(theme.palette.background.paper, 0.4),
                px: 2
              }}>
                <Tabs
                  value={tabValue}
                  onChange={handleTabChange}
                  variant="scrollable"
                  scrollButtons="auto"
                  sx={{
                    '& .MuiTab-root': {
                      minWidth: 100,
                      py: 2
                    }
                  }}
                >
                  <Tab 
                    label="Summary" 
                    icon={<ShowChartIcon />} 
                    iconPosition="start"
                  />
                  <Tab 
                    label="NPL Sensitivity" 
                    icon={<WarningAmberIcon />} 
                    iconPosition="start"
                  />
                  <Tab 
                    label="Prepayment Impact" 
                    icon={<TrendingDownIcon />} 
                    iconPosition="start"
                  />
                  <Tab 
                    label="Combined Analysis" 
                    icon={<CompareArrowsIcon />} 
                    iconPosition="start"
                  />
                </Tabs>
              </Box>
              
              {/* Summary Tab */}
              {tabValue === 0 && (
                <Box sx={{ p: 3 }}>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <Box sx={{ 
                        p: 2.5, 
                        borderRadius: 2, 
                        border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
                        backgroundColor: alpha(theme.palette.background.paper, 0.4),
                        display: 'flex',
                        flexWrap: 'wrap',
                        gap: 4
                      }}>
                        <Box>
                          <Typography variant="body2" color="text.secondary">Direct Coupon Rate</Typography>
                          <Typography variant="h3" color="primary.main" sx={{ mt: 0.5 }}>
                            {(mockResults.classBCouponRate?.modeled || 0).toFixed(1)}%
                          </Typography>
                        </Box>
                        
                        <Box>
                          <Typography variant="body2" color="text.secondary">Realized Direct Coupon Rate</Typography>
                          <Typography 
                            variant="h3" 
                            sx={{ 
                              mt: 0.5, 
                              color: getDifferenceColor(mockResults.classBCouponRate?.difference || 0, theme)
                            }}
                          >
                            {(mockResults.classBCouponRate?.realized || 0).toFixed(1)}%
                          </Typography>
                        </Box>
                        
                        <Box sx={{ ml: 'auto', textAlign: 'right' }}>
                          <Typography variant="body2" color="text.secondary">Difference</Typography>
                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', mt: 1 }}>
                            <Chip 
                              label={`${(mockResults.classBCouponRate?.difference || 0) > 0 ? '+' : ''}${(mockResults.classBCouponRate?.difference || 0).toFixed(1)}%`}
                              color={
                                (mockResults.classBCouponRate?.difference || 0) >= -1 ? "success" :
                                (mockResults.classBCouponRate?.difference || 0) >= -5 ? "warning" : "error"
                              }
                              sx={{ fontWeight: 'bold', fontSize: '1.1rem', height: 32, px: 1 }}
                            />
                          </Box>
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            {mockResults.classBCouponRate.difference >= -1 ? "Within target" :
                             mockResults.classBCouponRate.difference >= -5 ? "Moderate deviation" : "Significant deviation"}
                          </Typography>
                        </Box>
                      </Box>
                    </Grid>
                    
                    <Grid item xs={12}>
                      <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                        Scenario Comparison
                      </Typography>
                      <Box sx={{ height: 400 }}>
                        <ResponsiveContainer width="100%" height="100%">
                          <BarChart
                            data={mockResults.scenarioResults}
                            margin={{ top: 20, right: 30, left: 20, bottom: 70 }}
                          >
                            <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                            <XAxis 
                              dataKey="name" 
                              tick={{ fill: theme.palette.text.secondary }}
                              angle={-45}
                              textAnchor="end"
                              height={70}
                            />
                            <YAxis 
                              tickFormatter={(value) => `${value}%`}
                              tick={{ fill: theme.palette.text.secondary }}
                              domain={[0, 'dataMax + 5']}
                            />
                            <RechartsTooltip content={<CustomTooltip />} />
                            <Legend 
                              wrapperStyle={{ paddingTop: 20 }}
                              formatter={(value) => (
                                <span style={{ color: theme.palette.text.primary }}>{value}</span>
                              )}
                            />
                            <Bar 
                              name="Modeled Rate" 
                              dataKey="modeled" 
                              fill={theme.palette.primary.main}
                              radius={[4, 4, 0, 0]}
                            />
                            <Bar 
                              name="Realized Rate" 
                              dataKey="realized" 
                              fill={theme.palette.secondary.main}
                              radius={[4, 4, 0, 0]}
                            />
                          </BarChart>
                        </ResponsiveContainer>
                      </Box>
                    </Grid>
                  </Grid>
                </Box>
              )}
              
              {/* NPL Sensitivity Tab */}
              {tabValue === 1 && (
                <Box sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Class B Coupon Rate vs. NPL Rates
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    This analysis shows how Non-Performing Loan (NPL) rates affect the Class B coupon rates. Higher NPL rates typically reduce available cash flow for Class B payments.
                  </Typography>
                  
                  <Box sx={{ height: 400, mb: 4 }}>
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        data={formatSensitivityData('npl')}
                        margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                        <XAxis 
                          dataKey="value"
                          label={{ value: 'NPL Rate (%)', position: 'insideBottomRight', offset: -5, fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <YAxis 
                          tickFormatter={(value) => `${value}%`}
                          label={{ value: 'Coupon Rate (%)', angle: -90, position: 'insideLeft', fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                          domain={[0, 'dataMax + 5']}
                        />
                        <RechartsTooltip content={<CustomTooltip />} />
                        <Legend 
                          wrapperStyle={{ paddingTop: 20 }}
                          formatter={(value) => (
                            <span style={{ color: theme.palette.text.primary }}>{value}</span>
                          )}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="modeled" 
                          name="Modeled Rate" 
                          stroke={theme.palette.primary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.primary.main }}
                          activeDot={{ r: 7, fill: theme.palette.primary.light }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="realized" 
                          name="Realized Rate" 
                          stroke={theme.palette.secondary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.secondary.main }}
                          activeDot={{ r: 7, fill: theme.palette.secondary.light }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </Box>
                  
                  <Box sx={{ mt: 4, p: 3, borderRadius: 2, bgcolor: alpha(theme.palette.background.paper, 0.4), border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}` }}>
                    <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                      Key Insights:
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      • The modeled and realized rates both decrease as NPL rates increase<br />
                      • The gap between modeled and realized rates widens with higher NPL rates<br />
                      • At NPL rates above 12%, the deviation becomes significant (over 5%)<br />
                      • Base case projections assume a 5% NPL rate
                    </Typography>
                  </Box>
                </Box>
              )}
              
              {/* Prepayment Impact Tab */}
              {tabValue === 2 && (
                <Box sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Class B Coupon Rate vs. Prepayment Rates
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    This analysis shows how early prepayment rates affect Class B coupon performance. Higher prepayment rates can impact the expected cash flow timing and reinvestment opportunities.
                  </Typography>
                  
                  <Box sx={{ height: 400, mb: 4 }}>
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        data={formatSensitivityData('prepayment')}
                        margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                        <XAxis 
                          dataKey="value"
                          label={{ value: 'Prepayment Rate (%)', position: 'insideBottomRight', offset: -5, fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <YAxis 
                          tickFormatter={(value) => `${value}%`}
                          label={{ value: 'Coupon Rate (%)', angle: -90, position: 'insideLeft', fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                          domain={[0, 'dataMax + 5']}
                        />
                        <RechartsTooltip content={<CustomTooltip />} />
                        <Legend 
                          wrapperStyle={{ paddingTop: 20 }}
                          formatter={(value) => (
                            <span style={{ color: theme.palette.text.primary }}>{value}</span>
                          )}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="modeled" 
                          name="Modeled Rate" 
                          stroke={theme.palette.primary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.primary.main }}
                          activeDot={{ r: 7, fill: theme.palette.primary.light }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="realized" 
                          name="Realized Rate" 
                          stroke={theme.palette.secondary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.secondary.main }}
                          activeDot={{ r: 7, fill: theme.palette.secondary.light }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </Box>
                  
                  <Box sx={{ mt: 4, p: 3, borderRadius: 2, bgcolor: alpha(theme.palette.background.paper, 0.4), border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}` }}>
                    <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                      Key Insights:
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      • Higher prepayment rates lead to lower coupon rates for Class B notes<br />
                      • At prepayment rates above 20%, the deviation between modeled and realized becomes critical<br />
                      • Base case projections assume a 10% prepayment rate<br />
                      • Prepayment sensitivity analysis suggests careful monitoring of early repayments
                    </Typography>
                  </Box>
                </Box>
              )}
              
              {/* Combined Analysis Tab */}
              {tabValue === 3 && (
                <Box sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Multifactor Analysis of Rate Deviation
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    This combined analysis shows how NPL and prepayment rates together affect Class B coupon rate deviation. Bubble size indicates the magnitude of deviation.
                  </Typography>
                  
                  <Box sx={{ height: 500 }}>
                    <ResponsiveContainer width="100%" height="100%">
                      <ScatterChart
                        margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                        <XAxis 
                          type="number" 
                          dataKey="x" 
                          name="NPL Rate" 
                          unit="%" 
                          domain={[0, 20]}
                          label={{ value: 'NPL Rate (%)', position: 'insideBottomRight', offset: -5, fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <YAxis 
                          type="number" 
                          dataKey="y" 
                          name="Prepayment Rate" 
                          unit="%"
                          domain={[0, 30]}
                          label={{ value: 'Prepayment Rate (%)', angle: -90, position: 'insideLeft', fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <ZAxis type="number" range={[60, 350]} />
                        <RechartsTooltip content={<ScatterTooltip />} />
                        <Legend 
                          wrapperStyle={{ paddingTop: 20 }}
                          formatter={(value) => (
                            <span style={{ color: theme.palette.text.primary }}>{value}</span>
                          )}
                        />
                        <Scatter 
                          name="Rate Deviation" 
                          data={formatScatterData()} 
                          fill={theme.palette.error.main}
                          fillOpacity={0.7}
                        />
                      </ScatterChart>
                    </ResponsiveContainer>
                  </Box>
                  
                  <Box sx={{ mt: 4, p: 3, borderRadius: 2, bgcolor: alpha(theme.palette.background.paper, 0.4), border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}` }}>
                    <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                      Risk Heatmap Interpretation
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      • Larger bubbles indicate greater deviation between modeled and realized coupon rates<br />
                      • The upper right quadrant (high NPL, high prepayment) represents the most severe stress conditions<br />
                      • Scenarios with high NPL rates and high prepayment rates tend to result in the largest deviations<br />
                      • Base case parameters (5% NPL, 10% prepayment) show moderate but acceptable deviation
                    </Typography>
                  </Box>
                </Box>
              )}
            </Paper>
          </Grid>
        </Grid>
        
        {/* Snackbar for Notifications from Step 8 */}
        <Snackbar
          open={snackbarOpen}
          autoHideDuration={6000}
          onClose={() => setSnackbarOpen(false)}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        >
          <Alert 
            onClose={() => setSnackbarOpen(false)} 
            severity={snackbarSeverity}
            sx={{ width: '100%' }}
          >
            {snackbarMessage}
          </Alert>
        </Snackbar>
      </Container>
    </ThemeProvider>
  );
};

export default StressTestingPage;

======================================================================

DOSYA: src\services\apiService.js
==================================================
// frontend/src/services/apiService.js
import axios from 'axios';

const API_URL =
  process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

/**
 * Ortak axios istemcisi
 */
const apiClient = axios.create({
  baseURL: API_URL,
  headers: { 'Content-Type': 'application/json' },
  // 5 dakika (300 000 ms) – optimizasyon işlemleri uzun sürebilir
  timeout: 300_000,
});

/* --------------------------------------------------------------------- */
/*                               UPLOAD                                  */
/* --------------------------------------------------------------------- */

/**
 * Excel dosyası yükle
 * @param {File} file
 * @returns {Promise<Object>}
 */
const uploadFile = async (file) => {
  const formData = new FormData();
  formData.append('file', file);

  try {
    console.log('Uploading file:', file.name);

    const response = await axios.post(
      `${API_URL}/upload-excel/`,
      formData,
      {
        headers: { 'Content-Type': 'multipart/form-data' },
      }
    );

    console.log('File upload successful');
    return response.data;
  } catch (error) {
    console.error('Error uploading file:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                             CALCULATION                               */
/* --------------------------------------------------------------------- */

/**
 * Hesaplama servisi.
 * 2. parametre olarak optimizasyon çıktısı gönderilirse
 * Class B nominali otomatik eklenir.
 *
 * @param {Object} params   – CalculationRequest gövdesi
 * @param {Object|null} optResult – OptimizationResult (opsiyonel)
 * @returns {Promise<Object>}
 */
const calculateResults = async (params, optResult = null) => {
  try {
    // İsteğe bağlı Class B nominal entegrasyonu
    const finalParams = { ...params };

    if (
      optResult &&
      optResult.class_b_nominal &&
      Number(optResult.class_b_nominal) > 0
    ) {
      finalParams.tranche_b = {
        ...(finalParams.tranche_b || {}),
        nominal: optResult.class_b_nominal,
      };
    }

    console.log('Calculating results with params:', finalParams);

    const response = await apiClient.post('/calculate/', finalParams);

    console.log('Calculation successful');
    return response.data;
  } catch (error) {
    console.error('Error calculating results:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                             OPTIMIZATION                              */
/* --------------------------------------------------------------------- */

/**
 * Yapı optimizasyonu (classic | genetic)
 *
 * @param {Object} params – OptimizationRequest gövdesi
 * @param {'classic'|'genetic'} [method='classic']
 * @returns {Promise<Object>}
 */
const optimizeStructure = async (params, method = 'classic') => {
  try {
    console.log(`Starting optimization with method: ${method}`);
    console.log(
      'Optimization params:',
      JSON.stringify(params, null, 2)
    );

    // İptal edilebilir istek oluştur
    const CancelToken = axios.CancelToken;
    const source = CancelToken.source();

    // 5 dakikada zaman aşımı
    const timeout = setTimeout(() => {
      source.cancel(
        'Operation timeout: The optimization process took too long'
      );
    }, 300_000);

    const response = await apiClient.post(
      `/optimize/${method}/`,
      params,
      { cancelToken: source.token }
    );

    clearTimeout(timeout);

    console.log(`${method} optimization completed successfully`);
    return response.data;
  } catch (error) {
    console.error(`Error in ${method} optimization:`, error);

    if (axios.isCancel(error)) {
      console.log('Request canceled:', error.message);
      throw new Error(
        'Optimization process was canceled: ' + error.message
      );
    }

    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);

      const status = error.response.status;
      let message = 'Optimization failed';

      switch (status) {
        case 400:
          message =
            'Invalid optimization parameters: ' +
            (error.response.data.detail ||
              'Please check your parameters');
          break;
        case 500:
          message =
            'Server error during optimization. The calculation may be too complex.';
          break;
        case 504:
          message =
            'Optimization timed out. Try again with simpler parameters.';
          break;
        default:
          message =
            `Optimization error (${status}): ` +
            (error.response.data.detail || error.message);
      }

      throw new Error(message);
    }

    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                           PROGRESS POLLING                            */
/* --------------------------------------------------------------------- */

/**
 * Sunucudan optimizasyon ilerlemesini sorgula
 * @returns {Promise<Object>}
 */
const pollOptimizationProgress = async () => {
  try {
    const response = await apiClient.get('/optimize/progress/');
    return response.data;
  } catch (error) {
    console.error('Error polling optimization progress:', error);
    return {
      progress: 0,
      phase: 'Error',
      message: 'Failed to get progress information',
      error: true,
    };
  }
};

/* --------------------------------------------------------------------- */
/*                            STRESS TESTING                             */
/* --------------------------------------------------------------------- */

/**
 * Run stress test on a structure with given parameters
 * @param {Object} params - StressTestRequest body
 * @returns {Promise<Object>}
 */
const runStressTest = async (params) => {
  try {
    console.log('Running stress test with params:', params);
    
    const response = await apiClient.post('/stress-test/', params);
    
    console.log('Stress test successful');
    return response.data;
  } catch (error) {
    console.error('Error running stress test:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                                EXPORT                                 */
/* --------------------------------------------------------------------- */

export {
  uploadFile,
  calculateResults,
  optimizeStructure,
  pollOptimizationProgress,
  runStressTest,
};

======================================================================



BACKEND SONUÇLARI:
================

DOSYA: backend\app\main.py
==================================================
import time
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from app.routers import calculation, optimization, stress_testing
import uvicorn

app = FastAPI(
    title="ABS Analysis Tool",
    description="Cash flow analysis for securitization",
    version="1.0.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, specify the actual frontend domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Add GZip compression for faster responses
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Add custom middleware for timeout and performance tracking
@app.middleware("http")
async def add_process_time_header(request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Include routers
app.include_router(calculation.router, prefix="/api", tags=["Calculation"])
app.include_router(optimization.router, prefix="/api", tags=["Optimization"])
app.include_router(stress_testing.router, prefix="/api", tags=["Stress Testing"])

@app.get("/")
async def root():
    return {"message": "ABS Analysis Tool API is running"}

# Configure server settings if run directly
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        timeout_keep_alive=600,  # 10 dakika keep-alive timeout
        workers=1,  # Optimization işlemi için tek bir işçi daha iyi olabilir
    )

======================================================================

DOSYA: backend\app\models\input_models.py
==================================================
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import date


class GeneralSettings(BaseModel):
    start_date: date
    operational_expenses: float
    min_buffer: float


class TrancheA(BaseModel):
    maturity_days: int
    base_rate: float
    spread: float
    reinvest_rate: float
    nominal: float


class TrancheB(BaseModel):
    maturity_days: int
    base_rate: float
    spread: float
    reinvest_rate: float
    nominal: Optional[float] = None  # Added Optional nominal field


class NPVSettings(BaseModel):
    method: str  # "weighted_avg_rate" or "custom_rate"
    custom_rate: Optional[float] = None


class OptimizationSettings(BaseModel):
    optimization_method: str = Field(default="classic")
    selected_strategies: List[str] = Field(default=["equal", "increasing", "decreasing", "middle_weighted"])
    a_tranches_range: List[int] = Field(default=[2, 6])
    maturity_range: List[int] = Field(default=[32, 365])
    maturity_step: int = Field(default=10)
    min_class_b_percent: float = Field(default=10.0)
    target_class_b_coupon_rate: float = Field(default=30.0)
    additional_days_for_class_b: int = Field(default=10)
    class_b_percent_deviation: float = Field(default=1.0)  # New field with tighter default value
    
    # Evolutionary algorithm parameters
    population_size: Optional[int] = Field(default=50)
    num_generations: Optional[int] = Field(default=40)


class CalculationRequest(BaseModel):
    general_settings: GeneralSettings
    tranches_a: List[TrancheA]
    tranche_b: TrancheB
    npv_settings: NPVSettings
    is_optimized: Optional[bool] = False
    optimization_method: Optional[str] = None


# Stress Testing Models
class StructureParameters(BaseModel):
    start_date: date
    a_maturities: List[int]
    a_base_rates: List[float]
    a_spreads: List[float]
    a_reinvest_rates: List[float]
    a_nominals: List[float]
    b_maturity: int
    b_base_rate: float
    b_spread: float
    b_reinvest_rate: float
    b_nominal: float
    ops_expenses: float = 0.0


class ScenarioParameters(BaseModel):
    name: str
    npl_rate: float
    prepayment_rate: float
    reinvestment_shift: float


class StressTestRequest(BaseModel):
    structure: StructureParameters
    scenario: ScenarioParameters

======================================================================

DOSYA: backend\app\routers\stress_testing.py
==================================================
from fastapi import APIRouter, HTTPException
from app.models.input_models import StressTestRequest  # You'll need to create this
from app.services.stress_testing_service import perform_stress_test
from app.routers.calculation import df_store
import logging

router = APIRouter()
logger = logging.getLogger(__name__)

@router.post("/stress-test/", response_model=dict)
async def stress_test(request: StressTestRequest):
    try:
        # Get the stored dataframe
        df = df_store.get("df")
        if df is None:
            raise HTTPException(status_code=400, detail="No data found. Please upload Excel file first.")
        
        # Perform the stress test
        result = perform_stress_test(df, request)
        return result
    except Exception as e:
        logger.error(f"Stress testing error: {str(e)}")
        raise HTTPException(status_code=400, detail=f"Stress testing error: {str(e)}")

======================================================================

DOSYA: backend\app\services\stress_testing_service.py
==================================================
import pandas as pd
import numpy as np
from app.utils.tranche_utils import calculate_tranche_results
from typing import Dict, Any, List
from app.models.input_models import StressTestRequest

def adjust_cash_flow_for_npl(df: pd.DataFrame, npl_rate: float) -> pd.DataFrame:
    """
    Adjust cash flows by reducing principal payments based on NPL rate
    """
    df_adjusted = df.copy()
    
    # Reduce principal by NPL rate
    df_adjusted['principal_amount'] = df_adjusted['principal_amount'] * (1 - (npl_rate / 100))
    
    # Recalculate total cash flow
    df_adjusted['cash_flow'] = df_adjusted['principal_amount'] + df_adjusted['interest_amount']
    df_adjusted['original_cash_flow'] = df_adjusted['cash_flow'].copy()
    
    return df_adjusted

def adjust_cash_flow_for_prepayment(df: pd.DataFrame, prepayment_rate: float) -> pd.DataFrame:
    """
    Adjust cash flows by shifting some payments earlier based on prepayment rate
    """
    if prepayment_rate <= 0:
        return df
    
    df_adjusted = df.copy()
    
    # Sort by date
    df_adjusted = df_adjusted.sort_values('installment_date')
    
    # Calculate running sum of principal
    total_principal = df_adjusted['principal_amount'].sum()
    
    # Calculate prepayment amount
    prepayment_amount = total_principal * (prepayment_rate / 100)
    
    # Distribution function (more prepayments in early periods)
    prepayment_weights = np.linspace(3, 1, len(df_adjusted))
    prepayment_weights = prepayment_weights / prepayment_weights.sum()
    
    # Allocate prepayments by weight
    prepayment_allocations = prepayment_amount * prepayment_weights
    
    # Apply prepayments (reduce later periods, increase earlier periods)
    n = len(df_adjusted)
    reduction_indices = range(n//2, n)  # Reduce second half
    addition_indices = range(0, n//2)   # Add to first half
    
    # Reduce later payments
    for i in reduction_indices:
        if i < len(prepayment_allocations):
            reduction = min(prepayment_allocations[i], df_adjusted.iloc[i]['principal_amount'] * 0.8)
            df_adjusted.iloc[i, df_adjusted.columns.get_loc('principal_amount')] -= reduction
    
    # Increase earlier payments
    for i in addition_indices:
        if i < len(prepayment_allocations):
            df_adjusted.iloc[i, df_adjusted.columns.get_loc('principal_amount')] += prepayment_allocations[i]
    
    # Recalculate total cash flow
    df_adjusted['cash_flow'] = df_adjusted['principal_amount'] + df_adjusted['interest_amount']
    df_adjusted['original_cash_flow'] = df_adjusted['cash_flow'].copy()
    
    return df_adjusted

def perform_stress_test(df: pd.DataFrame, request: StressTestRequest) -> Dict[str, Any]:
    """
    Perform stress testing by adjusting cash flows and recalculating with the same structure
    """
    # Extract parameters
    structure = request.structure
    scenario = request.scenario
    npl_rate = scenario.npl_rate
    prepayment_rate = scenario.prepayment_rate
    reinvestment_shift = scenario.reinvestment_shift
    
    # Adjust cash flows for NPL
    df_adjusted = adjust_cash_flow_for_npl(df, npl_rate)
    
    # Adjust cash flows for prepayment
    df_adjusted = adjust_cash_flow_for_prepayment(df_adjusted, prepayment_rate)
    
    # Adjust reinvestment rates if needed
    a_reinvest_rates = [rate + reinvestment_shift for rate in structure.a_reinvest_rates]
    b_reinvest_rate = structure.b_reinvest_rate + reinvestment_shift
    
    # Calculate new results
    result = calculate_tranche_results(
        df_adjusted, structure.start_date,
        structure.a_maturities, structure.a_base_rates, structure.a_spreads, a_reinvest_rates,
        structure.a_nominals, structure.b_maturity, structure.b_base_rate, structure.b_spread,
        b_reinvest_rate, structure.b_nominal, structure.ops_expenses
    )
    
    # Extract baseline results
    baseline_result = calculate_tranche_results(
        df, structure.start_date,
        structure.a_maturities, structure.a_base_rates, structure.a_spreads, structure.a_reinvest_rates,
        structure.a_nominals, structure.b_maturity, structure.b_base_rate, structure.b_spread,
        structure.b_reinvest_rate, structure.b_nominal, structure.ops_expenses
    )
    
    # Create response
    response = {
        'baseline': {
            'class_b_coupon_rate': baseline_result['effective_coupon_rate'],
            'min_buffer_actual': baseline_result['min_buffer_actual']
        },
        'stress_test': {
            'class_b_coupon_rate': result['effective_coupon_rate'],
            'min_buffer_actual': result['min_buffer_actual'],
            'npl_rate': npl_rate,
            'prepayment_rate': prepayment_rate,
            'reinvestment_shift': reinvestment_shift
        },
        'difference': {
            'class_b_coupon_rate': result['effective_coupon_rate'] - baseline_result['effective_coupon_rate'],
            'min_buffer_actual': result['min_buffer_actual'] - baseline_result['min_buffer_actual']
        }
    }
    
    return response

======================================================================

