BACKEND KLASÃ–R YAPISI:
=====================

ðŸ“¦src
  â”£ ðŸ“œApp.js
  â”£ ðŸ“œindex.css
  â”£ ðŸ“œindex.js
  â”£ ðŸ“‚components
    â”£ ðŸ“œAppLayout.js
    â”£ ðŸ“œFileUploader.js
    â”£ ðŸ“œFooter.js
    â”£ ðŸ“œSidebar.js
    â”£ ðŸ“‚calculation
      â”£ ðŸ“œCalculationResults.js
      â”£ ðŸ“œClassBCouponAdjuster.js
      â”£ ðŸ“œDefaultSettingsSelector.js
      â”£ ðŸ“œGeneralSettingsForm.js
      â”£ ðŸ“œInterestRatesTable.js
      â”£ ðŸ“œTrancheAForm.js
      â”£ ðŸ“œTrancheBForm.js
    â”£ ðŸ“‚optimization
      â”£ ðŸ“œOptimizationProgress.js
      â”£ ðŸ“œOptimizationResults.js
      â”£ ðŸ“œOptimizationSettingsForm.js
    â”£ ðŸ“‚receivables
      â”£ ðŸ“œReceivablesDashboard.js
    â”£ ðŸ“‚reports
      â”£ ðŸ“œInvestorReportCard.js
      â”£ ðŸ“œManagementReportCard.js
      â”£ ðŸ“œRegulatoryReportCard.js
      â”£ ðŸ“œReportsModule.js
  â”£ ðŸ“‚contexts
    â”£ ðŸ“œDataContext.js
  â”£ ðŸ“‚pages
    â”£ ðŸ“œCalculationPage.js
    â”£ ðŸ“œCalculationResults.js
    â”£ ðŸ“œComparisonPage.js
    â”£ ðŸ“œHomePage.js
    â”£ ðŸ“œOptimizationPage.js
    â”£ ðŸ“œReceivablesAnalysis.js
    â”£ ðŸ“œReportsPage.jsx
    â”£ ðŸ“œStressTestingPage.js
  â”£ ðŸ“‚services
    â”£ ðŸ“œapiService.js


BACKEND DOSYALARI VE Ä°Ã‡ERÄ°KLERÄ°:
==============================

DOSYA: src\App.js
==================================================
// src/App.js
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";

import AppLayout from "./components/AppLayout";
import Footer from "./components/Footer";
import HomePage from "./pages/HomePage";
import CalculationPage from "./pages/CalculationPage";
import OptimizationPage from "./pages/OptimizationPage";
import StressTestingPage from "./pages/StressTestingPage";
import { DataProvider } from "./contexts/DataContext";
import ComparisonPage from "./pages/ComparisonPage";
import ReceivablesAnalysis from "./pages/ReceivablesAnalysis";
import ReportsPage from "./pages/ReportsPage"; // Import the new ReportsPage

// Create a dark navy theme
const theme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#4e7bea', // Modern blue
      light: '#6d92fd',
      dark: '#3461c7',
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#9c27b0', // Purple
      light: '#bb4fd3',
      dark: '#7b1fa2',
      contrastText: '#ffffff',
    },
    error: {
      main: '#f44336',
      light: '#ff7961',
      dark: '#d32f2f',
    },
    warning: {
      main: '#ff9800',
      light: '#ffb74d',
      dark: '#f57c00',
    },
    info: {
      main: '#29b6f6',
      light: '#4fc3f7',
      dark: '#0288d1',
    },
    success: {
      main: '#4caf50',
      light: '#80e27e',
      dark: '#087f23',
    },
    background: {
      default: '#0f172a', // Dark navy
      paper: '#1e293b', // Lighter navy
    },
    text: {
      primary: '#e2e8f0',
      secondary: '#94a3b8',
    },
    divider: 'rgba(148, 163, 184, 0.12)',
  },
  typography: {
    fontFamily: '"Roboto", "Segoe UI", "Helvetica Neue", sans-serif',
    h4: {
      fontWeight: 500,
    },
    h5: {
      fontWeight: 500,
    },
    h6: {
      fontWeight: 500,
    },
    subtitle1: {
      fontWeight: 500,
    },
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
          borderRadius: 8,
        },
        elevation1: {
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
        },
        elevation2: {
          boxShadow: '0 3px 6px rgba(0,0,0,0.7), 0 2px 4px rgba(0,0,0,0.8)',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          fontWeight: 500,
          borderRadius: 6,
        },
        contained: {
          boxShadow: '0 1px 2px rgba(0,0,0,0.3)',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        head: {
          fontWeight: 600,
          backgroundColor: 'rgba(78, 123, 234, 0.15)',
        },
      },
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          '&:last-child td': {
            borderBottom: 0,
          },
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
          backgroundColor: '#0f172a', // Match background.default
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          borderRadius: 6,
        },
      },
    },
    MuiSlider: {
      styleOverrides: {
        thumb: {
          height: 20,
          width: 20,
          backgroundColor: '#fff',
          border: '2px solid currentColor',
          '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {
            boxShadow: 'inherit',
          },
        },
        valueLabel: {
          fontSize: 12,
          fontWeight: 'normal',
          top: -6,
          backgroundColor: 'unset',
          '&:before': {
            display: 'none',
          },
        },
      },
    },
    MuiCssBaseline: {
      styleOverrides: {
        body: {
          scrollbarColor: "#6b6b6b #2b2b2b",
          "&::-webkit-scrollbar, & *::-webkit-scrollbar": {
            backgroundColor: "#2b2b2b",
            width: 8,
          },
          "&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb": {
            backgroundColor: "#6b6b6b",
            borderRadius: 8,
            minHeight: 24,
          },
          "&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus": {
            backgroundColor: "#959595",
          },
          "&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active": {
            backgroundColor: "#959595",
          },
          "&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover": {
            backgroundColor: "#959595",
          },
        },
      },
    },
    MuiDrawer: {
      styleOverrides: {
        paper: {
          backgroundImage: 'none',
        },
      },
    },
    MuiListItemButton: {
      styleOverrides: {
        root: {
          '&.Mui-selected': {
            color: '#4e7bea',
          },
        },
      },
    },
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <DataProvider>
        <Router>
          <AppLayout>
            <Routes>
              <Route path="/" element={<HomePage />} />
              <Route path="/calculation" element={<CalculationPage />} />
              <Route path="/optimization" element={<OptimizationPage />} />
              <Route path="/comparison" element={<ComparisonPage />} />
              <Route path="/stress-testing" element={<StressTestingPage />} />
              <Route path="/receivables-analysis" element={<ReceivablesAnalysis />} />
              <Route path="/reports" element={<ReportsPage />} /> {/* Add the new route */}
            </Routes>
            <Footer />
          </AppLayout>
        </Router>
      </DataProvider>
    </ThemeProvider>
  );
}

export default App;

======================================================================

DOSYA: src\index.css
==================================================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

======================================================================

DOSYA: src\index.js
==================================================
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

======================================================================

DOSYA: src\components\AppLayout.js
==================================================
// src/components/AppLayout.js
import React, { useState } from 'react';
import { Box, CssBaseline, AppBar, Toolbar, IconButton, Typography, useTheme } from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import { alpha } from '@mui/material/styles';
import Sidebar from './Sidebar';

// Drawer width for calculating content margin
const drawerWidth = 260;

const AppLayout = ({ children }) => {
  const [mobileOpen, setMobileOpen] = useState(false);
  const theme = useTheme();

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh' }}>
      <CssBaseline />
      
      {/* App Bar - only visible on mobile */}
      <AppBar
        position="fixed"
        sx={{
          display: { xs: 'block', md: 'none' },
          width: '100%',
          background: 'linear-gradient(90deg, #0f172a 0%, #1e293b 100%)',
          borderBottom: `1px solid ${alpha(theme.palette.primary.main, 0.15)}`
        }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2 }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1, fontWeight: 600 }}>
            Securitization Platform
          </Typography>
        </Toolbar>
      </AppBar>
      
      {/* Sidebar */}
      <Sidebar mobileOpen={mobileOpen} handleDrawerToggle={handleDrawerToggle} />
      
      {/* Main Content */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          width: { md: `calc(100% - ${drawerWidth}px)` },
          p: 3,
          mt: { xs: 7, md: 0 }, // Add margin top on mobile for the AppBar
          backgroundColor: theme.palette.background.default,
        }}
      >
        {children}
      </Box>
    </Box>
  );
};

export default AppLayout;

======================================================================

DOSYA: src\components\FileUploader.js
==================================================
// src/components/FileUploader.js
import React, { useState } from "react";
import { 
  Box, 
  Button, 
  Typography, 
  Alert, 
  Paper, 
  CircularProgress,
  alpha,
  useTheme
} from "@mui/material";
import UploadFileIcon from "@mui/icons-material/UploadFile";
import FileUploadOutlinedIcon from "@mui/icons-material/FileUploadOutlined";
import DescriptionOutlinedIcon from "@mui/icons-material/DescriptionOutlined";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import { uploadFile } from "../services/apiService";
import { useData } from "../contexts/DataContext";

const FileUploader = () => {
  const { setCashFlowData, setIsLoading, setError, isLoading, error, cashFlowData } = useData();
  const theme = useTheme();

  const [file, setFile] = useState(null);
  const [dragActive, setDragActive] = useState(false);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  };

  const handleChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!file) return;
    
    try {
      setIsLoading(true);
      setError(null);
      
      const data = await uploadFile(file);
      setCashFlowData(data);
    } catch (error) {
      setError('Failed to upload file. Please check the file format and try again.');
      console.error('Upload error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Box sx={{ width: '100%', maxWidth: 700, mx: 'auto', my: 3 }}>
      {error && (
        <Alert 
          severity="error" 
          sx={{ 
            mb: 3, 
            borderRadius: 2,
            '& .MuiAlert-icon': {
              alignItems: 'center'
            }
          }}
        >
          {error}
        </Alert>
      )}
      
      <form onSubmit={handleSubmit}>
        <Box
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
          sx={{
            border: '2px dashed',
            borderColor: dragActive 
                ? theme.palette.primary.main
                : alpha(theme.palette.primary.main, 0.3),
            borderRadius: 2,
            p: 4,
            mb: 3,
            textAlign: 'center',
            cursor: 'pointer',
            transition: 'all 0.2s ease-in-out',
            backgroundColor: dragActive 
              ? alpha(theme.palette.primary.main, 0.15)
              : alpha(theme.palette.background.paper, 0.4),
            '&:hover': {
              borderColor: theme.palette.primary.main,
              backgroundColor: alpha(theme.palette.primary.main, 0.1)
            }
          }}
          onClick={() => document.getElementById('file-upload').click()}
        >
          <input
            type="file"
            id="file-upload"
            accept=".xlsx,.xls"
            onChange={handleChange}
            style={{ display: 'none' }}
          />
          {!file ? (
            <>
              <CloudUploadIcon sx={{ 
                fontSize: 64, 
                color: theme.palette.primary.main, 
                mb: 2, 
                filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'
              }} />
              <Typography variant="h6" gutterBottom fontWeight="medium" color="primary.main">
                Drag and drop your Excel file here
              </Typography>
              <Typography variant="body1" color="text.secondary">
                or click to browse files
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ 
                mt: 2, 
                opacity: 0.8
              }}>
                Supported formats: .xlsx, .xls
              </Typography>
            </>
          ) : (
            <>
              <DescriptionOutlinedIcon sx={{ 
                fontSize: 50, 
                color: theme.palette.primary.main, 
                mb: 2,
                filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'
              }} />
              <Typography variant="h6" gutterBottom color="primary.main">
                File selected
              </Typography>
              <Typography variant="body1" fontWeight="medium">
                {file.name}
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                Size: {(file.size / 1024).toFixed(1)} KB
              </Typography>
              <Typography variant="body2" color="primary.main" sx={{ mt: 2 }}>
                Click to select a different file
              </Typography>
            </>
          )}
        </Box>
        
        <Button
          type="submit"
          variant="contained"
          color="primary"
          fullWidth
          disabled={!file || isLoading}
          size="large"
          sx={{
            py: 1.5,
            fontWeight: 500,
            boxShadow: '0 4px 6px rgba(0,0,0,0.3)',
            background: isLoading ? 
              'linear-gradient(45deg, #4e7bea, #6d92fd)' : 
              'linear-gradient(45deg, #4e7bea, #3461c7)',
            '&:hover': {
              boxShadow: '0 6px 10px rgba(0,0,0,0.4)',
              background: 'linear-gradient(45deg, #5d8aff, #4e7bea)'
            }
          }}
          startIcon={isLoading ? <CircularProgress size={24} color="inherit" /> : <UploadFileIcon />}
        >
          {isLoading ? 'Processing...' : 'Upload and Process'}
        </Button>
      </form>
      
      {/* Display data summary after upload */}
      {cashFlowData && !isLoading && !error && (
        <Paper 
          elevation={2} 
          sx={{ 
            mt: 4, 
            p: 3, 
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.success.main, 0.4)}`,
            background: `linear-gradient(to right, ${alpha(theme.palette.success.dark, 0.1)}, ${alpha(theme.palette.success.main, 0.05)})`,
            boxShadow: `0 4px 12px ${alpha(theme.palette.success.dark, 0.25)}`
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <DescriptionOutlinedIcon sx={{ 
              color: theme.palette.success.main, 
              mr: 1,
              filter: 'drop-shadow(0 1px 2px rgba(0,0,0,0.3))'
            }} />
            <Typography variant="h6" color="success.main" fontWeight="medium">
              File Uploaded Successfully
            </Typography>
          </Box>
          
          <Box sx={{ 
            mt: 2,
            p: 2,
            backgroundColor: alpha(theme.palette.background.paper, 0.8),
            borderRadius: 1,
            boxShadow: `0 2px 8px ${alpha('#000', 0.2)}`
          }}>
            <Typography variant="subtitle2" gutterBottom color="text.secondary">
              Summary
            </Typography>
            
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, mt: 1 }}>
              <Box>
                <Typography variant="body2" color="text.secondary">Total Records</Typography>
                <Typography variant="h6">{cashFlowData.total_records}</Typography>
              </Box>
              
              <Box>
                <Typography variant="body2" color="text.secondary">Total Receivables</Typography>
                <Typography variant="h6">{new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(cashFlowData.total_principal)}</Typography>
              </Box>
              
              <Box>
                <Typography variant="body2" color="text.secondary">Total Interest</Typography>
                <Typography variant="h6">{new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(cashFlowData.total_interest)}</Typography>
              </Box>
              
              <Box>
                <Typography variant="body2" color="text.secondary">Total Cash Flow</Typography>
                <Typography variant="h6">{new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(cashFlowData.total_cash_flow)}</Typography>
              </Box>
            </Box>
            
            <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
              <b>Date Range:</b> {cashFlowData.date_range[0]} - {cashFlowData.date_range[1]}
            </Typography>
          </Box>
        </Paper>
      )}
    </Box>
  );
};

export default FileUploader;

======================================================================

DOSYA: src\components\Footer.js
==================================================
// src/components/Footer.js
import React from 'react';
import { 
  Box, 
  Typography, 
  Container, 
  Link, 
  Divider,
  useTheme,
  alpha
} from '@mui/material';
import ReceiptLongIcon from '@mui/icons-material/ReceiptLong';

const Footer = () => {
  const theme = useTheme();
  const currentYear = new Date().getFullYear();
  
  return (
    <Box
      component="footer"
      sx={{
        py: 4,
        mt: 'auto',
        borderTop: `1px solid ${alpha(theme.palette.primary.main, 0.15)}`,
        background: `linear-gradient(to right, ${theme.palette.background.default}, ${alpha(theme.palette.primary.dark, 0.1)}, ${theme.palette.background.default})`,
      }}
    >
      <Container maxWidth="lg">
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <ReceiptLongIcon sx={{ fontSize: 24, color: theme.palette.primary.main, mr: 1 }} />
            <Typography variant="h6" color="primary.main" fontWeight="medium">
              Receivables Securitization Platform
            </Typography>
          </Box>
          
          <Divider sx={{ width: '40px', mb: 2, borderColor: alpha(theme.palette.primary.main, 0.3) }} />
          
          <Typography variant="body2" color="text.secondary" align="center">
            Â© {currentYear} Receivables Securitization Platform | All Rights Reserved
          </Typography>
          
          <Box sx={{ mt: 2, display: 'flex', gap: 3 }}>
            <Link href="#" color="text.secondary" sx={{ 
              textDecoration: 'none',
              '&:hover': { color: theme.palette.primary.main }
            }}>
              Terms of Service
            </Link>
            <Link href="#" color="text.secondary" sx={{ 
              textDecoration: 'none', 
              '&:hover': { color: theme.palette.primary.main }
            }}>
              Privacy Policy
            </Link>
            <Link href="#" color="text.secondary" sx={{ 
              textDecoration: 'none',
              '&:hover': { color: theme.palette.primary.main }
            }}>
              Contact Us
            </Link>
          </Box>
        </Box>
      </Container>
    </Box>
  );
};

export default Footer;

======================================================================

DOSYA: src\components\Sidebar.js
==================================================
// src/components/Sidebar.js
import React from 'react';
import { Link as RouterLink, useLocation } from 'react-router-dom';
import {
  Box,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Typography,
  Divider,
  useTheme
} from '@mui/material';
import HomeIcon from '@mui/icons-material/Home';
import AccountBalanceIcon from '@mui/icons-material/AccountBalance';
import OptimizeIcon from '@mui/icons-material/Speed';
import CompareIcon from '@mui/icons-material/Compare';
import AssessmentIcon from '@mui/icons-material/Assessment';
import ReceiptLongIcon from '@mui/icons-material/ReceiptLong';
import BarChartIcon from '@mui/icons-material/BarChart';
import AssignmentIcon from '@mui/icons-material/Assignment';
import { alpha } from '@mui/material/styles';

// Drawer width
const drawerWidth = 260;

const Sidebar = ({ mobileOpen, handleDrawerToggle }) => {
  const location = useLocation();
  const theme = useTheme();
  
  // Menu items with reordered and renamed items
  const menuItems = [
    {
      path: '/',
      label: 'Dashboard',
      icon: <HomeIcon />
    },
    {
      path: '/receivables-analysis',
      label: 'Receivables Analytics',
      icon: <BarChartIcon />
    },
    {
      path: '/calculation',
      label: 'ABS Design',
      icon: <AccountBalanceIcon />
    },
    {
      path: '/optimization',
      label: 'Portfolio Optimizer',
      icon: <OptimizeIcon />
    },
    {
      path: '/comparison',
      label: 'Performance Metrics',
      icon: <CompareIcon />
    },
    {
      path: '/stress-testing',
      label: 'Stress Testing',
      icon: <AssessmentIcon />
    },
    {
      path: '/reports',
      label: 'Reports',
      icon: <AssignmentIcon />
    }
  ];

  const drawer = (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      <Box
        sx={{
          display: 'flex',
          alignItems: 'center',
          p: 2,
          height: 64,
          borderBottom: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`
        }}
      >
        <ReceiptLongIcon
          sx={{
            fontSize: 28,
            color: theme.palette.primary.main,
            mr: 1.5
          }}
        />
        <Typography
          variant="h6"
          component={RouterLink}
          to="/"
          sx={{
            textDecoration: 'none',
            color: 'inherit',
            fontWeight: 600,
            letterSpacing: 0.5,
          }}
        >
          Securitization
        </Typography>
      </Box>
      
      <List sx={{ px: 1, py: 2, flexGrow: 1 }}>
        {menuItems.map((item) => (
          <ListItem key={item.path} disablePadding sx={{ mb: 1 }}>
            <ListItemButton
              component={RouterLink}
              to={item.path}
              selected={location.pathname === item.path}
              sx={{
                borderRadius: 1,
                py: 1.2,
                backgroundColor: location.pathname === item.path
                  ? alpha(theme.palette.primary.main, 0.15)
                  : 'transparent',
                '&:hover': {
                  backgroundColor: location.pathname === item.path
                    ? alpha(theme.palette.primary.main, 0.25)
                    : alpha(theme.palette.primary.main, 0.1),
                },
                '&.Mui-selected': {
                  backgroundColor: alpha(theme.palette.primary.main, 0.15),
                  '&:hover': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.25),
                  }
                }
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 42,
                  color: location.pathname === item.path
                    ? theme.palette.primary.main
                    : theme.palette.text.secondary
                }}
              >
                {item.icon}
              </ListItemIcon>
              <ListItemText 
                primary={item.label} 
                primaryTypographyProps={{
                  fontWeight: location.pathname === item.path ? 600 : 400
                }}
              />
            </ListItemButton>
          </ListItem>
        ))}
      </List>
      
      <Divider sx={{ mx: 2, opacity: 0.3 }} />
      
      <Box sx={{ p: 2 }}>
        <Typography variant="body2" color="text.secondary" sx={{ fontWeight: 500 }}>
          Securitization Platform v1.0
        </Typography>
      </Box>
    </Box>
  );

  return (
    <Box
      component="nav"
      sx={{ width: { md: drawerWidth }, flexShrink: { md: 0 } }}
    >
      {/* Mobile drawer */}
      <Drawer
        variant="temporary"
        open={mobileOpen}
        onClose={handleDrawerToggle}
        ModalProps={{
          keepMounted: true, // Better mobile performance
        }}
        sx={{
          display: { xs: 'block', md: 'none' },
          '& .MuiDrawer-paper': { 
            boxSizing: 'border-box', 
            width: drawerWidth,
            backgroundColor: theme.palette.background.default,
            borderRight: `1px solid ${alpha(theme.palette.divider, 0.1)}`
          },
        }}
      >
        {drawer}
      </Drawer>
      
      {/* Desktop drawer */}
      <Drawer
        variant="permanent"
        sx={{
          display: { xs: 'none', md: 'block' },
          '& .MuiDrawer-paper': { 
            boxSizing: 'border-box', 
            width: drawerWidth,
            backgroundColor: theme.palette.background.default,
            borderRight: `1px solid ${alpha(theme.palette.divider, 0.1)}`
          },
        }}
        open
      >
        {drawer}
      </Drawer>
    </Box>
  );
};

export default Sidebar;

======================================================================

DOSYA: src\components\calculation\CalculationResults.js
==================================================
// src/components/calculation/CalculationResults.js
import React from "react";
import { 
  Box, 
  Typography, 
  Paper,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Divider,
  Chip,
  alpha,
  useTheme
} from "@mui/material";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import ReceiptLongIcon from '@mui/icons-material/ReceiptLong';

const CalculationResults = ({ results }) => {
  const theme = useTheme();
  
  if (!results) {
    return (
      <Paper sx={{ 
        p: 4, 
        textAlign: "center", 
        borderRadius: 2,
        backgroundColor: alpha(theme.palette.info.light, 0.08),
        border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
      }}>
        <Typography variant="h6" color="text.secondary" gutterBottom>
          Results Not Available
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Please start the calculation process to view results
        </Typography>
      </Paper>
    );
  }
  
  // Format currency values
  const formatCurrency = (value) => {
    if (value === undefined || value === null) return "$0.00";
    return new Intl.NumberFormat("en-US", { style: "currency", currency: "USD" }).format(value);
  };
  
  // Format percentage values with null check
  const formatPercent = (value) => {
    if (value === undefined || value === null) return "0.00%";
    return `${value.toFixed(2)}%`;
  };

  // Extract color values from theme
  const seniorColor = theme.palette.primary.main;
  const subordinatedColor = theme.palette.secondary.main;
  
  // Prepare data for tranche comparison chart
  const chartData = [
    {
      name: "Senior",
      principal: results.class_a_principal || 0,
      interest: results.class_a_interest || 0,
      total: results.class_a_total || 0,
    },
    {
      name: "Subordinated",
      principal: results.class_b_principal || 0,
      coupon: results.class_b_coupon || 0,
      total: results.class_b_total || 0,
    },
  ];

  // Calculate totals with null checks
  const totalSenior = results.class_a_total || 0;
  const totalSubordinated = results.class_b_total || 0;
  const totalAll = totalSenior + totalSubordinated;
  
  // Check if minimum buffer requirement is met
  const minBufferTarget = 5.0;
  const isBufferMet = (results.min_buffer_actual || 0) >= minBufferTarget;

  return (
    <Box>
      {/* Summary Section */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.primary.main, 0.03)
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <ReceiptLongIcon sx={{ fontSize: 24, color: theme.palette.primary.main, mr: 1.5 }} />
          <Typography variant="h6" color="primary.main" gutterBottom fontWeight="medium">
            Securitization Results Summary
          </Typography>
        </Box>
        
        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 3, mt: 2 }}>
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary">
              Payment Totals
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Senior Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalSenior)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalSenior / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.primary.main, 0.1),
                          color: theme.palette.primary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Subordinated Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalSubordinated)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalSubordinated / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.secondary.main, 0.1),
                          color: theme.palette.secondary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Grand Total</TableCell>
                    <TableCell align="right">{formatCurrency(totalAll)}</TableCell>
                    <TableCell align="right">
                      <Chip 
                        size="small" 
                        label="100.00%"
                        sx={{ 
                          bgcolor: alpha(theme.palette.info.main, 0.1),
                          color: theme.palette.info.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
          
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary" fontWeight="medium">
              Principal and Interest
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: seniorColor,
                            mr: 1 
                          }} 
                        />
                        Senior
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_interest)}</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: subordinatedColor,
                            mr: 1 
                          }} 
                        />
                        Subordinated
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_coupon)}</TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Total</TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_principal || 0) + (results.class_b_principal || 0))}
                    </TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_interest || 0) + (results.class_b_coupon || 0))}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </Box>
        
        <Divider sx={{ my: 3, opacity: 0.6 }} />
        
        <Box sx={{ 
          display: 'flex', 
          gap: 4, 
          flexWrap: 'wrap',
          backgroundColor: isBufferMet ? alpha(theme.palette.success.main, 0.08) : alpha(theme.palette.error.main, 0.08),
          p: 2,
          borderRadius: 1
        }}>
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Minimum Credit Enhancement Requirement
            </Typography>
            <Typography variant="h6" sx={{ mt: 0.5 }}>
              {formatPercent(minBufferTarget)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Actual Credit Enhancement (Senior)
            </Typography>
            <Typography variant="h6" color={isBufferMet ? "success.main" : "error.main"} sx={{ mt: 0.5 }}>
              {formatPercent(results.min_buffer_actual)}
            </Typography>
          </Box>
          
          <Box sx={{ ml: 'auto' }}>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Status
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
              {isBufferMet ? (
                <CheckCircleOutlineIcon color="success" sx={{ mr: 1 }} />
              ) : (
                <ErrorOutlineIcon color="error" sx={{ mr: 1 }} />
              )}
              <Typography 
                variant="h6" 
                color={isBufferMet ? "success.main" : "error.main"}
              >
                {isBufferMet ? "Requirement Met" : "Requirement Not Met"}
              </Typography>
            </Box>
          </Box>
        </Box>
      </Paper>
      
      {/* Financing Cost Analysis */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.info.main, 0.03)
        }}
      >
        <Typography variant="h6" color="info.main" gutterBottom fontWeight="medium">
          Financing Cost Analysis
        </Typography>
        
        <TableContainer sx={{ 
          mt: 2,
          bgcolor: 'background.paper', 
          borderRadius: 1,
          boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
        }}>
          <Table>
            <TableBody>
              <TableRow>
                <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Principal Paid to Originator:</TableCell>
                <TableCell align="right" sx={{ fontWeight: 600, pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                  {formatCurrency(results.total_principal_paid)}
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Receivables Principal:</TableCell>
                <TableCell align="right" sx={{ pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                  {formatCurrency(results.total_loan_principal)}
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={{ pl: 2, fontWeight: 600 }}>
                  Financing {(results.financing_cost || 0) > 0 ? "Profit" : "Loss"}:
                </TableCell>
                <TableCell 
                  align="right" 
                  sx={{ 
                    fontWeight: 600,
                    pr: 2,
                    color: (results.financing_cost || 0) > 0 ? "success.main" : "error.main"
                  }}
                >
                  {formatCurrency(Math.abs(results.financing_cost || 0))}
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      
      {/* Tranche Results Chart */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
          backgroundColor: 'background.paper'
        }}
      >
        <Typography variant="h6" gutterBottom fontWeight="medium">
          Tranche Comparison
        </Typography>
        
        <Box sx={{ height: 400, mt: 3 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={chartData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip 
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  borderRadius: 8,
                  border: 'none',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.15)'
                }}
              />
              <Legend />
              <Bar 
                dataKey="principal" 
                name="Principal" 
                stackId="a" 
                fill={theme.palette.primary.main}
                radius={[4, 4, 0, 0]}
              />
              <Bar 
                dataKey="interest" 
                name="Interest" 
                stackId="a" 
                fill={theme.palette.primary.light}
                radius={[4, 4, 0, 0]}
              />
              <Bar 
                dataKey="coupon" 
                name="Yield" 
                stackId="a" 
                fill={theme.palette.secondary.main}
                radius={[4, 4, 0, 0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </Paper>
      
      {/* Detailed Results Table */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
          backgroundColor: 'background.paper'
        }}
      >
        <Typography variant="h6" gutterBottom fontWeight="medium">
          Detailed Tranche Results
        </Typography>
        
        {results.tranche_results && results.tranche_results.length > 0 ? (
          <TableContainer sx={{ 
            maxHeight: 440,
            mt: 2,
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Tranche</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Days</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Date</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Principal</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Interest / Yield</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Total Payment</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Credit Enhancement (%)</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {results.tranche_results.map((tranche, index) => (
                  <TableRow 
                    key={index}
                    sx={{ 
                      backgroundColor: tranche["Is Class A"] 
                        ? alpha(theme.palette.primary.main, 0.03)
                        : alpha(theme.palette.secondary.main, 0.03),
                      '&:hover': {
                        backgroundColor: tranche["Is Class A"] 
                          ? alpha(theme.palette.primary.main, 0.07)
                          : alpha(theme.palette.secondary.main, 0.07),
                      }
                    }}
                  >
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: tranche["Is Class A"] ? seniorColor : subordinatedColor,
                            mr: 1 
                          }} 
                        />
                        {tranche["Tranche"].replace("Class A", "Senior ").replace("Class B", "Subordinated ")}
                      </Box>
                    </TableCell>
                    <TableCell>{tranche["Maturity Days"]}</TableCell>
                    <TableCell>{tranche["Maturity Date"]}</TableCell>
                    <TableCell>{formatCurrency(tranche["Principal"])}</TableCell>
                    <TableCell>
                      {formatCurrency(
                        tranche["Is Class A"] ? tranche["Interest"] : tranche["Coupon Payment"]
                      )}
                    </TableCell>
                    <TableCell>{formatCurrency(tranche["Total Payment"])}</TableCell>
                    <TableCell>
                      <Chip 
                        size="small" 
                        label={formatPercent(tranche["Buffer Cash Flow Ratio (%)"])}
                        sx={{ 
                          bgcolor: 
                            tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                              ? alpha(theme.palette.success.main, 0.1)
                              : alpha(theme.palette.warning.main, 0.1),
                          color: 
                            tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                              ? theme.palette.success.main
                              : theme.palette.warning.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        ) : (
          <Typography variant="body2" color="text.secondary" sx={{ py: 3, textAlign: "center" }}>
            Detailed results are not available yet
          </Typography>
        )}
      </Paper>
    </Box>
  );
};

export default CalculationResults;

======================================================================

DOSYA: src\components\calculation\ClassBCouponAdjuster.js
==================================================
// src/components/calculation/ClassBCouponAdjuster.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  TextField, 
  Paper, 
  Button, 
  CircularProgress,
  Alert,
  Divider,
  Chip,
  useTheme,
  alpha,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody
} from '@mui/material';
import TargetIcon from '@mui/icons-material/TrackChanges';
import TuneIcon from '@mui/icons-material/Tune';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import { useData } from '../../contexts/DataContext';
import { calculateResults } from '../../services/apiService';

const ClassBCouponAdjuster = () => {
  const theme = useTheme();
  const { 
    trancheB, 
    setTrancheB, 
    calculationResults, 
    setCalculationResults, 
    createCalculationRequest, 
    isLoading, 
    setIsLoading, 
    setError
  } = useData();
  
  const [targetRate, setTargetRate] = useState(42.0);
  const [currentRate, setCurrentRate] = useState(0);
  const [currentDirectRate, setCurrentDirectRate] = useState(0);
  const [adjustmentHistory, setAdjustmentHistory] = useState([]);
  const [adjustmentMessage, setAdjustmentMessage] = useState('');
  const [adjustmentSuccess, setAdjustmentSuccess] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  
  // Initialize from calculation results
  useEffect(() => {
    if (calculationResults) {
      // Find Class B tranche in interest_rate_conversions
      const classBTranche = calculationResults.interest_rate_conversions?.find(
        rate => rate.Tranche.includes('Class B')
      );
      
      if (classBTranche) {
        const effectiveRate = 
          classBTranche['Effective Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Effective Coupon Rate (%)']);
            
        const directRate = 
          classBTranche['Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Coupon Rate (%)']);
        
        setCurrentRate(effectiveRate);
        setCurrentDirectRate(directRate);
        
        // Initialize target rate to 42.0 (or another default)
        if (targetRate === 0) {
          setTargetRate(42.0);
        }
      }
    }
  }, [calculationResults]);
  
  // Manual adjustment with 1M increments
  const adjustNominal = async (direction) => {
    // Get current nominal
    const currentNominal = trancheB.nominal || 0;
    
    // Determine adjustment amount - changed to 1 million
    const increaseAmount = 1000000; // 1 million increase
    
    // Calculate new nominal
    let newNominal;
    if (direction === 'increase') {
      // Increase nominal to decrease rate
      newNominal = currentNominal + increaseAmount;
    } else {
      // Decrease nominal to increase rate
      newNominal = Math.max(1000000, currentNominal - increaseAmount);
    }
    
    // Update state
    setAdjustmentMessage(`Adjusting nominal to ${newNominal.toLocaleString()}...`);
    
    // Create updated tranche
    const updatedTrancheB = {
      ...trancheB,
      nominal: newNominal
    };
    
    // Update tranche B
    setTrancheB(updatedTrancheB);
    
    // Recalculate
    try {
      setIsLoading(true);
      
      // Create request
      const request = createCalculationRequest();
      
      // Calculate results
      const result = await calculateResults(request);
      
      // Update results
      setCalculationResults(result);
      
      // Extract new rates
      const classBTranche = result.interest_rate_conversions?.find(
        rate => rate.Tranche.includes('Class B')
      );
      
      if (classBTranche) {
        const newEffectiveRate = 
          classBTranche['Effective Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Effective Coupon Rate (%)']);
            
        const newDirectRate = 
          classBTranche['Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Coupon Rate (%)']);
        
        // Update state
        setCurrentRate(newEffectiveRate);
        setCurrentDirectRate(newDirectRate);
        
        // Check if we're close to target
        const diff = Math.abs(newEffectiveRate - targetRate);
        const isClose = diff <= 0.5; // Within 0.5%
        
        // Set message
        setAdjustmentMessage(
          isClose 
            ? `Target rate achieved! Current rate: ${newEffectiveRate.toFixed(2)}% (target: ${targetRate.toFixed(2)}%)`
            : `New effective rate: ${newEffectiveRate.toFixed(2)}% (target: ${targetRate.toFixed(2)}%). Continue adjusting.`
        );
        
        setAdjustmentSuccess(isClose);
        
        // Add to history
        setAdjustmentHistory(prev => [
          ...prev,
          {
            nominal: newNominal,
            effectiveRate: newEffectiveRate,
            directRate: newDirectRate,
            difference: diff
          }
        ]);
        
        // Give suggestion for next step
        if (newEffectiveRate > targetRate) {
          setAdjustmentMessage(prev => `${prev} Try increasing nominal to lower the rate.`);
        } else if (newEffectiveRate < targetRate) {
          setAdjustmentMessage(prev => `${prev} Try decreasing nominal to increase the rate.`);
        }
      }
    } catch (error) {
      console.error("Error calculating with new nominal:", error);
      setAdjustmentMessage(`Error: ${error.message}`);
      setError(`Calculation error: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  const formatNominal = (nominal) => {
    return new Intl.NumberFormat('tr-TR').format(nominal);
  };
  
  return (
    <Paper 
      sx={{ 
        p: 3, 
        mb: 3,
        border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
        backgroundColor: alpha(theme.palette.secondary.main, 0.03)
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <TargetIcon sx={{ color: theme.palette.secondary.main, mr: 1 }} />
        <Typography variant="h6" color="secondary.main" fontWeight="medium">
          Class B Coupon Rate Adjuster
        </Typography>
      </Box>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        Fine-tune the Class B nominal amount to achieve your target effective coupon rate.
        Use the buttons below to adjust in 1 million increments.
      </Typography>
      
      <Box sx={{ 
        display: 'flex', 
        flexWrap: 'wrap', 
        gap: 4, 
        alignItems: 'center',
        mb: 3
      }}>
        <Box sx={{ minWidth: 200 }}>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Current Effective Coupon Rate
          </Typography>
          <Typography variant="h5" color={
            Math.abs(currentRate - targetRate) <= 0.5 ? 'success.main' : 'text.primary'
          }>
            {currentRate.toFixed(2)}%
          </Typography>
          <Typography variant="caption" color="text.secondary">
            Direct Coupon Rate: {currentDirectRate.toFixed(2)}%
          </Typography>
        </Box>
        
        <Box sx={{ minWidth: 200 }}>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Target Effective Coupon Rate
          </Typography>
          <TextField
            size="small"
            value={targetRate}
            onChange={(e) => setTargetRate(parseFloat(e.target.value) || 0)}
            InputProps={{
              endAdornment: '%',
              inputProps: { min: 0, step: 0.1 }
            }}
            disabled={isLoading}
            type="number"
          />
        </Box>
        
        <Box sx={{ minWidth: 200 }}>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Current Class B Nominal
          </Typography>
          <Typography variant="h5">
            {formatNominal(trancheB.nominal || 0)}
          </Typography>
        </Box>
      </Box>
      
      {adjustmentMessage && (
        <Alert 
          severity={adjustmentSuccess ? "success" : "info"} 
          sx={{ mb: 3 }}
        >
          {adjustmentMessage}
        </Alert>
      )}
      
      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={() => adjustNominal('increase')}
          disabled={isLoading}
          startIcon={<ExpandMoreIcon />}
        >
          Increase Nominal (+1M) â†’ Lower Rate
        </Button>
        
        <Button
          variant="contained"
          color="error"
          onClick={() => adjustNominal('decrease')}
          disabled={isLoading}
          startIcon={<ExpandLessIcon />}
        >
          Decrease Nominal (-1M) â†’ Higher Rate
        </Button>
        
        <Button
          variant="outlined"
          color="secondary"
          onClick={() => setShowHistory(!showHistory)}
        >
          {showHistory ? 'Hide' : 'Show'} Adjustment History
        </Button>
      </Box>
      
      {/* Quick reference */}
      <Paper elevation={0} sx={{ p: 2, backgroundColor: alpha(theme.palette.info.main, 0.05), mb: 3, border: `1px solid ${alpha(theme.palette.info.main, 0.2)}` }}>
        <Typography variant="subtitle2" gutterBottom color="info.main">Quick Reference:</Typography>
        <Typography variant="body2">
          â€¢ To <strong>decrease</strong> the effective coupon rate: <strong>increase</strong> the nominal amount<br />
          â€¢ To <strong>increase</strong> the effective coupon rate: <strong>decrease</strong> the nominal amount
        </Typography>
      </Paper>
      
      {showHistory && adjustmentHistory.length > 0 && (
        <>
          <Divider sx={{ my: 3 }} />
          
          <Box>
            <Typography variant="subtitle1" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
              <TuneIcon sx={{ mr: 1, fontSize: 20 }} />
              Adjustment History
            </Typography>
            
            <TableContainer component={Paper} variant="outlined" sx={{ maxHeight: 300 }}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>#</TableCell>
                    <TableCell align="right">Nominal</TableCell>
                    <TableCell align="right">Effective Rate</TableCell>
                    <TableCell align="right">Direct Rate</TableCell>
                    <TableCell align="right">Difference</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {adjustmentHistory.map((entry, index) => (
                    <TableRow key={index}>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell align="right">{formatNominal(entry.nominal)}</TableCell>
                      <TableCell align="right">{entry.effectiveRate.toFixed(2)}%</TableCell>
                      <TableCell align="right">{entry.directRate.toFixed(2)}%</TableCell>
                      <TableCell align="right">
                        <Chip
                          size="small"
                          label={`${entry.difference.toFixed(2)}%`}
                          color={entry.difference <= 0.5 ? "success" : "default"}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </>
      )}
    </Paper>
  );
};

export default ClassBCouponAdjuster;

======================================================================

DOSYA: src\components\calculation\DefaultSettingsSelector.js
==================================================
// src/components/calculation/DefaultSettingsSelector.js
import React from 'react';
import { 
  Box, 
  Typography, 
  ToggleButtonGroup, 
  ToggleButton, 
  Tooltip, 
  Paper,
  alpha,
  useTheme
} from '@mui/material';
import SettingsIcon from '@mui/icons-material/Settings';
import RestoreIcon from '@mui/icons-material/Restore';
import NewReleasesIcon from '@mui/icons-material/NewReleases';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import { useData } from '../../contexts/DataContext';

const DefaultSettingsSelector = () => {
  const theme = useTheme();
  const { selectedDefaults, setSelectedDefaults } = useData();

  const handleChange = (event, newValue) => {
    if (newValue !== null) {
      setSelectedDefaults(newValue);
    }
  };

  const settingsInfo = {
    previous: {
      label: "Option A",
      description: "April 28, 2025 start date, 2 Class A tranches",
      icon: <RestoreIcon />,
      details: {
        startDate: "28 April 2025",
        classA: "2 tranches (88-150 days)",
        trancheB: "155 days maturity",
        classBPercentage: "Default calculation"
      },
    },
    new: {
      label: "Option B",
      description: "April 28, 2025 start date, 2 Class A tranches",
      icon: <NewReleasesIcon />,
      details: {
        startDate: "28 April 2025",
        classA: "1 tranches (150 days)",
        trancheB: "155 days maturity",
        classBPercentage: "Fixed 5% of total"
      },
    },
  };

  return (
    <Paper
      elevation={0}
      sx={{
        p: 3,
        mb: 3,
        border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
        backgroundColor: alpha(theme.palette.info.main, 0.03),
        borderRadius: 2,
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <SettingsIcon sx={{ mr: 1, color: theme.palette.info.main }} />
        <Typography variant="h6" color="info.main" fontWeight="medium">
          Default Settings Selection
        </Typography>
        <Tooltip 
          title="Choose between previous and new default settings for tranches structure" 
          placement="top"
          sx={{ ml: 1 }}
        >
          <InfoOutlinedIcon fontSize="small" color="info" />
        </Tooltip>
      </Box>

      <Box sx={{ mb: 2 }}>
        <Typography variant="body2" color="text.secondary">
          Select which default settings to use for your calculation. This will reset your current configuration.
        </Typography>
      </Box>

      <ToggleButtonGroup
        value={selectedDefaults}
        exclusive
        onChange={handleChange}
        aria-label="default settings selection"
        sx={{ 
          display: 'flex', 
          width: '100%',
          '& .MuiToggleButton-root': {
            flex: 1,
            py: 1.5,
            borderRadius: 2,
            "&.Mui-selected": {
              backgroundColor: alpha(theme.palette.info.main, 0.1),
              borderColor: alpha(theme.palette.info.main, 0.5),
              "&:hover": {
                backgroundColor: alpha(theme.palette.info.main, 0.15),
              }
            }
          }
        }}
      >
        {Object.entries(settingsInfo).map(([key, info]) => (
          <ToggleButton 
            key={key} 
            value={key}
            sx={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: 1,
              textTransform: 'none',
              p: 2
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              {info.icon}
              <Typography variant="subtitle1" fontWeight="medium">
                {info.label}
              </Typography>
            </Box>
            <Typography variant="body2" color="text.secondary">
              {info.description}
            </Typography>
          </ToggleButton>
        ))}
      </ToggleButtonGroup>

      {/* Details about selected settings */}
      <Box 
        sx={{ 
          mt: 2, 
          p: 2, 
          backgroundColor: alpha(theme.palette.info.main, 0.05),
          borderRadius: 1,
          border: `1px solid ${alpha(theme.palette.info.main, 0.1)}`,
        }}
      >
        <Typography variant="subtitle2" gutterBottom>
          {settingsInfo[selectedDefaults].label} Details:
        </Typography>
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, mt: 1 }}>
          <Box>
            <Typography variant="body2" color="text.secondary">Start Date</Typography>
            <Typography variant="body1" fontWeight="medium">
              {settingsInfo[selectedDefaults].details.startDate}
            </Typography>
          </Box>
          <Box>
            <Typography variant="body2" color="text.secondary">Class A Structure</Typography>
            <Typography variant="body1" fontWeight="medium">
              {settingsInfo[selectedDefaults].details.classA}
            </Typography>
          </Box>
          <Box>
            <Typography variant="body2" color="text.secondary">Class B Structure</Typography>
            <Typography variant="body1" fontWeight="medium">
              {settingsInfo[selectedDefaults].details.trancheB}
            </Typography>
          </Box>
          <Box>
            <Typography variant="body2" color="text.secondary">Class B Percentage</Typography>
            <Typography variant="body1" fontWeight="medium" color={selectedDefaults === 'new' ? 'primary.main' : 'text.primary'}>
              {settingsInfo[selectedDefaults].details.classBPercentage}
            </Typography>
          </Box>
        </Box>
      </Box>
    </Paper>
  );
};

export default DefaultSettingsSelector;

======================================================================

DOSYA: src\components\calculation\GeneralSettingsForm.js
==================================================
// frontend/src/components/calculation/GeneralSettingsForm.js
import React from 'react';
import { Box, Typography, TextField, Paper, Button } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { useData } from '../../contexts/DataContext';

const GeneralSettingsForm = () => {
  const { generalSettings, setGeneralSettings } = useData();

  const handleChange = (field, value) => {
    setGeneralSettings({
      ...generalSettings,
      [field]: value,
    });
  };

  return (
    <Paper sx={{ p: 3, mb: 3 }}>
      <Typography variant="h6" gutterBottom>
        General Settings
      </Typography>
      
      <Box sx={{ mt: 2 }}>
        <LocalizationProvider dateAdapter={AdapterDateFns}>
          <DatePicker
            label="Start Date"
            value={generalSettings.start_date}
            onChange={(newValue) => handleChange('start_date', newValue)}
            renderInput={(params) => <TextField {...params} fullWidth margin="normal" />}
          />
        </LocalizationProvider>
        
        <TextField
          fullWidth
          margin="normal"
          id="operational_expenses"
          label="Operational Expenses (â‚º)"
          type="number"
          value={generalSettings.operational_expenses}
          onChange={(e) => handleChange('operational_expenses', parseFloat(e.target.value))}
          InputProps={{
            inputProps: { min: 0, step: 1000 }
          }}
        />
        
        <TextField
          fullWidth
          margin="normal"
          id="min_buffer"
          label="Minimum Buffer (%)"
          type="number"
          value={generalSettings.min_buffer}
          onChange={(e) => handleChange('min_buffer', parseFloat(e.target.value))}
          InputProps={{
            inputProps: { min: 0, step: 0.5 }
          }}
        />
      </Box>
    </Paper>
  );
};

export default GeneralSettingsForm;

======================================================================

DOSYA: src\components\calculation\InterestRatesTable.js
==================================================
// frontend/src/components/calculation/InterestRatesTable.js
import React from 'react';
import { 
  Box, 
  Typography, 
  Paper,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  alpha,
  Chip,
  Grid,
  Divider,
  useTheme
} from '@mui/material';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer
} from 'recharts';

// Custom tooltip component for charts with enhanced styling
const CustomTooltip = ({ active, payload, label, formatter }) => {
  const theme = useTheme();
  if (active && payload && payload.length) {
    return (
      <Paper
        sx={{
          p: 1.5,
          boxShadow: theme.shadows[3],
          borderRadius: theme.shape.borderRadius,
          border: "none",
          minWidth: 180,
          maxWidth: 280,
        }}
      >
        <Typography variant="subtitle2" sx={{ mb: 0.5, fontWeight: 600 }}>{label}</Typography>
        {payload.map((entry, index) => (
          <Box key={`item-${index}`} sx={{ color: entry.color, display: 'flex', justifyContent: 'space-between', my: 0.5 }}>
            <Typography variant="body2" sx={{ mr: 2 }}>
              {entry.name}:
            </Typography>
            <Typography variant="body2" fontWeight="medium">
              {formatter ? formatter(entry.value) : entry.value}
            </Typography>
          </Box>
        ))}
      </Paper>
    );
  }
  return null;
};

const InterestRatesTable = ({ results }) => {
  const theme = useTheme();
  
  // Format value function (handles '-' or number)
  const formatValue = (value) => {
    if (value === '-') return value;
    return `${parseFloat(value).toFixed(2)}%`;
  };

  // Format value for charts (returns number)
  const getNumericValue = (value) => {
    if (value === '-' || value === undefined || value === null) return 0;
    return parseFloat(value);
  };

  // Prepare data for analysis
  const classAData = results.interest_rate_conversions
    .filter(rate => rate.Tranche.includes('Class A'))
    .map(rate => ({
      name: rate.Tranche,
      rate: getNumericValue(rate['Simple Annual Interest (%)']),
      maturity: rate['Maturity Days'],
      class: 'A'
    }));
    
  const classBData = results.interest_rate_conversions
    .filter(rate => rate.Tranche.includes('Class B'))
    .map(rate => ({
      name: rate.Tranche,
      rate: getNumericValue(rate['Effective Coupon Rate (%)']),
      directRate: getNumericValue(rate['Coupon Rate (%)']),
      maturity: rate['Maturity Days'],
      class: 'B'
    }));
  
  
  // Color helper function
  const getClassColor = (classType, variant = 'main') => {
    return classType === 'A' ? theme.palette.primary[variant] : theme.palette.secondary[variant];
  };
  
  return (
    <Box>
      {/* Class B Coupon Information with enhanced styling */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.secondary.main, 0.05),
          borderRadius: 2
        }}
      >
        <Typography variant="h6" gutterBottom color="secondary.main" fontWeight="medium">
          Class B Coupon Information
        </Typography>
        
        <Typography variant="body2" color="text.secondary" gutterBottom sx={{ mb: 2 }}>
          Detailed breakdown of coupon rates for Class B tranches, showing direct rates and effective rates after calculations
        </Typography>
        
        <TableContainer sx={{ 
          backgroundColor: 'background.paper', 
          borderRadius: theme.shape.borderRadius,
          boxShadow: theme.shadows[1]
        }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Tranche</TableCell>
                <TableCell align="center" sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Direct Coupon Rate (%)</TableCell>
                <TableCell align="center" sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Effective Coupon Rate (%)</TableCell>
                <TableCell align="center" sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Maturity Info</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {results.interest_rate_conversions
                .filter(rate => rate.Tranche.includes('Class B'))
                .map((rate, index) => (
                  <TableRow key={index}>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: theme.palette.secondary.main,
                            mr: 1 
                          }} 
                        />
                        {rate.Tranche}
                      </Box>
                    </TableCell>
                    <TableCell align="center">
                      <Chip 
                        size="small" 
                        label={formatValue(rate['Coupon Rate (%)'])}
                        sx={{ 
                          bgcolor: alpha(theme.palette.secondary.main, 0.1),
                          color: theme.palette.secondary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                    <TableCell align="center">
                      <Chip 
                        size="small" 
                        label={formatValue(rate['Effective Coupon Rate (%)'])}
                        sx={{ 
                          bgcolor: alpha(theme.palette.info.main, 0.1),
                          color: theme.palette.info.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                    <TableCell align="center">
                      <Typography variant="body2" color="text.secondary">
                        {`${rate['Maturity Days']} days`}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {rate['Maturity Date'] || 'Date not specified'}
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))
              }
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      
      {/* Interest Rate Analysis with detailed view */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3,
          border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
          borderRadius: 2
        }}
      >
        <Box sx={{ mb: 2 }}>
          <Typography variant="h6" gutterBottom fontWeight="medium">
            Interest Rate Analysis
          </Typography>
          
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Comprehensive breakdown showing all interest rate details and conversion calculations
          </Typography>
        </Box>
        
        <Grid container spacing={2} sx={{ mb: 3 }}>
          <Grid item xs={12} md={6}>
            <Paper 
              elevation={0} 
              sx={{ 
                p: 2, 
                bgcolor: alpha(theme.palette.primary.main, 0.03),
                border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`,
                borderRadius: 1
              }}
            >
              <Typography variant="subtitle2" color="primary.main" gutterBottom>
                Class A Interest Rates
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Class A tranches use simple annual interest rates based on the maturity period.
              </Typography>
              <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {classAData.map((item, idx) => (
                  <Chip 
                    key={idx}
                    label={`${item.name}: ${item.rate.toFixed(2)}%`}
                    size="small"
                    sx={{ 
                      bgcolor: alpha(theme.palette.primary.main, 0.1),
                      color: theme.palette.primary.main
                    }}
                  />
                ))}
              </Box>
            </Paper>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <Paper 
              elevation={0} 
              sx={{ 
                p: 2, 
                bgcolor: alpha(theme.palette.secondary.main, 0.03),
                border: `1px solid ${alpha(theme.palette.secondary.main, 0.1)}`,
                borderRadius: 1
              }}
            >
              <Typography variant="subtitle2" color="secondary.main" gutterBottom>
                Class B Coupon Rates
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Class B tranches have an effective coupon rate which is calculated based on multiple factors.
              </Typography>
              <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {classBData.map((item, idx) => (
                  <Chip 
                    key={idx}
                    label={`${item.name}: ${item.rate.toFixed(2)}%`}
                    size="small"
                    sx={{ 
                      bgcolor: alpha(theme.palette.secondary.main, 0.1),
                      color: theme.palette.secondary.main
                    }}
                  />
                ))}
              </Box>
            </Paper>
          </Grid>
        </Grid>
        
        <Divider sx={{ mb: 3 }} />
        
        <TableContainer sx={{ 
          maxHeight: 440,
          borderRadius: theme.shape.borderRadius,
          boxShadow: theme.shadows[1]
        }}>
          <Table stickyHeader size="small">
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Tranche</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Days</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Simple Annual Interest (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Compound Interest for Period (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Reinvest Simple Annual (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Reinvest O/N Compound (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Coupon Rate (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Effective Coupon Rate (%)</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {results.interest_rate_conversions.map((rate, index) => (
                <TableRow 
                  key={index}
                  sx={{ 
                    backgroundColor: rate.Tranche.includes('Class A') 
                      ? alpha(theme.palette.primary.main, 0.03)
                      : alpha(theme.palette.secondary.main, 0.03),
                    '&:hover': {
                      backgroundColor: rate.Tranche.includes('Class A') 
                        ? alpha(theme.palette.primary.main, 0.07)
                        : alpha(theme.palette.secondary.main, 0.07),
                    }
                  }}
                >
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box 
                        component="span" 
                        sx={{ 
                          display: 'inline-block', 
                          width: 10, 
                          height: 10, 
                          borderRadius: '50%', 
                          bgcolor: rate.Tranche.includes('Class A') 
                            ? theme.palette.primary.main 
                            : theme.palette.secondary.main,
                          mr: 1 
                        }} 
                      />
                      {rate.Tranche}
                    </Box>
                  </TableCell>
                  <TableCell>{rate['Maturity Days']}</TableCell>
                  <TableCell>{formatValue(rate['Simple Annual Interest (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Compound Interest for Period (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Reinvest Simple Annual (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Reinvest O/N Compound (%)'])}</TableCell>
                  <TableCell>
                    {rate.Tranche.includes('Class B') ? (
                      <Chip 
                        size="small" 
                        label={formatValue(rate['Coupon Rate (%)'])}
                        sx={{ 
                          bgcolor: alpha(theme.palette.secondary.main, 0.1),
                          color: theme.palette.secondary.main,
                          fontWeight: 500,
                          fontSize: '0.7rem'
                        }}
                      />
                    ) : (
                      formatValue(rate['Coupon Rate (%)'])
                    )}
                  </TableCell>
                  <TableCell>
                    {rate.Tranche.includes('Class B') ? (
                      <Chip 
                        size="small" 
                        label={formatValue(rate['Effective Coupon Rate (%)'])}
                        sx={{ 
                          bgcolor: alpha(theme.palette.info.main, 0.1),
                          color: theme.palette.info.main,
                          fontWeight: 500,
                          fontSize: '0.7rem'
                        }}
                      />
                    ) : (
                      formatValue(rate['Effective Coupon Rate (%)'])
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      
      {/* Only in development mode */}
      {/* Debug section removed as requested */}
    </Box>
  );
};

export default InterestRatesTable;

======================================================================

DOSYA: src\components\calculation\TrancheAForm.js
==================================================
// src/components/calculation/TrancheAForm.js
import React from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  TextField,
  IconButton,
  Tooltip,
  alpha,
  useTheme
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import { useData } from '../../contexts/DataContext';

const TrancheAForm = () => {
  const { tranchesA, setTranchesA } = useData();
  const theme = useTheme();

  const handleChange = (index, field, value) => {
    const newTranches = [...tranchesA];
    newTranches[index][field] = value;
    setTranchesA(newTranches);
  };

  const handleAddTranche = () => {
    const newTranche = {
      maturity_days: 0,
      base_rate: 0.0,
      spread: 0.0,
      reinvest_rate: 0.0,
      nominal: 0
    };
    
    setTranchesA([...tranchesA, newTranche]);
  };

  const handleDeleteTranche = (index) => {
    const newTranches = tranchesA.filter((_, i) => i !== index);
    setTranchesA(newTranches);
  };

  return (
    <Paper sx={{ 
      p: 3, 
      mb: 3,
      border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
      backgroundColor: alpha(theme.palette.primary.main, 0.03),
      borderRadius: 2
    }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <Typography variant="h6" color="primary.main" fontWeight="medium">
            Senior Tranches
          </Typography>
          <Tooltip title="Configure senior tranches of the receivables securitization. Senior tranches have higher payment priority and lower risk." sx={{ ml: 1 }}>
            <InfoOutlinedIcon fontSize="small" color="primary" />
          </Tooltip>
        </Box>
        <IconButton 
          color="primary" 
          onClick={handleAddTranche}
          disabled={tranchesA.length >= 10}
        >
          <AddIcon />
        </IconButton>
      </Box>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        Define the characteristics of each senior tranche including maturity, interest rates, and principal amounts.
      </Typography>
      
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Tranche</TableCell>
              <TableCell>Maturity Days</TableCell>
              <TableCell>Base Rate (%)</TableCell>
              <TableCell>Spread (bps)</TableCell>
              <TableCell>Reinvest Rate (%)</TableCell>
              <TableCell>Nominal ($)</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {tranchesA.map((tranche, index) => (
              <TableRow key={index}>
                <TableCell>{`Senior ${index + 1}`}</TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.maturity_days}
                    onChange={(e) => handleChange(index, 'maturity_days', parseInt(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.base_rate}
                    onChange={(e) => handleChange(index, 'base_rate', parseFloat(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 0.1 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.spread}
                    onChange={(e) => handleChange(index, 'spread', parseFloat(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 0.1 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.reinvest_rate}
                    onChange={(e) => handleChange(index, 'reinvest_rate', parseFloat(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 0.1 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.nominal}
                    onChange={(e) => handleChange(index, 'nominal', parseInt(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 1000000 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <IconButton 
                    color="error" 
                    onClick={() => handleDeleteTranche(index)}
                    disabled={tranchesA.length <= 1}
                  >
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
};

export default TrancheAForm;

======================================================================

DOSYA: src\components\calculation\TrancheBForm.js
==================================================
// src/components/calculation/TrancheBForm.js
import React from 'react';
import { 
  Box, 
  Typography, 
  TextField, 
  Paper, 
  Grid, 
  Tooltip,
  alpha,
  useTheme,
  InfoOutlined
} from '@mui/material';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import { useData } from '../../contexts/DataContext';

const TrancheBForm = () => {
  const { trancheB, setTrancheB } = useData();
  const theme = useTheme();

  const handleChange = (field, value) => {
    setTrancheB({
      ...trancheB,
      [field]: value,
    });
  };

  return (
    <Paper sx={{ 
      p: 3, 
      mb: 3,
      border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
      backgroundColor: alpha(theme.palette.secondary.main, 0.03),
      borderRadius: 2
    }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6" color="secondary.main" fontWeight="medium">
          Subordinated Tranche
        </Typography>
        <Tooltip title="Configure the subordinated (junior) tranche which absorbs first losses but offers higher yields" sx={{ ml: 1 }}>
          <InfoOutlinedIcon fontSize="small" color="secondary" />
        </Tooltip>
      </Box>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        Define the characteristics of the subordinated tranche that provides credit enhancement to senior tranches.
      </Typography>
      
      <Grid container spacing={3}>
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            label="Maturity Days"
            type="number"
            value={trancheB.maturity_days}
            onChange={(e) => handleChange('maturity_days', parseInt(e.target.value) || 0)}
            InputProps={{
              inputProps: { min: 0 }
            }}
            helperText="Number of days until maturity"
          />
        </Grid>
        
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            label="Base Rate (%)"
            type="number"
            value={trancheB.base_rate}
            onChange={(e) => handleChange('base_rate', parseFloat(e.target.value) || 0)}
            InputProps={{
              inputProps: { min: 0, step: 0.1 }
            }}
            helperText="Base interest rate for this tranche"
          />
        </Grid>
        
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            label="Spread (bps)"
            type="number"
            value={trancheB.spread}
            onChange={(e) => handleChange('spread', parseFloat(e.target.value) || 0)}
            InputProps={{
              inputProps: { min: 0, step: 0.1 }
            }}
            helperText="Additional spread in basis points"
          />
        </Grid>
        
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            label="Reinvest Rate (%)"
            type="number"
            value={trancheB.reinvest_rate}
            onChange={(e) => handleChange('reinvest_rate', parseFloat(e.target.value) || 0)}
            InputProps={{
              inputProps: { min: 0, step: 0.1 }
            }}
            helperText="Rate at which cash flows are reinvested"
          />
        </Grid>
        
        <Grid item xs={12}>
          <TextField
            fullWidth
            label="Nominal Amount ($)"
            type="number"
            value={trancheB.nominal}
            onChange={(e) => handleChange('nominal', parseInt(e.target.value) || 0)}
            InputProps={{
              inputProps: { min: 0, step: 100000 }
            }}
            helperText="Principal amount for this tranche"
          />
        </Grid>
      </Grid>
      
      <Box sx={{ 
        mt: 3, 
        p: 2, 
        borderRadius: 1, 
        backgroundColor: alpha(theme.palette.info.main, 0.1),
        border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
      }}>
        <Typography variant="subtitle2" color="info.main" gutterBottom>
          Subordinated Tranche Information
        </Typography>
        <Typography variant="body2" color="text.secondary">
          The subordinated tranche represents the first-loss position in the receivables securitization structure.
          It provides credit enhancement to the senior tranches by absorbing initial defaults,
          and typically offers higher returns to compensate for the increased risk.
        </Typography>
      </Box>
    </Paper>
  );
};

export default TrancheBForm;

======================================================================

DOSYA: src\components\optimization\OptimizationProgress.js
==================================================
// src/components/optimization/OptimizationProgress.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  LinearProgress, 
  Paper, 
  Divider,
  Chip,
  Button,
  alpha,
  useTheme
} from '@mui/material';
import RefreshIcon from '@mui/icons-material/Refresh';
import SpeedIcon from '@mui/icons-material/Speed';
import PendingIcon from '@mui/icons-material/Pending';
import SyncIcon from '@mui/icons-material/Sync';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

const OptimizationProgress = ({ isOptimizing, onComplete }) => {
  const theme = useTheme();
  const [progress, setProgress] = useState(0);
  const [phase, setPhase] = useState('Initializing');
  const [message, setMessage] = useState('Starting optimization...');
  const [pollingActive, setPollingActive] = useState(false);
  const [pollCount, setPollCount] = useState(0);
  const [stuckDetected, setStuckDetected] = useState(false);
  const [lastProgressUpdate, setLastProgressUpdate] = useState(Date.now());
  const [lastProgressValue, setLastProgressValue] = useState(0);
  const [errorOccurred, setErrorOccurred] = useState(false);
  
  // Start polling when optimization starts
  useEffect(() => {
    if (isOptimizing && !pollingActive) {
      console.log("Starting optimization progress polling");
      setPollingActive(true);
      setProgress(0);
      setPhase('Initializing');
      setMessage('Starting optimization...');
      setPollCount(0);
      setStuckDetected(false);
      setLastProgressUpdate(Date.now());
      setLastProgressValue(0);
      setErrorOccurred(false);
    } else if (!isOptimizing && pollingActive) {
      console.log("Stopping optimization progress polling");
      setPollingActive(false);
    }
  }, [isOptimizing, pollingActive]);
  
  // Handle refresh button click
  const handleRefresh = () => {
    console.log("Refreshing optimization progress");
    if (stuckDetected) {
      setStuckDetected(false);
      setPollCount(0);
      setLastProgressUpdate(Date.now());
    }
  };
  
  // Polling effect
  useEffect(() => {
    let intervalId;
    
    if (pollingActive) {
      // Poll every second
      intervalId = setInterval(async () => {
        try {
          console.log("Polling optimization progress...");
          const response = await axios.get(`${API_URL}/optimize/progress/`);
          const data = response.data;
          
          console.log("Progress data:", data);
          
          // Check for error flag from backend
          if (data.error) {
            console.error("Error in optimization progress:", data.message);
            setErrorOccurred(true);
            setMessage(data.message || "Error in optimization process");
            setPhase("Error");
            // Don't update progress to indicate the error visually
            return;
          }
          
          // Check if progress has changed or message has changed
          const hasProgressChanged = data.progress !== progress;
          const hasMessageChanged = data.message !== message;
          
          if (hasProgressChanged || hasMessageChanged) {
            setProgress(data.progress);
            setPhase(data.phase);
            setMessage(data.message);
            setLastProgressUpdate(Date.now());
            
            if (hasProgressChanged) {
              setLastProgressValue(data.progress);
            }
          } else {
            // If no progress update, increment counter
            setPollCount(prev => prev + 1);
          }
          
          // Check for stuck progress - if no change for 30 seconds
          const timeSinceUpdate = Date.now() - lastProgressUpdate;
          if (pollCount > 30 && timeSinceUpdate > 30000) {
            console.log("Progress appears to be stuck");
            setStuckDetected(true);
          }
          
          // If progress is 100%, notify parent component
          if (data.progress >= 100) {
            console.log("Optimization completed (progress 100%)");
            setPollingActive(false);
            if (onComplete) {
              onComplete();
            }
          }
        } catch (error) {
          console.error('Error fetching optimization progress:', error);
          setPollCount(prev => prev + 1);
          
          // If we've had many errors, consider it stuck
          if (pollCount > 15) {
            console.log("Multiple polling errors, considering progress stuck");
            setStuckDetected(true);
          }
        }
      }, 1000);
    }
    
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [pollingActive, onComplete, progress, message, pollCount, lastProgressUpdate, lastProgressValue]);
  
  // Auto-complete if we've been at 100% for a while
  useEffect(() => {
    if (progress >= 100 && pollingActive) {
      console.log("Progress is 100%, auto-completing after delay");
      const timeoutId = setTimeout(() => {
        setPollingActive(false);
        if (onComplete) {
          onComplete();
        }
      }, 2000);
      
      return () => clearTimeout(timeoutId);
    }
  }, [progress, pollingActive, onComplete]);
  
  if (!isOptimizing && progress === 0) {
    return null;
  }
  
  // Calculate progress color
  const getProgressColor = () => {
    if (errorOccurred) return theme.palette.error.main;
    if (stuckDetected) return theme.palette.warning.main;
    if (progress < 30) return theme.palette.info.main;
    if (progress < 70) return theme.palette.primary.main;
    return theme.palette.success.main;
  };
  
  // Progress icon
  const getProgressIcon = () => {
    if (errorOccurred) return <SyncIcon color="error" />;
    if (stuckDetected) return <SyncIcon color="warning" />;
    if (progress < 50) return <PendingIcon color="primary" />;
    return <SpeedIcon color="success" />;
  };
  
  return (
    <Paper 
      elevation={0} 
      sx={{ 
        p: 3, 
        mb: 3, 
        borderRadius: 2,
        border: errorOccurred 
          ? `1px solid ${alpha(theme.palette.error.main, 0.3)}`
          : stuckDetected 
            ? `1px solid ${alpha(theme.palette.warning.main, 0.3)}`
            : `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
        backgroundColor: errorOccurred
          ? alpha(theme.palette.error.main, 0.05)
          : stuckDetected
            ? alpha(theme.palette.warning.main, 0.05)
            : alpha(theme.palette.primary.main, 0.03)
      }}
    >
      <Box sx={{ mb: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            {getProgressIcon()}
            <Typography variant="h6" sx={{ ml: 1 }}>
              {errorOccurred 
                ? 'Optimization Error' 
                : stuckDetected 
                  ? 'Optimization Progress (Stuck)' 
                  : 'Optimization Progress'}
            </Typography>
          </Box>
          <Chip 
            label={phase} 
            color={errorOccurred ? "error" : stuckDetected ? "warning" : "primary"} 
            variant="outlined"
            size="small"
          />
        </Box>
        <LinearProgress 
          variant="determinate" 
          value={progress} 
          sx={{ 
            height: 10, 
            borderRadius: 5,
            '& .MuiLinearProgress-bar': {
              borderRadius: 5,
              backgroundColor: getProgressColor()
            }
          }} 
        />
        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
          <Typography variant="body2" color="text.secondary">
            {message}
          </Typography>
          <Typography variant="body2" fontWeight="medium">
            {progress}%
          </Typography>
        </Box>
      </Box>
      
      <Divider sx={{ my: 1 }} />
      
      <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="body2" color="text.secondary">
          {errorOccurred 
            ? "An error occurred during optimization. Please try again with different parameters."
            : stuckDetected 
              ? "Optimization might be stuck. The server is still processing, but progress updates have stopped." 
              : progress === 100 
                ? "Optimization completed successfully." 
                : "Please wait while the optimization is in progress..."}
        </Typography>
        
        {(stuckDetected || errorOccurred) && (
          <Button 
            variant="outlined" 
            color={errorOccurred ? "error" : "warning"} 
            size="small" 
            startIcon={<RefreshIcon />}
            onClick={handleRefresh}
            sx={{ ml: 2 }}
          >
            Refresh
          </Button>
        )}
      </Box>
    </Paper>
  );
};

export default OptimizationProgress;

======================================================================

DOSYA: src\components\optimization\OptimizationResults.js
==================================================
// src/components/optimization/OptimizationResults.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Button,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Chip,
  useTheme,
  Snackbar,
  Alert,
  Dialog, 
  DialogActions, 
  DialogContent, 
  DialogContentText, 
  DialogTitle, 
  TextField,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  alpha
} from '@mui/material';
import { 
  BarChart, Bar, 
  PieChart, Pie, Cell, 
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  Scatter, ScatterChart, ZAxis
} from 'recharts';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ReplayIcon from '@mui/icons-material/Replay';
import SaveIcon from '@mui/icons-material/Save';
import { useData } from '../../contexts/DataContext';
import { useNavigate } from 'react-router-dom';
import { calculateResults } from '../../services/apiService';

// Convert numbers to Roman numerals
const toRoman = (num) => {
  if (isNaN(num) || num < 1 || num > 3999) {
    return num.toString(); // Return the number as string if not a valid input
  }
  
  const romanNumerals = {
    M: 1000, CM: 900, D: 500, CD: 400,
    C: 100, XC: 90, L: 50, XL: 40,
    X: 10, IX: 9, V: 5, IV: 4, I: 1
  };
  
  let result = '';
  
  for (let key in romanNumerals) {
    while (num >= romanNumerals[key]) {
      result += key;
      num -= romanNumerals[key];
    }
  }
  
  return result;
};

// Strategy name mapping
const strategyNames = {
  equal: "Equal Distribution",
  increasing: "Increasing by Maturity",
  decreasing: "Decreasing by Maturity",
  middle_weighted: "Middle-Weighted",
  classic: "Standard Optimization",
  genetic: "Evolutionary Algorithm"
};

const OptimizationResults = ({ results }) => {
  const theme = useTheme();
  const navigate = useNavigate();
  const { 
    setTranchesA, 
    setTrancheB, 
    calculationResults, 
    setPreviousCalculationResults, 
    originalTranchesA, 
    originalTrancheB,
    setIsLoading,
    setError,
    createCalculationRequest,
    setCalculationResults,
    saveResult,
    setMultipleComparisonResults,
    setShouldAutoCalculate
  } = useData();
  
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  
  // Add these new states for save functionality
  const [saveDialogOpen, setSaveDialogOpen] = useState(false);
  const [resultName, setResultName] = useState('');
  const [selectedMethodType, setSelectedMethodType] = useState('');
  
  // Define color palette for dark blue theme
  const darkBlueColors = {
    // Ana renkler
    primary: '#64B5F6', // AÃ§Ä±k mavi 
    primaryLight: '#90CAF9',
    primaryDark: '#42A5F5',
    secondary: '#FF9800', // Turuncu - mavi ile kontrast
    secondaryLight: '#FFB74D',
    secondaryDark: '#F57C00',
    
    // Ä°ÅŸlevsel renkler
    success: '#4CAF50',
    error: '#FF5252',
    info: '#29B6F6',
    warning: '#FFC107',
    
    // Arka plan ve metin
    paper: '#1A2035', // Koyu mavi-gri kaÄŸÄ±t arka planÄ±
    background: '#111827', // Ã‡ok koyu mavi arka plan
    textPrimary: '#FFFFFF', // Beyaz metin
    textSecondary: '#B0BEC5', // Soluk mavi-gri ikincil metin
    
    // Panel ve kart arka planlarÄ±
    cardBackground: '#1E293B', // Koyu mavi-gri kart arka planÄ±
    inputBackground: '#283147', // Biraz daha aÃ§Ä±k giriÅŸ alanÄ± arka planÄ±
    
    // SÄ±nÄ±r ve ayÄ±rÄ±cÄ±
    divider: '#2A3958', // Koyu mavi-gri ayÄ±rÄ±cÄ±
    border: '#3A486B',  // Daha aÃ§Ä±k sÄ±nÄ±r rengi
    
    // Grafik renk paleti
    chartColors: [
      '#64B5F6', // AÃ§Ä±k mavi
      '#FF9800', // Turuncu
      '#4CAF50', // YeÅŸil
      '#E91E63', // Pembe
      '#9C27B0', // Mor
      '#00BCD4', // CamgÃ¶beÄŸi
      '#FFEB3B', // SarÄ±
      '#FF5722', // Derin turuncu
      '#8BC34A', // AÃ§Ä±k yeÅŸil
      '#3F51B5'  // Indigo
    ]
  };
  
  // Update useEffect to set initial method type based on results
  useEffect(() => {
    if (results && results.best_strategy) {
      setSelectedMethodType(results.best_strategy === 'genetic' ? 'genetic' : 'standard');
    }
  }, [results]);
  
  // Format currency values
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'TRY' }).format(value);
  };
  
  // Format percentage values
  const formatPercent = (value) => {
    return `${value.toFixed(2)}%`;
  };
  
  // Helper function to get strategy display name
  const getStrategyDisplayName = (strategy) => {
    return strategyNames[strategy] || strategy.charAt(0).toUpperCase() + strategy.slice(1);
  };
  
  // Add these new functions for save functionality
  const handleSaveClick = () => {
    setSaveDialogOpen(true);
    // Default name based on the optimization method
    const defaultName = `${getStrategyDisplayName(results.best_strategy)} Optimization`;
    setResultName(defaultName);
    
    // Set default method type based on results
    setSelectedMethodType(results.best_strategy === 'genetic' ? 'genetic' : 'standard');
  };
  
  const handleSaveDialogClose = () => {
    setSaveDialogOpen(false);
  };
  
  const handleSaveConfirm = () => {
    // Create a result object with necessary properties
    const resultToSave = {
      ...results,
      is_optimized: true,
      optimization_method: selectedMethodType,
      // Add a label so we can identify this in the comparison
      label: resultName,
      method_type: selectedMethodType
    };
    
    const saved = saveResult(resultToSave, resultName, selectedMethodType);
    
    if (saved) {
      setSnackbarMessage(`Result saved as "${resultName}" (${selectedMethodType})`);
      setSnackbarSeverity('success');
      setSnackbarOpen(true);
      setSaveDialogOpen(false);
    } else {
      setSnackbarMessage('Failed to save result');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };
  
  // Prepare data for pie chart
  const pieData = [
    ...results.class_a_nominals.map((nominal, index) => ({
      name: `Class A${toRoman(index + 1)}`,
      value: nominal,
      color: darkBlueColors.chartColors[index % darkBlueColors.chartColors.length]
    })),
    { 
      name: `Class B${toRoman(1)}`, 
      value: results.class_b_nominal,
      color: darkBlueColors.secondary
    }
  ];
  
  // Prepare data for maturity distribution chart
  const maturityData = [
    ...results.class_a_maturities.map((maturity, index) => ({
      name: `Class A${toRoman(index + 1)}`,
      maturity,
      nominal: results.class_a_nominals[index],
      type: 'Class A'
    })),
    {
      name: `Class B${toRoman(1)}`,
      maturity: results.class_b_maturity,
      nominal: results.class_b_nominal,
      type: 'Class B'
    },
    {
      name: 'Last Cash Flow',
      maturity: results.last_cash_flow_day,
      nominal: Math.max(...results.class_a_nominals, results.class_b_nominal) / 20,
      type: 'Marker'
    }
  ];
  
  // Strategy comparison data
  const strategyResultsData = Object.entries(results.results_by_strategy).map(([strategy, data]) => ({
    name: getStrategyDisplayName(strategy),
    totalPrincipal: data.total_principal,
    directClassBCouponRate: data.direct_coupon_rate || 0,
    classBCouponRate: data.class_b_coupon_rate,
    minBufferActual: data.min_buffer_actual,
    isBest: strategy === results.best_strategy
  }));
  
  // Apply the best strategy configuration to the forms and automatically calculate
  const applyConfiguration = async () => {
    try {
      // Store the current calculation results for comparison before we change the configuration
      if (calculationResults) {
        setPreviousCalculationResults(calculationResults);
      }
      
      // Log all values for debugging
      console.log("Optimization results:", results);
      
      const a_tranches = results.class_a_maturities.map((maturity, index) => ({
        maturity_days: maturity,
        base_rate: results.class_a_rates[index],
        spread: 0.0, // Default value
        reinvest_rate: results.class_a_reinvest[index],
        nominal: results.class_a_nominals[index]
      }));
      
      const b_tranche = {
        maturity_days: results.class_b_maturity,
        base_rate: results.class_b_rate,
        spread: 0.0, // Default value
        reinvest_rate: results.class_b_reinvest,
        nominal: results.class_b_nominal  // Ensure Class B nominal value is transferred
      };
      
      // Enhanced logging with coupon rates and more debugging details
      console.log("Applying configuration with parameters:", {
        tranchesA: a_tranches,
        trancheB: b_tranche,
        class_b_nominal: results.class_b_nominal,
        class_b_coupon_rate: results.class_b_coupon_rate,
        direct_class_b_coupon_rate: results.direct_class_b_coupon_rate || 0,
        class_b_maturity: results.class_b_maturity
      });
      
      // Verify that the nominal values match the expected totals
      const totalClassANominal = a_tranches.reduce((sum, tranche) => sum + tranche.nominal, 0);
      const totalNominal = totalClassANominal + b_tranche.nominal;
      
      console.log("Nominal value verification:", {
        totalClassANominal,
        classBNominal: b_tranche.nominal,
        totalNominal,
        expectedTotal: results.total_principal
      });
      
      // Update form state
      setTranchesA(a_tranches);
      setTrancheB(b_tranche);
      
      // Show processing message
      setSnackbarMessage('Applying configuration and calculating results...');
      setSnackbarSeverity('info');
      setSnackbarOpen(true);
      
      // Create the calculation request directly
      const request = createCalculationRequest();
      
      // Add optimization metadata
      request.is_optimized = true;
      request.optimization_method = results.best_strategy;
      
      // Perform calculation directly instead of navigating
      setIsLoading(true);
      try {
        const calculationResult = await calculateResults(request);
        
        // Add metadata for tracking and display
        calculationResult.label = `${getStrategyDisplayName(results.best_strategy)} Optimization`;
        calculationResult.method_type = results.best_strategy === 'genetic' ? 'genetic' : 'standard';
        calculationResult.timestamp = new Date().toISOString();
        
        // Update results state
        setCalculationResults(calculationResult);
        
        // Show success message
        setSnackbarMessage('Configuration applied and results calculated successfully!');
        setSnackbarSeverity('success');
        setSnackbarOpen(true);
        
        // Add to comparison history
        setMultipleComparisonResults(prev => {
          const updatedResults = prev ? [...prev] : [];
          
          // Check if we already have a result of the same type
          const existingIndex = updatedResults.findIndex(r => 
            r.method_type === calculationResult.method_type
          );
          
          // If we have a result of this type, replace it
          if (existingIndex >= 0) {
            updatedResults[existingIndex] = { ...calculationResult };
          } else {
            // Otherwise add it to the array
            if (updatedResults.length >= 5) {
              updatedResults.shift(); // Remove the oldest result
            }
            updatedResults.push({ ...calculationResult });
          }
          
          return updatedResults;
        });
        
        // Navigate to results page to show the new calculation
        navigate('/calculation');
        
      } catch (err) {
        console.error('Error calculating results:', err);
        setSnackbarMessage('Error calculating results. Please try again.');
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
      } finally {
        setIsLoading(false);
      }
      
    } catch (error) {
      console.error('Error applying configuration:', error);
      
      // Show error message
      setSnackbarMessage('Error applying configuration. Please try again.');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };
  
  // Reset to original values
  const resetToOriginal = () => {
    try {
      if (originalTranchesA && originalTrancheB) {
        setTranchesA(JSON.parse(JSON.stringify(originalTranchesA)));
        setTrancheB(JSON.parse(JSON.stringify(originalTrancheB)));
        
        // Show success message
        setSnackbarMessage('Reset to original values successfully.');
        setSnackbarSeverity('success');
        setSnackbarOpen(true);
        
        // Navigate to calculation page
        navigate('/calculation');
      } else {
        // Show error message
        setSnackbarMessage('Original configuration not available.');
        setSnackbarSeverity('warning');
        setSnackbarOpen(true);
      }
    } catch (error) {
      console.error('Error resetting to original:', error);
      
      // Show error message
      setSnackbarMessage('Error resetting to original values.');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };
  
  // Handle snackbar close
  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setSnackbarOpen(false);
  };

  return (
    <Box>
      {/* Add Save Button to the top of the optimization results */}
      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
        <Button
          variant="contained"
          color="success"
          startIcon={<SaveIcon />}
          onClick={handleSaveClick}
          sx={{ ml: 2 }}
        >
          Save Optimization
        </Button>
      </Box>
      
      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleSnackbarClose} 
          severity={snackbarSeverity} 
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
      
      {/* Summary Banner */}
      <Paper 
        elevation={3}
        sx={{ 
          p: 3, 
          mb: 3, 
          borderLeft: `4px solid ${darkBlueColors.secondary}`,
          backgroundColor: alpha(darkBlueColors.success, 0.1),
          border: `1px solid ${alpha(darkBlueColors.success, 0.2)}`,
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
          <Typography 
            variant="h5" 
            sx={{ 
              color: darkBlueColors.secondary,
              textShadow: '0 1px 2px rgba(0,0,0,0.2)'
            }}
          >
            Optimal Structure Found
          </Typography>
          <Chip 
            icon={<CheckCircleIcon />} 
            label={getStrategyDisplayName(results.best_strategy)} 
            color="secondary" 
            sx={{
              backgroundColor: alpha(darkBlueColors.secondary, 0.9),
              color: '#fff',
              '& .MuiChip-icon': {
                color: '#fff'
              }
            }}
          />
        </Box>
        
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 4, mb: 3 }}>
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Class A Tranches
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.textPrimary }}>
              {results.class_a_maturities.length}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Direct Coupon Rate
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.secondary }}>
              {formatPercent(results.direct_class_b_coupon_rate || 0)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Effective Coupon Rate
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.secondary }}>
              {formatPercent(results.class_b_coupon_rate)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Minimum Buffer
            </Typography>
            <Typography variant="h6" sx={{ color: results.min_buffer_actual >= 5.0 ? darkBlueColors.success : darkBlueColors.error }}>
              {formatPercent(results.min_buffer_actual)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Class B Maturity
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.textPrimary }}>
              {results.class_b_maturity} days
            </Typography>
          </Box>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button 
            variant="contained" 
            sx={{ 
              bgcolor: darkBlueColors.secondary,
              '&:hover': {
                bgcolor: alpha(darkBlueColors.secondary, 0.8)
              }
            }}
            size="large"
            onClick={applyConfiguration}
          >
            Apply This Configuration
          </Button>
          
          <Button 
            variant="outlined" 
            sx={{ 
              color: darkBlueColors.primary,
              borderColor: darkBlueColors.primary,
              '&:hover': {
                borderColor: darkBlueColors.primaryLight,
                bgcolor: alpha(darkBlueColors.primary, 0.1)
              }
            }}
            size="large"
            startIcon={<ReplayIcon />}
            onClick={resetToOriginal}
          >
            Reset to Original Values
          </Button>
        </Box>
      </Paper>
      
      {/* Class B Maturity Calculation */}
      <Paper 
        elevation={3} 
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Class B Maturity Calculation
        </Typography>
        
        <Box sx={{ 
          display: 'flex', 
          flexWrap: 'wrap', 
          alignItems: 'center', 
          justifyContent: 'center',
          gap: 2, 
          my: 3 
        }}>
          <Paper sx={{ 
            p: 2, 
            bgcolor: darkBlueColors.inputBackground, 
            textAlign: 'center', 
            minWidth: 180,
            borderRadius: 1,
            border: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
          }}>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Last Cash Flow
            </Typography>
            <Typography variant="h5" sx={{ color: darkBlueColors.textPrimary }}>
              {results.last_cash_flow_day} days
            </Typography>
          </Paper>
          
          <Typography variant="h4" sx={{ color: darkBlueColors.textSecondary }}>+</Typography>
          
          <Paper sx={{ 
            p: 2, 
            bgcolor: darkBlueColors.inputBackground, 
            textAlign: 'center', 
            minWidth: 180,
            borderRadius: 1,
            border: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
          }}>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Additional Days
            </Typography>
            <Typography variant="h5" sx={{ color: darkBlueColors.textPrimary }}>
              {results.additional_days} days
            </Typography>
          </Paper>
          
          <Typography variant="h4" sx={{ color: darkBlueColors.textSecondary }}>=</Typography>
          
          <Paper sx={{ 
            p: 2, 
            bgcolor: darkBlueColors.secondary,
            color: '#fff',
            textAlign: 'center', 
            minWidth: 180,
            borderRadius: 1,
            boxShadow: `0 2px 10px ${alpha(darkBlueColors.secondary, 0.3)}`
          }}>
            <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.9)' }}>
              Class B Maturity
            </Typography>
            <Typography variant="h5" sx={{ color: '#fff' }}>
              {results.class_b_maturity} days
            </Typography>
          </Paper>
        </Box>
        
        <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, fontStyle: "italic" }}>
          Note: Class B maturity is calculated as Last Cash Flow Day + Additional Days.
          Maximum maturity is capped at 365 days.
        </Typography>
      </Paper>
      
      {/* Strategy Comparison */}
      <Paper 
        elevation={3} 
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Strategy Comparison
        </Typography>
        
        <TableContainer sx={{ mb: 3 }}>
          <Table>
            <TableHead>
              <TableRow sx={{ 
                '& th': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                  fontWeight: 'bold'
                } 
              }}>
                <TableCell>Strategy</TableCell>
                <TableCell align="right">Total Principal</TableCell>
                <TableCell align="right">Direct Coupon Rate</TableCell>
                <TableCell align="right">Effective Coupon Rate</TableCell>
                <TableCell align="right">Min Buffer</TableCell>
                <TableCell align="right">Class A Tranches</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {strategyResultsData.map((row, index) => (
                <TableRow 
                  key={index}
                  sx={{ 
                    bgcolor: row.isBest ? alpha(darkBlueColors.success, 0.1) : 'transparent',
                    '&:hover': { bgcolor: alpha(darkBlueColors.primary, 0.05) },
                    '& td': { 
                      color: darkBlueColors.textPrimary,
                      borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                    },
                    fontWeight: row.isBest ? 'bold' : 'normal'
                  }}
                >
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      {row.isBest && <CheckCircleIcon sx={{ color: darkBlueColors.secondary }} fontSize="small" />}
                      {row.name}
                    </Box>
                  </TableCell>
                  <TableCell align="right">{formatCurrency(row.totalPrincipal)}</TableCell>
                  <TableCell align="right">{formatPercent(row.directClassBCouponRate)}</TableCell>
                  <TableCell align="right">{formatPercent(row.classBCouponRate)}</TableCell>
                  <TableCell align="right">{formatPercent(row.minBufferActual)}</TableCell>
                  <TableCell align="right">
                    {results.results_by_strategy[Object.keys(results.results_by_strategy).find(key => (getStrategyDisplayName(key)) === row.name)]?.num_a_tranches || '-'}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        
        {/* Strategy comparison charts */}
        <Box sx={{ height: 400, mb: 3 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={strategyResultsData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha(darkBlueColors.divider, 0.4)} />
              <XAxis 
                dataKey="name" 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <YAxis 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <Tooltip 
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                labelStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Bar 
                dataKey="totalPrincipal" 
                name="Total Principal" 
                fill={darkBlueColors.chartColors[0]} 
              />
            </BarChart>
          </ResponsiveContainer>
        </Box>
        
        <Box sx={{ height: 400 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={strategyResultsData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha(darkBlueColors.divider, 0.4)} />
              <XAxis 
                dataKey="name" 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <YAxis 
                unit="%" 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <Tooltip 
                formatter={(value) => `${value.toFixed(2)}%`}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                labelStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Bar 
                dataKey="directClassBCouponRate" 
                name="Direct Coupon Rate" 
                fill={darkBlueColors.chartColors[1]} 
              />
              <Bar 
                dataKey="classBCouponRate" 
                name="Effective Coupon Rate" 
                fill={darkBlueColors.chartColors[2]} 
              />
              <Bar 
                dataKey="minBufferActual" 
                name="Min Buffer" 
                fill={darkBlueColors.chartColors[3]} 
              />
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </Paper>
      
      {/* Tranche Details */}
      <Paper 
        elevation={3}
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Tranche Details
        </Typography>
        
        <Typography 
          variant="subtitle1" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.primary, 
            mt: 3,
            fontWeight: 500
          }}
        >
          Class A Tranches
        </Typography>
        
        <TableContainer sx={{ mb: 3 }}>
          <Table>
            <TableHead>
              <TableRow sx={{ 
                '& th': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                  fontWeight: 'bold'
                } 
              }}>
                <TableCell>Tranche</TableCell>
                <TableCell align="right">Maturity (days)</TableCell>
                <TableCell align="right">Base Rate (%)</TableCell>
                <TableCell align="right">Reinvest Rate (%)</TableCell>
                <TableCell align="right">Nominal</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {results.class_a_maturities.map((maturity, index) => (
                <TableRow key={index} sx={{ 
                  '& td': { 
                    color: darkBlueColors.textPrimary,
                    borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                  },
                  '&:hover': { 
                    bgcolor: alpha(darkBlueColors.primary, 0.05) 
                  }
                }}>
                  <TableCell>Class A{toRoman(index + 1)}</TableCell>
                  <TableCell align="right">{maturity}</TableCell>
                  <TableCell align="right">{results.class_a_rates[index].toFixed(2)}</TableCell>
                  <TableCell align="right">{results.class_a_reinvest[index].toFixed(2)}</TableCell>
                  <TableCell align="right">{formatCurrency(results.class_a_nominals[index])}</TableCell>
                </TableRow>
              ))}
              <TableRow sx={{ 
                bgcolor: alpha(darkBlueColors.primary, 0.1),
                '& td': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                }
              }}>
                <TableCell sx={{ fontWeight: 'bold' }}>Total</TableCell>
                <TableCell></TableCell>
                <TableCell></TableCell>
                <TableCell></TableCell>
                <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                  {formatCurrency(results.class_a_nominals.reduce((sum, nominal) => sum + nominal, 0))}
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
        
        <Typography 
          variant="subtitle1" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.secondary, 
            mt: 3,
            fontWeight: 500 
          }}
        >
          Class B Tranche
        </Typography>
        
        <TableContainer>
          <Table>
            <TableHead>
              <TableRow sx={{ 
                '& th': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                  fontWeight: 'bold'
                } 
              }}>
                <TableCell>Tranche</TableCell>
                <TableCell align="right">Maturity (days)</TableCell>
                <TableCell align="right">Base Rate (%)</TableCell>
                <TableCell align="right">Reinvest Rate (%)</TableCell>
                <TableCell align="right">Nominal</TableCell>
                <TableCell align="right">Direct Coupon Rate (%)</TableCell>
                <TableCell align="right">Effective Coupon Rate (%)</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow sx={{ 
                '& td': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                },
                '&:hover': { 
                  bgcolor: alpha(darkBlueColors.secondary, 0.05) 
                }
              }}>
                <TableCell>Class B{toRoman(1)}</TableCell>
                <TableCell align="right">{results.class_b_maturity}</TableCell>
                <TableCell align="right">{results.class_b_rate.toFixed(2)}</TableCell>
                <TableCell align="right">{results.class_b_reinvest.toFixed(2)}</TableCell>
                <TableCell align="right">{formatCurrency(results.class_b_nominal)}</TableCell>
                <TableCell align="right" sx={{ fontWeight: 'bold', color: darkBlueColors.secondary }}>
                  {formatPercent(results.direct_class_b_coupon_rate || 0)}
                </TableCell>
                <TableCell align="right" sx={{ fontWeight: 'bold', color: darkBlueColors.secondary }}>
                  {formatPercent(results.class_b_coupon_rate)}
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      
      {/* Visualizations */}
      <Paper 
        elevation={3}
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Visualizations
        </Typography>
        
        <Typography variant="subtitle1" gutterBottom sx={{ mt: 3, color: darkBlueColors.textPrimary }}>
          Nominal Amount Distribution
        </Typography>
        
        <Box sx={{ height: 400, mb: 4 }}>
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={pieData}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius={120}
                innerRadius={60}
                label={({ name, percent }) => `${name} (${(percent * 100).toFixed(1)}%)`}
              >
                {pieData.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={entry.name.includes('Class A') 
                      ? darkBlueColors.chartColors[index % darkBlueColors.chartColors.length]
                      : darkBlueColors.secondary
                    } 
                  />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                labelStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
            </PieChart>
          </ResponsiveContainer>
        </Box>
        
        <Typography variant="subtitle1" gutterBottom sx={{ mt: 3, color: darkBlueColors.textPrimary }}>
          Maturity Distribution
        </Typography>
        
        <Box sx={{ height: 400 }}>
          <ResponsiveContainer width="100%" height="100%">
            <ScatterChart
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha(darkBlueColors.divider, 0.4)} />
              <XAxis 
                type="number" 
                dataKey="maturity" 
                name="Maturity" 
                unit=" days" 
                domain={[0, 'dataMax + 30']}
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <YAxis 
                type="number" 
                dataKey="nominal" 
                name="Nominal" 
                tickFormatter={(value) => `${(value / 1000000).toFixed(0)}M`}
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <ZAxis range={[100, 600]} />
              <Tooltip 
                formatter={(value, name, props) => {
                  if (name === 'Nominal') return formatCurrency(value);
                  return `${value} days`;
                }}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                content={({ active, payload }) => {
                  if (active && payload && payload.length) {
                    const data = payload[0].payload;
                    return (
                      <Box sx={{ 
                        bgcolor: darkBlueColors.paper, 
                        p: 1, 
                        border: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                        borderRadius: 1,
                        boxShadow: `0 2px 8px ${alpha('#000', 0.2)}`
                      }}>
                        <Typography variant="body2" fontWeight="bold" sx={{ color: darkBlueColors.textPrimary }}>
                          {data.name}
                        </Typography>
                        <Typography variant="body2" sx={{ color: darkBlueColors.textPrimary }}>
                          Maturity: {data.maturity} days
                        </Typography>
                        {data.type !== 'Marker' && (
                          <Typography variant="body2" sx={{ color: darkBlueColors.textPrimary }}>
                            Nominal: {formatCurrency(data.nominal)}
                          </Typography>
                        )}
                      </Box>
                    );
                  }
                  return null;
                }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Scatter 
                name="Class A" 
                data={maturityData.filter(d => d.type === 'Class A')}
                fill={darkBlueColors.primary}
              />
              <Scatter 
                name="Class B" 
                data={maturityData.filter(d => d.type === 'Class B')}
                fill={darkBlueColors.secondary}
              />
              <Scatter 
                name="Last Cash Flow" 
                data={maturityData.filter(d => d.type === 'Marker')}
                fill={darkBlueColors.error}
                shape="star"
              />
            </ScatterChart>
          </ResponsiveContainer>
        </Box>
      </Paper>
      
      {/* Save Dialog with Method Type Selection */}
      <Dialog 
        open={saveDialogOpen} 
        onClose={handleSaveDialogClose}
        PaperProps={{
          style: {
            backgroundColor: darkBlueColors.paper,
            border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`,
            boxShadow: `0 4px 20px ${alpha('#000', 0.5)}`
          }
        }}
      >
        <DialogTitle sx={{ color: darkBlueColors.textPrimary, borderBottom: `1px solid ${alpha(darkBlueColors.divider, 0.7)}` }}>
          Save Optimization Result
        </DialogTitle>
        <DialogContent>
          <DialogContentText sx={{ color: darkBlueColors.textSecondary, my: 2 }}>
            Enter a name for this result and confirm its type for comparison.
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            id="name"
            label="Result Name"
            type="text"
            fullWidth
            variant="outlined"
            value={resultName}
            onChange={(e) => setResultName(e.target.value)}
            sx={{
              mb: 2,
              '& .MuiOutlinedInput-root': {
                backgroundColor: darkBlueColors.inputBackground,
                color: darkBlueColors.textPrimary,
                '& fieldset': {
                  borderColor: alpha(darkBlueColors.border, 0.5),
                },
                '&:hover fieldset': {
                  borderColor: darkBlueColors.primary,
                },
                '&.Mui-focused fieldset': {
                  borderColor: darkBlueColors.primary,
                },
              },
              '& .MuiInputBase-input': {
                color: darkBlueColors.textPrimary,
              },
              '& .MuiInputLabel-root': {
                color: darkBlueColors.textSecondary,
              },
              '& .MuiInputLabel-root.Mui-focused': {
                color: darkBlueColors.primary,
              },
            }}
          />
          <FormControl fullWidth sx={{ mt: 2 }}>
            <FormLabel id="method-type-label" sx={{ color: darkBlueColors.textPrimary }}>
              Result Type
            </FormLabel>
            <RadioGroup
              row
              value={selectedMethodType}
              onChange={(e) => setSelectedMethodType(e.target.value)}
            >
              <FormControlLabel 
                value="standard" 
                control={
                  <Radio 
                    sx={{
                      color: alpha(darkBlueColors.textSecondary, 0.7),
                      '&.Mui-checked': {
                        color: darkBlueColors.primary,
                      },
                    }}
                  />
                } 
                label="Standard Optimization" 
                sx={{ color: darkBlueColors.textPrimary }}
              />
              <FormControlLabel 
                value="genetic" 
                control={
                  <Radio 
                    sx={{
                      color: alpha(darkBlueColors.textSecondary, 0.7),
                      '&.Mui-checked': {
                        color: darkBlueColors.secondary,
                      },
                    }}
                  />
                } 
                label="Genetic Optimization"
                sx={{ color: darkBlueColors.textPrimary }}
              />
            </RadioGroup>
          </FormControl>
        </DialogContent>
        <DialogActions sx={{ borderTop: `1px solid ${alpha(darkBlueColors.divider, 0.7)}`, p: 2 }}>
          <Button 
            onClick={handleSaveDialogClose}
            sx={{ 
              color: darkBlueColors.textSecondary,
              '&:hover': {
                backgroundColor: alpha(darkBlueColors.divider, 0.2),
              }
            }}
          >
            Cancel
          </Button>
          <Button 
            onClick={handleSaveConfirm} 
            disabled={!resultName.trim()}
            sx={{ 
              color: darkBlueColors.primary,
              '&:hover': {
                backgroundColor: alpha(darkBlueColors.primary, 0.1),
              },
              '&.Mui-disabled': {
                color: alpha(darkBlueColors.textSecondary, 0.5),
              }
            }}
          >
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default OptimizationResults;

======================================================================

DOSYA: src\components\optimization\OptimizationSettingsForm.js
==================================================
// src/components/optimization/OptimizationSettingsForm.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Slider, 
  TextField, 
  InputAdornment,
  FormControl,
  FormLabel,
  RadioGroup,
  Radio,
  FormControlLabel,
  ToggleButton,
  ToggleButtonGroup,
  Tooltip,
  IconButton,
  alpha,
  useTheme,
  Divider,
  Grid,
  Card,
  CardContent,
  Switch,
  FormGroup,
  Checkbox
} from '@mui/material';
import InfoIcon from '@mui/icons-material/Info';
import TuneIcon from '@mui/icons-material/Tune';
import AccountTreeIcon from '@mui/icons-material/AccountTree';
import BalanceIcon from '@mui/icons-material/Balance';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import TrendingDownIcon from '@mui/icons-material/TrendingDown';
import EqualizerIcon from '@mui/icons-material/Equalizer';
import SpeedIcon from '@mui/icons-material/Speed';
import GridOnIcon from '@mui/icons-material/GridOn';

const OptimizationSettingsForm = ({ values, onChange }) => {
  const theme = useTheme();
  const [optimizationMethod, setOptimizationMethod] = useState(values.optimization_method || 'classic');
  const [selectedStrategies, setSelectedStrategies] = useState(values.selected_strategies || ['equal', 'increasing', 'decreasing', 'middle_weighted']);

  // Koyu mavi tema iÃ§in renkler
  const darkBlueColors = {
    // Ana renkler - koyu mavi tema iÃ§in daha parlak ve canlÄ±
    primary: '#64B5F6', // Daha aÃ§Ä±k mavi
    primaryLight: '#90CAF9',
    primaryDark: '#42A5F5',
    secondary: '#FF9800', // Turuncu - mavi ile kontrast
    secondaryLight: '#FFB74D',
    secondaryDark: '#F57C00',
    
    // Ä°ÅŸlevsel renkler - daha canlÄ±
    success: '#4CAF50',
    error: '#FF5252',
    info: '#29B6F6',
    warning: '#FFC107',
    
    // Arka plan ve metin renkleri
    paper: '#1A2035', // Daha koyu mavi-gri kaÄŸÄ±t rengi
    background: '#111827', // Ã‡ok koyu mavi arka plan
    textPrimary: '#FFFFFF', // Beyaz metin
    textSecondary: '#B0BEC5', // Soluk mavi-gri ikincil metin
    
    // Panel ve kart arka planlarÄ±
    cardBackground: '#1E293B', // Koyu mavi-gri kart arka planÄ±
    inputBackground: '#283147', // Biraz daha aÃ§Ä±k giriÅŸ alanÄ± arka planÄ±
    
    // SÄ±nÄ±r ve ayÄ±rÄ±cÄ±
    divider: '#2A3958', // Koyu mavi-gri ayÄ±rÄ±cÄ±
    border: '#3A486B'  // Daha aÃ§Ä±k sÄ±nÄ±r rengi
  };

  useEffect(() => {
    // Initialize selected strategies from props if available
    if (values.selected_strategies && values.selected_strategies.length > 0) {
      setSelectedStrategies(values.selected_strategies);
    }
  }, [values.selected_strategies]);

  const handleOptimizationMethodChange = (event) => {
    const newMethod = event.target.value;
    setOptimizationMethod(newMethod);
    onChange({ 
      ...values, 
      optimization_method: newMethod 
    });
  };

  const handleStrategiesChange = (event, newStrategies) => {
    // Ensure at least one strategy is selected
    if (newStrategies.length === 0) return;
    
    setSelectedStrategies(newStrategies);
    onChange({ 
      ...values, 
      selected_strategies: newStrategies 
    });
  };

  const handleSliderChange = (field) => (event, newValue) => {
    onChange({ ...values, [field]: newValue });
  };

  const handleInputChange = (field) => (event) => {
    const value = event.target.type === 'number' 
      ? parseFloat(event.target.value) 
      : event.target.value;
    onChange({ ...values, [field]: value });
  };

  // Method info details
  const methodInfo = {
    classic: {
      title: "Grid Algorithm",
      icon: <GridOnIcon sx={{ fontSize: 36, color: darkBlueColors.primary }} />,
      description: "Systematically evaluates various parameter combinations using a grid search approach",
      color: darkBlueColors.primary
    },
    genetic: {
      title: "Evolutionary Algorithm",
      icon: <AccountTreeIcon sx={{ fontSize: 36, color: darkBlueColors.secondary }} />,
      description: "Uses advanced genetic algorithms to intelligently search for optimal structures",
      color: darkBlueColors.secondary
    }
  };

  // Strategy info
  const strategyInfo = {
    equal: {
      title: "Equal Distribution",
      icon: <BalanceIcon />,
      description: "Allocates equal nominal amounts across all tranches",
      color: darkBlueColors.primary
    },
    increasing: {
      title: "Increasing by Maturity",
      icon: <TrendingUpIcon />,
      description: "Higher allocations for longer maturity tranches",
      color: darkBlueColors.success
    },
    decreasing: {
      title: "Decreasing by Maturity",
      icon: <TrendingDownIcon />,
      description: "Higher allocations for shorter maturity tranches",
      color: darkBlueColors.error
    },
    middle_weighted: {
      title: "Middle-Weighted",
      icon: <EqualizerIcon />,
      description: "Higher allocations for middle maturity tranches",
      color: darkBlueColors.info
    }
  };

  return (
    <Box>
      <Typography 
        variant="subtitle1" 
        gutterBottom 
        fontWeight="medium" 
        sx={{ 
          mb: 3, 
          color: darkBlueColors.textPrimary,
          textShadow: '0 1px 2px rgba(0,0,0,0.3)'
        }}
      >
        Select an optimization method and configure parameters to find the optimal structure for your asset-backed securities
      </Typography>
      
      {/* Method Selection */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {Object.keys(methodInfo).map((method) => (
          <Grid item xs={12} sm={6} key={method}>
            <Card 
              elevation={3}
              sx={{ 
                borderRadius: 2,
                border: `1px solid ${optimizationMethod === method 
                  ? alpha(methodInfo[method].color, 0.7) 
                  : alpha(darkBlueColors.border, 0.5)}`,
                backgroundColor: optimizationMethod === method 
                  ? alpha(methodInfo[method].color, 0.15)
                  : darkBlueColors.cardBackground,
                transition: 'all 0.2s ease-in-out',
                cursor: 'pointer',
                height: '100%',
                '&:hover': {
                  borderColor: alpha(methodInfo[method].color, 0.8),
                  backgroundColor: alpha(methodInfo[method].color, 0.1),
                  boxShadow: `0 0 10px ${alpha(methodInfo[method].color, 0.3)}`
                }
              }}
              onClick={() => {
                setOptimizationMethod(method);
                onChange({ ...values, optimization_method: method });
              }}
            >
              <CardContent sx={{ p: 2.5 }}>
                <FormControlLabel
                  value={method}
                  control={
                    <Radio 
                      checked={optimizationMethod === method}
                      onChange={() => {}}
                      sx={{
                        color: alpha(darkBlueColors.textSecondary, 0.7),
                        '&.Mui-checked': {
                          color: methodInfo[method].color,
                        },
                      }}
                    />
                  }
                  label={
                    <Box sx={{ ml: 0.5 }}>
                      {methodInfo[method].icon}
                      <Typography 
                        variant="subtitle1" 
                        sx={{ 
                          mt: 1.5, 
                          fontWeight: 500, 
                          color: optimizationMethod === method 
                            ? methodInfo[method].color 
                            : darkBlueColors.textPrimary
                        }}
                      >
                        {methodInfo[method].title}
                      </Typography>
                      <Typography variant="body2" sx={{ mt: 0.5, minHeight: 60, color: darkBlueColors.textSecondary }}>
                        {methodInfo[method].description}
                      </Typography>
                    </Box>
                  }
                  sx={{ 
                    mx: 0, 
                    alignItems: 'flex-start', 
                    '& .MuiFormControlLabel-label': { width: '100%' } 
                  }}
                />
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Strategy Selection for Classic Method */}
      {optimizationMethod === 'classic' && (
        <Box sx={{ 
          mb: 4, 
          p: 3, 
          backgroundColor: alpha(darkBlueColors.primary, 0.08), 
          borderRadius: 2, 
          border: `1px solid ${alpha(darkBlueColors.primary, 0.3)}`,
          boxShadow: `0 2px 8px ${alpha(darkBlueColors.background, 0.5)}`
        }}>
          <Typography 
            variant="h6" 
            gutterBottom 
            sx={{ 
              display: 'flex', 
              alignItems: 'center', 
              mb: 2, 
              color: darkBlueColors.primary,
              textShadow: '0 1px 2px rgba(0,0,0,0.2)'
            }}
          >
            <GridOnIcon sx={{ mr: 1 }} /> Select Distribution Strategies
            <Tooltip title="Select one or more strategies to include in the grid search process. The system will determine which strategy produces the best results." sx={{ ml: 1 }}>
              <IconButton size="small" sx={{ color: alpha(darkBlueColors.textPrimary, 0.7) }}>
                <InfoIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          </Typography>
          
          <Typography variant="body2" sx={{ mb: 2, color: darkBlueColors.textSecondary }}>
            Select the strategies you want to include in the grid search. The system will evaluate all selected strategies across the parameter space and identify the combination that produces the best results.
          </Typography>
          
          <Grid container spacing={2}>
            {Object.keys(strategyInfo).map((strategy) => (
              <Grid item xs={12} sm={6} md={3} key={strategy}>
                <Paper 
                  elevation={2}
                  sx={{
                    p: 2,
                    border: `1px solid ${selectedStrategies.includes(strategy) 
                      ? alpha(strategyInfo[strategy].color, 0.7) 
                      : alpha(darkBlueColors.border, 0.3)}`,
                    backgroundColor: selectedStrategies.includes(strategy) 
                      ? alpha(strategyInfo[strategy].color, 0.15)
                      : darkBlueColors.cardBackground,
                    borderRadius: 2,
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    display: 'flex',
                    flexDirection: 'column',
                    height: '100%',
                    '&:hover': {
                      borderColor: alpha(strategyInfo[strategy].color, 0.8),
                      backgroundColor: alpha(strategyInfo[strategy].color, 0.1),
                      boxShadow: `0 0 8px ${alpha(strategyInfo[strategy].color, 0.2)}`
                    }
                  }}
                  onClick={() => {
                    const newSelection = selectedStrategies.includes(strategy)
                      ? selectedStrategies.filter(s => s !== strategy)
                      : [...selectedStrategies, strategy];
                    
                    if (newSelection.length > 0) {
                      handleStrategiesChange(null, newSelection);
                    }
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Checkbox 
                      checked={selectedStrategies.includes(strategy)}
                      size="small"
                      sx={{ 
                        p: 0.5, 
                        mr: 1,
                        color: alpha(darkBlueColors.textSecondary, 0.5),
                        '&.Mui-checked': {
                          color: strategyInfo[strategy].color,
                        }, 
                      }}
                    />
                    <Box sx={{ 
                      display: 'flex',
                      alignItems: 'center',
                      color: selectedStrategies.includes(strategy) 
                        ? strategyInfo[strategy].color 
                        : darkBlueColors.textPrimary
                    }}>
                      {React.cloneElement(strategyInfo[strategy].icon, { 
                        sx: { 
                          mr: 1,
                          color: selectedStrategies.includes(strategy) 
                            ? strategyInfo[strategy].color 
                            : alpha(darkBlueColors.textSecondary, 0.7)
                        } 
                      })}
                      <Typography 
                        variant="subtitle2" 
                        fontWeight={500}
                        sx={{ 
                          color: selectedStrategies.includes(strategy) 
                            ? strategyInfo[strategy].color 
                            : darkBlueColors.textPrimary
                        }}
                      >
                        {strategyInfo[strategy].title}
                      </Typography>
                    </Box>
                  </Box>
                  <Typography variant="body2" sx={{ mt: 1, fontSize: '0.8rem', color: darkBlueColors.textSecondary }}>
                    {strategyInfo[strategy].description}
                  </Typography>
                </Paper>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      <Divider sx={{ my: 3, borderColor: alpha(darkBlueColors.divider, 0.7) }} />
      
      <Box sx={{ 
        backgroundColor: darkBlueColors.cardBackground, 
        p: 3, 
        borderRadius: 2,
        border: `1px solid ${alpha(darkBlueColors.border, 0.3)}`,
        boxShadow: `0 2px 10px ${alpha(darkBlueColors.background, 0.8)}`
      }}>
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: methodInfo[optimizationMethod].color,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          {methodInfo[optimizationMethod].title} Configuration
        </Typography>
        
        {/* Method-specific settings */}
        {optimizationMethod === 'classic' && (
          <Box sx={{ mt: 3 }}>
            <Typography 
              variant="subtitle2" 
              gutterBottom 
              fontWeight="medium" 
              sx={{ color: darkBlueColors.textPrimary }}
            >
              Grid Search Parameters
            </Typography>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Class A Tranches Range</FormLabel>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.a_tranches_range[0]}</Typography>
                <Slider
                  value={values.a_tranches_range}
                  onChange={handleSliderChange('a_tranches_range')}
                  min={1}
                  max={10}
                  step={1}
                  valueLabelDisplay="auto"
                  aria-labelledby="a-tranches-range-slider"
                  sx={{ 
                    mx: 2,
                    color: darkBlueColors.primary,
                    '& .MuiSlider-thumb': {
                      boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.primary, 0.8)}`,
                    },
                    '& .MuiSlider-rail': {
                      backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                    },
                    '& .MuiSlider-track': {
                      backgroundColor: darkBlueColors.primary,
                    },
                    '& .MuiSlider-valueLabel': {
                      backgroundColor: darkBlueColors.primary,
                    },
                  }}
                />
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.a_tranches_range[1]}</Typography>
              </Box>
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Number of Class A tranches to consider in the grid search
              </Typography>
            </FormControl>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Maturity Range (days)</FormLabel>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.maturity_range[0]}</Typography>
                <Slider
                  value={values.maturity_range}
                  onChange={handleSliderChange('maturity_range')}
                  min={30}
                  max={365}
                  step={5}
                  valueLabelDisplay="auto"
                  aria-labelledby="maturity-range-slider"
                  sx={{ 
                    mx: 2,
                    color: darkBlueColors.primary,
                    '& .MuiSlider-thumb': {
                      boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.primary, 0.8)}`,
                    },
                    '& .MuiSlider-rail': {
                      backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                    },
                    '& .MuiSlider-track': {
                      backgroundColor: darkBlueColors.primary,
                    },
                    '& .MuiSlider-valueLabel': {
                      backgroundColor: darkBlueColors.primary,
                    },
                  }}
                />
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.maturity_range[1]}</Typography>
              </Box>
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Range of maturity periods to evaluate in the grid (in days)
              </Typography>
            </FormControl>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Maturity Step</FormLabel>
              <Slider
                value={values.maturity_step}
                onChange={handleSliderChange('maturity_step')}
                min={5}
                max={30}
                step={5}
                valueLabelDisplay="auto"
                aria-labelledby="maturity-step-slider"
                marks={[
                  { value: 5, label: '5' },
                  { value: 10, label: '10' },
                  { value: 15, label: '15' },
                  { value: 20, label: '20' },
                  { value: 25, label: '25' },
                  { value: 30, label: '30' },
                ]}
                sx={{ 
                  color: darkBlueColors.primary,
                  '& .MuiSlider-markLabel': {
                    color: darkBlueColors.textSecondary,
                  },
                  '& .MuiSlider-thumb': {
                    boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.primary, 0.8)}`,
                  },
                  '& .MuiSlider-rail': {
                    backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                  },
                  '& .MuiSlider-track': {
                    backgroundColor: darkBlueColors.primary,
                  },
                  '& .MuiSlider-valueLabel': {
                    backgroundColor: darkBlueColors.primary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Grid resolution for maturity values (smaller steps = more thorough search)
              </Typography>
            </FormControl>
          </Box>
        )}
        
        {optimizationMethod === 'genetic' && (
          <Box sx={{ mt: 3 }}>
            <Typography 
              variant="subtitle2" 
              gutterBottom 
              fontWeight="medium" 
              sx={{ color: darkBlueColors.textPrimary }}
            >
              Evolutionary Algorithm Settings
            </Typography>
            
            <FormControl fullWidth sx={{ mb: 2 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Population Size</FormLabel>
              <Slider
                value={values.population_size || 50}
                onChange={(e, newValue) => onChange({ ...values, population_size: newValue })}
                min={10}
                max={100}
                step={5}
                valueLabelDisplay="auto"
                marks={[
                  { value: 10, label: '10' },
                  { value: 50, label: '50' },
                  { value: 100, label: '100' },
                ]}
                sx={{ 
                  color: darkBlueColors.secondary,
                  '& .MuiSlider-markLabel': {
                    color: darkBlueColors.textSecondary,
                  },
                  '& .MuiSlider-thumb': {
                    boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.secondary, 0.8)}`,
                  },
                  '& .MuiSlider-rail': {
                    backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                  },
                  '& .MuiSlider-track': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                  '& .MuiSlider-valueLabel': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Number of individuals in each generation - larger populations can find better solutions but take longer
              </Typography>
            </FormControl>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Number of Generations</FormLabel>
              <Slider
                value={values.num_generations || 40}
                onChange={(e, newValue) => onChange({ ...values, num_generations: newValue })}
                min={10}
                max={100}
                step={5}
                valueLabelDisplay="auto"
                marks={[
                  { value: 10, label: '10' },
                  { value: 40, label: '40' },
                  { value: 100, label: '100' },
                ]}
                sx={{ 
                  color: darkBlueColors.secondary,
                  '& .MuiSlider-markLabel': {
                    color: darkBlueColors.textSecondary,
                  },
                  '& .MuiSlider-thumb': {
                    boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.secondary, 0.8)}`,
                  },
                  '& .MuiSlider-rail': {
                    backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                  },
                  '& .MuiSlider-track': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                  '& .MuiSlider-valueLabel': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Number of evolutionary cycles to run - more generations improve results but take longer
              </Typography>
            </FormControl>
          </Box>
        )}
        
        <Divider sx={{ my: 3, borderColor: alpha(darkBlueColors.divider, 0.7) }} />
        
        {/* Common settings for all optimization methods - Ä°steÄŸe gÃ¶re metin deÄŸiÅŸiklikleri burada yapÄ±ldÄ± */}
        <Typography 
          variant="subtitle2" 
          gutterBottom 
          fontWeight="medium" 
          sx={{ color: darkBlueColors.textPrimary }}
        >
          Common Optimization Parameters
        </Typography>
        
        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Class B OranÄ±</FormLabel>
              <TextField
                value={values.min_class_b_percent}
                onChange={handleInputChange('min_class_b_percent')}
                type="number"
                InputProps={{
                  endAdornment: <InputAdornment position="end" sx={{ color: darkBlueColors.textSecondary }}>%</InputAdornment>,
                  inputProps: { min: 5, max: 30, step: 0.5 },
                }}
                sx={{
                  mt: 1,
                  '& .MuiOutlinedInput-root': {
                    backgroundColor: darkBlueColors.inputBackground,
                    color: darkBlueColors.textPrimary,
                    '& fieldset': {
                      borderColor: alpha(darkBlueColors.border, 0.5),
                    },
                    '&:hover fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                    '&.Mui-focused fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                  },
                  '& .MuiInputBase-input': {
                    color: darkBlueColors.textPrimary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, mt: 1 }}>
                Minimum percentage of total nominal to allocate to Class B
              </Typography>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Effective Coupon Rate</FormLabel>
              <TextField
                value={values.target_class_b_coupon_rate}
                onChange={handleInputChange('target_class_b_coupon_rate')}
                type="number"
                InputProps={{
                  endAdornment: <InputAdornment position="end" sx={{ color: darkBlueColors.textSecondary }}>%</InputAdornment>,
                  inputProps: { min: 10, max: 100, step: 0.5 },
                }}
                sx={{
                  mt: 1,
                  '& .MuiOutlinedInput-root': {
                    backgroundColor: darkBlueColors.inputBackground,
                    color: darkBlueColors.textPrimary,
                    '& fieldset': {
                      borderColor: alpha(darkBlueColors.border, 0.5),
                    },
                    '&:hover fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                    '&.Mui-focused fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                  },
                  '& .MuiInputBase-input': {
                    color: darkBlueColors.textPrimary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, mt: 1 }}>
                Target annual coupon rate for Class B tranche
              </Typography>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Additional Days for Class B</FormLabel>
              <TextField
                value={values.additional_days_for_class_b}
                onChange={handleInputChange('additional_days_for_class_b')}
                type="number"
                InputProps={{
                  endAdornment: <InputAdornment position="end" sx={{ color: darkBlueColors.textSecondary }}>days</InputAdornment>,
                  inputProps: { min: 1, max: 180, step: 1 },
                }}
                sx={{
                  mt: 1,
                  '& .MuiOutlinedInput-root': {
                    backgroundColor: darkBlueColors.inputBackground,
                    color: darkBlueColors.textPrimary,
                    '& fieldset': {
                      borderColor: alpha(darkBlueColors.border, 0.5),
                    },
                    '&:hover fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                    '&.Mui-focused fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                  },
                  '& .MuiInputBase-input': {
                    color: darkBlueColors.textPrimary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, mt: 1 }}>
                Additional days to add to the last cash flow date for Class B maturity
              </Typography>
            </FormControl>
          </Grid>
        </Grid>
      </Box>
    </Box>
  );
};

export default OptimizationSettingsForm;

======================================================================

DOSYA: src\components\receivables\ReceivablesDashboard.js
==================================================
// src/components/receivables/ReceivablesDashboard.js
import React from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Grid, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  useTheme
} from '@mui/material';
import { alpha } from '@mui/material/styles';
import { PieChart, Pie, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';

// Static analysis data from the receivables file
const staticData = {
  "totalAmount": 249901428.52999964,
  "customerSummary": [
    {
      "name": "MEDIA MARKT",
      "fullName": "MEDIA MARKT TURKEY LTD",
      "amount": 84582455.81999995,
      "count": 657,
      "percentage": 33.84632745700618
    },
    {
      "name": "MIGROS",
      "fullName": "MIGROS TRADE INC",
      "amount": 72901705.11999997,
      "count": 140,
      "percentage": 29.17218422833002
    },
    {
      "name": "TEKNOSA",
      "fullName": "TEKNOSA DOMESTIC & FOREIGN TRADE INC",
      "amount": 67716613.89999999,
      "count": 16,
      "percentage": 27.0973296544685
    },
    {
      "name": "SOK MARKETS",
      "fullName": "SOK MARKETS TRADE INC",
      "amount": 21196966.36000001,
      "count": 240,
      "percentage": 8.482130928457417
    },
    {
      "name": "BIM",
      "fullName": "BIM UNITED STORES INC",
      "amount": 3503687.33,
      "count": 19,
      "percentage": 1.4020277317379948
    }
  ],
  "monthlyData": [
    {
      "name": "2025-4",
      "amount": 20622871.949999996,
      "count": 34
    },
    {
      "name": "2025-5",
      "amount": 5799954.800000002,
      "count": 33
    },
    {
      "name": "2025-6",
      "amount": 32786688.37000001,
      "count": 285
    },
    {
      "name": "2025-7",
      "amount": 73738076.94000004,
      "count": 220
    },
    {
      "name": "2025-8",
      "amount": 102611323.45999981,
      "count": 486
    },
    {
      "name": "2025-9",
      "amount": 14342513.010000002,
      "count": 14
    }
  ],
  "documentTypeSummary": [
    {
      "name": "RV",
      "fullName": "Receivable Voucher (Standard Invoices)",
      "amount": 249814616.51999962,
      "count": 1067,
      "percentage": 99.96526149909958
    },
    {
      "name": "AB",
      "fullName": "Adjustment Booking (Account Corrections)",
      "amount": 3912.88,
      "count": 1,
      "percentage": 0.0015657693607502826
    },
    {
      "name": "DG",
      "fullName": "Debit Generation (Additional Fees)",
      "amount": 82899.13,
      "count": 4,
      "percentage": 0.033172731539647164
    }
  ],
  "dueDateDistribution": [
    {
      "name": "Overdue",
      "count": 0,
      "amount": 0,
      "percentage": 0,
      "amountPercentage": 0
    },
    {
      "name": "0-30 days",
      "count": 45,
      "amount": 21236883.899999995,
      "percentage": 4.197761194029851,
      "amountPercentage": 8.4981042425096
    },
    {
      "name": "31-60 days",
      "count": 303,
      "amount": 37889732.09000001,
      "percentage": 28.264925373134332,
      "amountPercentage": 15.161870947629058
    },
    {
      "name": "61-90 days",
      "count": 11,
      "amount": 29529598.290000007,
      "percentage": 1.0261194029850746,
      "amountPercentage": 11.816498394468
    },
    {
      "name": "91+ days",
      "count": 713,
      "amount": 161245214.24999985,
      "percentage": 66.51119402985076,
      "amountPercentage": 64.52352641539343
    }
  ],
  "avgDueDate": 82.83208955223881
};

// Custom colors for charts
const COLORS = ['#4e7bea', '#9c27b0', '#f44336', '#ff9800', '#29b6f6', '#4caf50', '#ff5722', '#673ab7'];

const ReceivablesDashboard = () => {
  const theme = useTheme();
  
  // Format functions
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('tr-TR', { 
      style: 'currency', 
      currency: 'TRY',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(value);
  };

  const formatPercentage = (value) => {
    return `${value.toFixed(2)}%`;
  };

  const formatMonth = (month) => {
    const [year, monthNum] = month.split('-');
    const date = new Date(parseInt(year), parseInt(monthNum) - 1);
    return date.toLocaleString('en-US', { month: 'long', year: 'numeric' });
  };

  return (
    <Box>
      {/* Key Metrics */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} md={4}>
          <Paper 
            sx={{ 
              p: 3, 
              height: '100%', 
              display: 'flex', 
              flexDirection: 'column', 
              justifyContent: 'center',
              background: 'linear-gradient(135deg, rgba(78, 123, 234, 0.1) 0%, rgba(14, 23, 42, 0) 100%)',
              borderLeft: `4px solid ${theme.palette.primary.main}`
            }}
          >
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              Total Receivables Amount
            </Typography>
            <Typography variant="h4" color="primary" gutterBottom>
              {formatCurrency(staticData.totalAmount)}
            </Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={4}>
          <Paper 
            sx={{ 
              p: 3, 
              height: '100%', 
              display: 'flex', 
              flexDirection: 'column', 
              justifyContent: 'center',
              background: 'linear-gradient(135deg, rgba(156, 39, 176, 0.1) 0%, rgba(14, 23, 42, 0) 100%)',
              borderLeft: `4px solid ${theme.palette.secondary.main}`
            }}
          >
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              Average Remaining Maturity
            </Typography>
            <Typography variant="h4" color="secondary" gutterBottom>
              {Math.round(staticData.avgDueDate)} days
            </Typography>
            <Typography variant="caption" color="text.secondary">
              From April 28, 2025
            </Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={4}>
          <Paper 
            sx={{ 
              p: 3, 
              height: '100%', 
              display: 'flex', 
              flexDirection: 'column', 
              justifyContent: 'center',
              background: 'linear-gradient(135deg, rgba(76, 175, 80, 0.1) 0%, rgba(14, 23, 42, 0) 100%)',
              borderLeft: `4px solid ${theme.palette.success.main}`
            }}
          >
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              Total Number of Customers
            </Typography>
            <Typography variant="h4" sx={{ color: theme.palette.success.main }} gutterBottom>
              {staticData.customerSummary.length}
            </Typography>
          </Paper>
        </Grid>
      </Grid>

      {/* Customer Distribution and Maturity Distribution */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {/* Customer Distribution */}
        <Grid item xs={12} lg={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Customer Distribution (Top 5)
            </Typography>
            <Box sx={{ height: 300, mt: 2 }}>
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={staticData.customerSummary}
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    dataKey="amount"
                    nameKey="name"
                    label={({ name, percentage }) => `${name}: ${percentage.toFixed(1)}%`}
                    labelLine={false}
                  >
                    {staticData.customerSummary.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip formatter={(value) => formatCurrency(value)} />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </Box>
            <TableContainer sx={{ mt: 2 }}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Customer</TableCell>
                    <TableCell align="right">Amount</TableCell>
                    <TableCell align="right">Percentage</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {staticData.customerSummary.map((customer, index) => (
                    <TableRow key={index}>
                      <TableCell component="th" scope="row">{customer.fullName}</TableCell>
                      <TableCell align="right">{formatCurrency(customer.amount)}</TableCell>
                      <TableCell align="right">{formatPercentage(customer.percentage)}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </Grid>

        {/* Maturity Date Distribution */}
        <Grid item xs={12} lg={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Maturity Date Distribution
            </Typography>
            <Box sx={{ height: 300, mt: 2 }}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={staticData.monthlyData}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" tickFormatter={formatMonth} />
                  <YAxis />
                  <Tooltip 
                    formatter={(value) => formatCurrency(value)}
                    labelFormatter={formatMonth}
                  />
                  <Legend />
                  <Bar dataKey="amount" name="Amount" fill={theme.palette.primary.main} />
                </BarChart>
              </ResponsiveContainer>
            </Box>
            <TableContainer sx={{ mt: 2 }}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Month</TableCell>
                    <TableCell align="right">Amount</TableCell>
                    <TableCell align="right">Transaction Count</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {staticData.monthlyData.map((month, index) => (
                    <TableRow key={index}>
                      <TableCell component="th" scope="row">{formatMonth(month.name)}</TableCell>
                      <TableCell align="right">{formatCurrency(month.amount)}</TableCell>
                      <TableCell align="right">{month.count}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </Grid>
      </Grid>

      {/* Document Type and Maturity Period */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {/* Document Type Distribution */}
        <Grid item xs={12} lg={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Document Type Distribution
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              RV: Receivable Voucher (Standard Invoices) | AB: Adjustment Booking (Account Corrections) | DG: Debit Generation (Additional Fees)
            </Typography>
            
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell sx={{ fontWeight: 'bold' }}>Document Type</TableCell>
                        <TableCell align="right" sx={{ fontWeight: 'bold' }}>Count</TableCell>
                        <TableCell align="right" sx={{ fontWeight: 'bold' }}>Amount</TableCell>
                        <TableCell align="right" sx={{ fontWeight: 'bold' }}>Percentage</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {staticData.documentTypeSummary.map((type, index) => (
                        <TableRow key={index}>
                          <TableCell component="th" scope="row">{type.fullName || type.name}</TableCell>
                          <TableCell align="right">{type.count}</TableCell>
                          <TableCell align="right">{formatCurrency(type.amount)}</TableCell>
                          <TableCell align="right">
                            <Box display="flex" alignItems="center" justifyContent="flex-end">
                              <Box sx={{ 
                                width: `${Math.max(type.percentage * 0.8, 2)}%`, 
                                height: 16, 
                                backgroundColor: COLORS[index % COLORS.length],
                                borderRadius: 1,
                                mr: 1
                              }} />
                              {formatPercentage(type.percentage)}
                            </Box>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>
              <Grid item xs={12}>
                <Box sx={{ height: 200, mt: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      layout="vertical"
                      data={staticData.documentTypeSummary}
                      margin={{ top: 5, right: 30, left: 150, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis type="number" domain={[0, 100]} tickFormatter={(value) => `${value}%`} />
                      <YAxis type="category" dataKey="name" width={100} />
                      <Tooltip formatter={(value) => `${value.toFixed(4)}%`} />
                      <Legend />
                      <Bar dataKey="percentage" name="Percentage" fill={theme.palette.primary.main} />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* Maturity Period Distribution */}
        <Grid item xs={12} lg={6}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Maturity Period Distribution (as of April 28, 2025)
            </Typography>
            <Box sx={{ height: 300, mt: 2 }}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={staticData.dueDateDistribution}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip formatter={(value, name) => [
                    name === 'amount' ? formatCurrency(value) : value,
                    name === 'amount' ? 'Amount' : 'Transaction Count'
                  ]} />
                  <Legend />
                  <Bar dataKey="amount" name="Amount" fill={theme.palette.primary.main} />
                  <Bar dataKey="count" name="Transaction Count" fill={theme.palette.secondary.main} />
                </BarChart>
              </ResponsiveContainer>
            </Box>
            <TableContainer sx={{ mt: 2 }}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Remaining Maturity Range</TableCell>
                    <TableCell align="right">Amount</TableCell>
                    <TableCell align="right">Percentage</TableCell>
                    <TableCell align="right">Count</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {staticData.dueDateDistribution.map((range, index) => (
                    <TableRow key={index}>
                      <TableCell component="th" scope="row">{range.name}</TableCell>
                      <TableCell align="right">{formatCurrency(range.amount)}</TableCell>
                      <TableCell align="right">{formatPercentage(range.amountPercentage)}</TableCell>
                      <TableCell align="right">{range.count}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </Grid>
      </Grid>

      {/* Securitization Risk Analysis */}
      <Paper 
        sx={{ 
          p: 3,
          background: 'linear-gradient(180deg, rgba(14, 23, 42, 0.7) 0%, rgba(14, 23, 42, 0.9) 100%)',
          borderTop: `1px solid ${alpha(theme.palette.primary.main, 0.3)}`
        }}
      >
        <Typography variant="h6" gutterBottom sx={{ color: 'text.primary', fontWeight: 600, mb: 2 }}>
          Securitization Risk Analysis
        </Typography>
        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <Paper 
              sx={{ 
                p: 3, 
                bgcolor: theme.palette.background.default,
                borderLeft: `4px solid ${theme.palette.error.main}`
              }}
            >
              <Typography variant="subtitle2" gutterBottom>
                Concentration Risk
              </Typography>
              <Typography variant="h5" color="error.main" gutterBottom>
                {formatPercentage(staticData.customerSummary[0]?.percentage || 0)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Share of the largest customer in total receivables
              </Typography>
            </Paper>
          </Grid>
          <Grid item xs={12} md={4}>
            <Paper 
              sx={{ 
                p: 3, 
                bgcolor: theme.palette.background.default,
                borderLeft: `4px solid ${theme.palette.primary.main}`
              }}
            >
              <Typography variant="subtitle2" gutterBottom>
                Maturity Profile
              </Typography>
              <Typography variant="h5" color="primary.main" gutterBottom>
                {formatPercentage(staticData.dueDateDistribution.find(d => d.name === "91+ days")?.amountPercentage || 0)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Portion of receivables with 91+ days maturity (from April 28, 2025)
              </Typography>
            </Paper>
          </Grid>
          <Grid item xs={12} md={4}>
            <Paper 
              sx={{ 
                p: 3, 
                bgcolor: theme.palette.background.default,
                borderLeft: `4px solid ${theme.palette.success.main}`
              }}
            >
              <Typography variant="subtitle2" gutterBottom>
                Document Type Diversity
              </Typography>
              <Typography variant="h5" color="success.main" gutterBottom>
                {staticData.documentTypeSummary.length}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Number of different document types
              </Typography>
            </Paper>
          </Grid>
        </Grid>
      </Paper>
    </Box>
  );
};

export default ReceivablesDashboard;

======================================================================

DOSYA: src\components\reports\InvestorReportCard.js
==================================================
// src/components/reports/InvestorReportCard.js
import {
    ArrowBack,
    CloudDownload,
    InfoOutlined,
    PieChartOutline,
  } from "@mui/icons-material";
  import {
    Box,
    Button,
    FormControl,
    FormHelperText,
    Grid,
    InputLabel,
    MenuItem,
    Paper,
    Select,
    Typography,
    alpha,
    useTheme,
    Snackbar,
    Alert,
  } from "@mui/material";
  import React, { useState } from "react";
  
  const reportPeriodOptions = [
    { id: "monthly", label: "Monthly Report" },
    { id: "quarterly", label: "Quarterly Report" },
    { id: "annual", label: "Annual Report" },
  ];
  
  // Mock data for cash flows
  const mockCashFlows = [
    { method_code: "cf001", name: "Cash Flow 1" },
    { method_code: "cf002", name: "Cash Flow 2" },
    { method_code: "cf003", name: "Cash Flow 3" },
  ];
  
  const InvestorReportCard = ({ onBack, category }) => {
    const theme = useTheme();
  
    // Component state
    const [selectedCashFlow, setSelectedCashFlow] = useState("");
    const [selectedPeriod, setSelectedPeriod] = useState("");
    const [formErrors, setFormErrors] = useState({});
    const [loading, setLoading] = useState(false);
    const [cashFlows, setCashFlows] = useState(mockCashFlows);
    const [snackbar, setSnackbar] = useState({
      open: false,
      message: "",
      severity: "info",
    });
  
    // Simulate fetch cash flows on component mount
    React.useEffect(() => {
      setLoading(true);
      // Simulate API call
      setTimeout(() => {
        setCashFlows(mockCashFlows);
        setLoading(false);
      }, 500);
    }, []);
  
    // Handle cash flow selection
    const handleCashFlowChange = (event) => {
      setSelectedCashFlow(event.target.value);
      if (formErrors.cashFlow) {
        setFormErrors({ ...formErrors, cashFlow: "" });
      }
    };
  
    // Handle period selection
    const handlePeriodChange = (event) => {
      setSelectedPeriod(event.target.value);
      if (formErrors.period) {
        setFormErrors({ ...formErrors, period: "" });
      }
    };
  
    // Handle snackbar close
    const handleSnackbarClose = () => {
      setSnackbar({ ...snackbar, open: false });
    };
  
    // Show snackbar
    const showSnackbar = (message, severity = "info") => {
      setSnackbar({
        open: true,
        message,
        severity,
      });
    };
  
    // Handle form submission (download report)
    const handleDownloadReport = () => {
      // Validate form
      const errors = {};
      if (!selectedCashFlow) {
        errors.cashFlow = "Please select a cash flow";
      }
      if (!selectedPeriod) {
        errors.period = "Please select a reporting period";
      }
  
      // If there are errors, update state and return
      if (Object.keys(errors).length > 0) {
        setFormErrors(errors);
        return;
      }
  
      // This is a placeholder - in a real implementation, we would dispatch an action to download the report
      showSnackbar(
        `Feature in development: Investor ${selectedPeriod} report for ${selectedCashFlow} will be available soon.`,
        "info"
      );
    };
  
    return (
      <div style={{ opacity: 1, transition: 'opacity 0.3s' }}>
        <Box>
          {/* Header with back button */}
          <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
            <Button
              variant="outlined"
              startIcon={<ArrowBack />}
              onClick={onBack}
              style={{
                color: category.color,
                borderColor: category.color,
                marginRight: 16,
              }}
            >
              Back
            </Button>
  
            <Box sx={{ display: "flex", alignItems: "center" }}>
              <PieChartOutline
                sx={{
                  mr: 2,
                  color: category.color,
                  fontSize: 28,
                }}
              />
              <Typography variant="h5" component="h2" fontWeight="500">
                Investor Reports
              </Typography>
            </Box>
          </Box>
  
          {/* Form Area */}
          <Paper
            elevation={0}
            sx={{
              p: 3,
              borderRadius: 2,
              mb: 3,
              border: `1px solid ${alpha(category.color, 0.2)}`,
              bgcolor: alpha(category.color, 0.03),
            }}
          >
            <Typography variant="body1" paragraph>
              Generate comprehensive investor reports with key performance metrics
              and tranche analytics.
            </Typography>
  
            <Grid container spacing={3}>
              {/* Cash Flow Selection */}
              <Grid item xs={12} md={6}>
                <FormControl
                  fullWidth
                  error={!!formErrors.cashFlow}
                  disabled={loading}
                >
                  <InputLabel id="cash-flow-select-label">Cash Flow</InputLabel>
                  <Select
                    labelId="cash-flow-select-label"
                    id="cash-flow-select"
                    value={selectedCashFlow}
                    label="Cash Flow"
                    onChange={handleCashFlowChange}
                  >
                    {loading ? (
                      <MenuItem disabled>Loading cash flows...</MenuItem>
                    ) : cashFlows.length === 0 ? (
                      <MenuItem disabled>No cash flows available</MenuItem>
                    ) : (
                      cashFlows.map((cf) => (
                        <MenuItem key={cf.method_code} value={cf.method_code}>
                          {cf.name || cf.method_code}
                        </MenuItem>
                      ))
                    )}
                  </Select>
                  {formErrors.cashFlow && (
                    <FormHelperText>{formErrors.cashFlow}</FormHelperText>
                  )}
                </FormControl>
              </Grid>
  
              {/* Report Period Selection */}
              <Grid item xs={12} md={6}>
                <FormControl fullWidth error={!!formErrors.period}>
                  <InputLabel id="period-select-label">
                    Reporting Period
                  </InputLabel>
                  <Select
                    labelId="period-select-label"
                    id="period-select"
                    value={selectedPeriod}
                    label="Reporting Period"
                    onChange={handlePeriodChange}
                  >
                    {reportPeriodOptions.map((period) => (
                      <MenuItem key={period.id} value={period.id}>
                        {period.label}
                      </MenuItem>
                    ))}
                  </Select>
                  {formErrors.period && (
                    <FormHelperText>{formErrors.period}</FormHelperText>
                  )}
                </FormControl>
              </Grid>
            </Grid>
  
            {/* Download Button */}
            <Box sx={{ mt: 4, display: "flex", justifyContent: "center" }}>
              <Button
                variant="contained"
                size="large"
                startIcon={<CloudDownload />}
                onClick={handleDownloadReport}
                disabled={loading}
                sx={{
                  bgcolor: category.color,
                  color: "#fff",
                  px: 4,
                  py: 1.5,
                  "&:hover": {
                    bgcolor: alpha(category.color, 0.8),
                  },
                }}
              >
                Generate Investor Report
              </Button>
            </Box>
          </Paper>
  
          {/* Information Section */}
          <Paper
            elevation={0}
            sx={{
              p: 3,
              borderRadius: 2,
              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
            }}
          >
            <Box sx={{ display: "flex", alignItems: "flex-start", mb: 2 }}>
              <InfoOutlined sx={{ mr: 1, color: theme.palette.info.main, mt: 0.5 }} />
              <Typography variant="subtitle1">About Investor Reports</Typography>
            </Box>
  
            <Typography variant="body2" color="text.secondary" paragraph>
              Investor reports provide comprehensive information on ABS
              performance, tranche distributions, and key metrics for investors to
              assess their investments.
            </Typography>
  
            <Typography variant="body2" color="text.secondary" paragraph>
              These reports include key performance indicators, cash flow
              allocations, payment distributions, and relevant risk metrics across
              different time periods.
            </Typography>
  
            <Typography variant="body2" color="text.secondary">
              Reporting periods can be adjusted to match investor communication
              requirements and internal portfolio review schedules.
            </Typography>
          </Paper>
        </Box>
  
        {/* Snackbar for notifications */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleSnackbarClose}
          anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
        >
          <Alert
            onClose={handleSnackbarClose}
            severity={snackbar.severity}
            sx={{ width: "100%" }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </div>
    );
  };
  
  export default InvestorReportCard;

======================================================================

DOSYA: src\components\reports\ManagementReportCard.js
==================================================
// src/components/reports/ManagementReportCard.js
import {
    ArrowBack,
    CloudDownload,
    DescriptionOutlined,
    HelpOutline,
  } from "@mui/icons-material";
  import {
    Box,
    Button,
    Chip,
    Divider,
    FormControl,
    FormControlLabel,
    FormGroup,
    FormHelperText,
    Grid,
    InputLabel,
    MenuItem,
    Paper,
    Select,
    Switch,
    Typography,
    alpha,
    useTheme,
    Snackbar,
    Alert,
  } from "@mui/material";
  import React, { useState } from "react";
  
  const reportTypeOptions = [
    {
      id: "executive",
      label: "Executive Summary",
      description: "High-level overview for executive team",
    },
    {
      id: "detailed",
      label: "Detailed Analysis",
      description: "Comprehensive analysis with detailed metrics",
    },
    {
      id: "risk",
      label: "Risk Assessment",
      description: "Focus on risk factors and stress testing",
    },
  ];
  
  // Mock data for cash flows
  const mockCashFlows = [
    { method_code: "cf001", name: "Cash Flow 1" },
    { method_code: "cf002", name: "Cash Flow 2" },
    { method_code: "cf003", name: "Cash Flow 3" },
  ];
  
  const ManagementReportCard = ({ onBack, category }) => {
    const theme = useTheme();
  
    // Component state
    const [selectedCashFlow, setSelectedCashFlow] = useState("");
    const [selectedReportType, setSelectedReportType] = useState("");
    const [includeCharts, setIncludeCharts] = useState(true);
    const [includeTables, setIncludeTables] = useState(true);
    const [formErrors, setFormErrors] = useState({});
    const [loading, setLoading] = useState(false);
    const [cashFlows, setCashFlows] = useState(mockCashFlows);
    const [snackbar, setSnackbar] = useState({
      open: false,
      message: "",
      severity: "info",
    });
  
    // Simulate fetch cash flows on component mount
    React.useEffect(() => {
      setLoading(true);
      // Simulate API call
      setTimeout(() => {
        setCashFlows(mockCashFlows);
        setLoading(false);
      }, 500);
    }, []);
  
    // Handle cash flow selection
    const handleCashFlowChange = (event) => {
      setSelectedCashFlow(event.target.value);
      if (formErrors.cashFlow) {
        setFormErrors({ ...formErrors, cashFlow: "" });
      }
    };
  
    // Handle report type selection
    const handleReportTypeChange = (event) => {
      setSelectedReportType(event.target.value);
      if (formErrors.reportType) {
        setFormErrors({ ...formErrors, reportType: "" });
      }
    };
  
    // Handle snackbar close
    const handleSnackbarClose = () => {
      setSnackbar({ ...snackbar, open: false });
    };
  
    // Show snackbar
    const showSnackbar = (message, severity = "info") => {
      setSnackbar({
        open: true,
        message,
        severity,
      });
    };
  
    // Handle form submission (download report)
    const handleDownloadReport = () => {
      // Validate form
      const errors = {};
      if (!selectedCashFlow) {
        errors.cashFlow = "Please select a cash flow";
      }
      if (!selectedReportType) {
        errors.reportType = "Please select a report type";
      }
  
      // If there are errors, update state and return
      if (Object.keys(errors).length > 0) {
        setFormErrors(errors);
        return;
      }
  
      // This is a placeholder - in a real implementation, we would dispatch an action to download the report
      showSnackbar(
        `Feature in development: Management ${selectedReportType} report for ${selectedCashFlow} will be available soon.`,
        "info"
      );
    };
  
    // Get the selected report type object for display
    const selectedReportTypeObj = reportTypeOptions.find(
      (type) => type.id === selectedReportType
    );
  
    return (
      <div style={{ opacity: 1, transition: 'opacity 0.3s' }}>
        <Box>
          {/* Header with back button */}
          <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
            <Button
              variant="outlined"
              startIcon={<ArrowBack />}
              onClick={onBack}
              style={{
                color: category.color,
                borderColor: category.color,
                marginRight: 16,
              }}
            >
              Back
            </Button>
  
            <Box sx={{ display: "flex", alignItems: "center" }}>
              <DescriptionOutlined
                sx={{
                  mr: 2,
                  color: category.color,
                  fontSize: 28,
                }}
              />
              <Typography variant="h5" component="h2" fontWeight="500">
                Management Reports
              </Typography>
            </Box>
          </Box>
  
          {/* Form Area */}
          <Paper
            elevation={0}
            sx={{
              p: 3,
              borderRadius: 2,
              mb: 3,
              border: `1px solid ${alpha(category.color, 0.2)}`,
              bgcolor: alpha(category.color, 0.03),
            }}
          >
            <Typography variant="body1" paragraph>
              Generate customized management reports with in-depth analysis and
              decision-support metrics.
            </Typography>
  
            <Grid container spacing={3}>
              {/* Cash Flow Selection */}
              <Grid item xs={12} md={6}>
                <FormControl
                  fullWidth
                  error={!!formErrors.cashFlow}
                  disabled={loading}
                >
                  <InputLabel id="cash-flow-select-label">Cash Flow</InputLabel>
                  <Select
                    labelId="cash-flow-select-label"
                    id="cash-flow-select"
                    value={selectedCashFlow}
                    label="Cash Flow"
                    onChange={handleCashFlowChange}
                  >
                    {loading ? (
                      <MenuItem disabled>Loading cash flows...</MenuItem>
                    ) : cashFlows.length === 0 ? (
                      <MenuItem disabled>No cash flows available</MenuItem>
                    ) : (
                      cashFlows.map((cf) => (
                        <MenuItem key={cf.method_code} value={cf.method_code}>
                          {cf.name || cf.method_code}
                        </MenuItem>
                      ))
                    )}
                  </Select>
                  {formErrors.cashFlow && (
                    <FormHelperText>{formErrors.cashFlow}</FormHelperText>
                  )}
                </FormControl>
              </Grid>
  
              {/* Report Type Selection */}
              <Grid item xs={12} md={6}>
                <FormControl fullWidth error={!!formErrors.reportType}>
                  <InputLabel id="report-type-select-label">
                    Report Type
                  </InputLabel>
                  <Select
                    labelId="report-type-select-label"
                    id="report-type-select"
                    value={selectedReportType}
                    label="Report Type"
                    onChange={handleReportTypeChange}
                  >
                    {reportTypeOptions.map((type) => (
                      <MenuItem key={type.id} value={type.id}>
                        {type.label}
                      </MenuItem>
                    ))}
                  </Select>
                  {formErrors.reportType && (
                    <FormHelperText>{formErrors.reportType}</FormHelperText>
                  )}
                </FormControl>
              </Grid>
            </Grid>
  
            {/* Report Options */}
            <Box sx={{ mt: 3 }}>
              <Typography variant="subtitle2" sx={{ mb: 1 }}>
                Report Options
              </Typography>
              <Paper
                elevation={0}
                sx={{
                  p: 2,
                  borderRadius: 1,
                  bgcolor: alpha(theme.palette.background.default, 0.5),
                  border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
                }}
              >
                <FormGroup>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={includeCharts}
                            onChange={(e) => setIncludeCharts(e.target.checked)}
                            color="primary"
                          />
                        }
                        label="Include Charts & Visualizations"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={includeTables}
                            onChange={(e) => setIncludeTables(e.target.checked)}
                            color="primary"
                          />
                        }
                        label="Include Data Tables"
                      />
                    </Grid>
                  </Grid>
                </FormGroup>
              </Paper>
            </Box>
  
            {/* Selected Report Type Description */}
            {selectedReportTypeObj && (
              <Box
                sx={{
                  mt: 3,
                  p: 2,
                  borderRadius: 1,
                  bgcolor: alpha(category.color, 0.1),
                  border: `1px solid ${alpha(category.color, 0.2)}`,
                  display: "flex",
                  alignItems: "flex-start",
                }}
              >
                <HelpOutline sx={{ mr: 1, color: category.color, mt: 0.5 }} />
                <Box>
                  <Typography variant="subtitle2" sx={{ color: category.color }}>
                    {selectedReportTypeObj.label}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {selectedReportTypeObj.description}
                  </Typography>
                </Box>
              </Box>
            )}
  
            {/* Download Button */}
            <Box sx={{ mt: 4, display: "flex", justifyContent: "center" }}>
              <Button
                variant="contained"
                size="large"
                startIcon={<CloudDownload />}
                onClick={handleDownloadReport}
                disabled={loading}
                sx={{
                  bgcolor: category.color,
                  color: "#fff",
                  px: 4,
                  py: 1.5,
                  "&:hover": {
                    bgcolor: alpha(category.color, 0.8),
                  },
                }}
              >
                Generate Management Report
              </Button>
            </Box>
          </Paper>
  
          {/* Information Section */}
          <Paper
            elevation={0}
            sx={{
              p: 3,
              borderRadius: 2,
              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
            }}
          >
            <Typography variant="h6" sx={{ mb: 2 }}>
              Available Report Types
            </Typography>
  
            <Box sx={{ mb: 3 }}>
              {reportTypeOptions.map((type, index) => (
                <React.Fragment key={type.id}>
                  <Box sx={{ display: "flex", py: 1.5 }}>
                    <Box sx={{ minWidth: 120 }}>
                      <Chip
                        label={type.label}
                        size="small"
                        sx={{
                          bgcolor: alpha(category.color, 0.1),
                          color: category.color,
                          fontWeight: 500,
                        }}
                      />
                    </Box>
                    <Typography variant="body2" color="text.secondary">
                      {type.description}
                    </Typography>
                  </Box>
                  {index < reportTypeOptions.length - 1 && <Divider />}
                </React.Fragment>
              ))}
            </Box>
  
            <Typography variant="body2" color="text.secondary">
              Management reports provide customized analysis for internal
              decision-making, strategy development, and performance assessment.
              These reports can be tailored to specific needs with various
              visualization options and data granularity levels.
            </Typography>
          </Paper>
        </Box>
  
        {/* Snackbar for notifications */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleSnackbarClose}
          anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
        >
          <Alert
            onClose={handleSnackbarClose}
            severity={snackbar.severity}
            sx={{ width: "100%" }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </div>
    );
  };
  
  export default ManagementReportCard;

======================================================================

DOSYA: src\components\reports\RegulatoryReportCard.js
==================================================
// src/components/reports/RegulatoryReportCard.js
import {
  ArrowBack,
  AssignmentOutlined,
  CloudDownload,
  InfoOutlined,
} from "@mui/icons-material";
import {
  Box,
  Button,
  FormControl,
  FormHelperText,
  Grid,
  InputLabel,
  MenuItem,
  Paper,
  Stack,
  Typography,
  Alert,
  alpha,
  useTheme,
  Snackbar,
  Select,
} from "@mui/material";
import React, { useState } from "react";

const reportTypeOptions = [
  {
    id: "spk",
    label: "SPK Report",
    description: "Banking Regulation & Supervision Agency Report",
  },
  {
    id: "bddk",
    label: "BDDK Report",
    description: "Capital Markets Board Regulatory Report",
  },
];

// Mock data for cash flows
const mockCashFlows = [
  { method_code: "cf001", name: "Cash Flow 1" },
  { method_code: "cf002", name: "Cash Flow 2" },
  { method_code: "cf003", name: "Cash Flow 3" },
];

const RegulatoryReportCard = ({ onBack, category }) => {
  const theme = useTheme();

  // Component state
  const [selectedCashFlow, setSelectedCashFlow] = useState("");
  const [selectedReportType, setSelectedReportType] = useState("");
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [loadingExport, setLoadingExport] = useState(false);
  const [cashFlows, setCashFlows] = useState(mockCashFlows);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "info",
  });

  // Simulate fetch cash flows on component mount
  React.useEffect(() => {
    setLoading(true);
    // Simulate API call
    setTimeout(() => {
      setCashFlows(mockCashFlows);
      setLoading(false);
    }, 500);
  }, []);

  // Handle cash flow selection
  const handleCashFlowChange = (event) => {
    setSelectedCashFlow(event.target.value);
    if (formErrors.cashFlow) {
      setFormErrors({ ...formErrors, cashFlow: "" });
    }
  };

  // Handle report type selection
  const handleReportTypeChange = (event) => {
    setSelectedReportType(event.target.value);
    if (formErrors.reportType) {
      setFormErrors({ ...formErrors, reportType: "" });
    }
  };

  // Handle snackbar close
  const handleSnackbarClose = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  // Show snackbar
  const showSnackbar = (message, severity = "info") => {
    setSnackbar({
      open: true,
      message,
      severity,
    });
  };

  // Function to download PDF file
  const downloadPdf = () => {
    // Path to the PDF file in public folder
    const pdfUrl = "/assets/reports/Arzum BSS report.pdf";
    
    // Create a link element to trigger download
    const link = document.createElement('a');
    link.href = pdfUrl;
    link.download = "Arzum BSS Report.pdf"; // Set the download filename
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Handle form submission (download report)
  const handleDownloadReport = () => {
    // Validate form
    const errors = {};
    if (!selectedCashFlow) {
      errors.cashFlow = "Please select a cash flow";
    }
    if (!selectedReportType) {
      errors.reportType = "Please select a report type";
    }

    // If there are errors, update state and return
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    // Simulate download
    setLoadingExport(true);
    setTimeout(() => {
      downloadPdf();
      setLoadingExport(false);
      showSnackbar(
        `Regulatory ${selectedReportType.toUpperCase()} report downloaded successfully`,
        "success"
      );
    }, 1500);
  };

  // Get the selected report type object for display
  const selectedReportTypeObj = reportTypeOptions.find(
    (type) => type.id === selectedReportType
  );

  return (
    <div style={{ opacity: 1, transition: 'opacity 0.3s' }}>
      <Box>
        {/* Header with back button */}
        <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
          <Button
            variant="outlined"
            startIcon={<ArrowBack />}
            onClick={onBack}
            style={{
              color: category.color,
              borderColor: category.color,
              marginRight: 16,
            }}
          >
            Back
          </Button>

          <Box sx={{ display: "flex", alignItems: "center" }}>
            <AssignmentOutlined
              sx={{
                mr: 2,
                color: category.color,
                fontSize: 28,
              }}
            />
            <Typography variant="h5" component="h2" fontWeight="500">
              Regulatory Reports
            </Typography>
          </Box>
        </Box>

        {/* Form Area */}
        <Paper
          elevation={0}
          sx={{
            p: 3,
            borderRadius: 2,
            mb: 3,
            border: `1px solid ${alpha(category.color, 0.2)}`,
            bgcolor: alpha(category.color, 0.03),
          }}
        >
          <Typography variant="body1" paragraph>
            Generate standardized regulatory reports for compliance submissions
            based on selected cash flow data.
          </Typography>

          <Grid container spacing={3}>
            {/* Cash Flow Selection */}
            <Grid item xs={12} md={6}>
              <FormControl
                fullWidth
                error={!!formErrors.cashFlow}
                disabled={loading}
              >
                <InputLabel id="cash-flow-select-label">Cash Flow</InputLabel>
                <Select
                  labelId="cash-flow-select-label"
                  id="cash-flow-select"
                  value={selectedCashFlow}
                  label="Cash Flow"
                  onChange={handleCashFlowChange}
                >
                  {loading ? (
                    <MenuItem disabled>Loading cash flows...</MenuItem>
                  ) : cashFlows.length === 0 ? (
                    <MenuItem disabled>No cash flows available</MenuItem>
                  ) : (
                    cashFlows.map((cf) => (
                      <MenuItem key={cf.method_code} value={cf.method_code}>
                        {cf.name || cf.method_code}
                      </MenuItem>
                    ))
                  )}
                </Select>
                {formErrors.cashFlow && (
                  <FormHelperText>{formErrors.cashFlow}</FormHelperText>
                )}
              </FormControl>
            </Grid>

            {/* Report Type Selection */}
            <Grid item xs={12} md={6}>
              <FormControl fullWidth error={!!formErrors.reportType}>
                <InputLabel id="report-type-select-label">
                  Report Type
                </InputLabel>
                <Select
                  labelId="report-type-select-label"
                  id="report-type-select"
                  value={selectedReportType}
                  label="Report Type"
                  onChange={handleReportTypeChange}
                >
                  {reportTypeOptions.map((type) => (
                    <MenuItem key={type.id} value={type.id}>
                      {type.label}
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.reportType && (
                  <FormHelperText>{formErrors.reportType}</FormHelperText>
                )}
              </FormControl>
            </Grid>
          </Grid>

          {/* Selected Report Type Description */}
          {selectedReportTypeObj && (
            <Box
              sx={{
                mt: 3,
                p: 2,
                borderRadius: 1,
                bgcolor: alpha(theme.palette.info.main, 0.07),
                border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                display: "flex",
                alignItems: "flex-start",
              }}
            >
              <InfoOutlined sx={{ mr: 1, color: theme.palette.info.main }} />
              <Typography variant="body2" color="text.secondary">
                <strong>{selectedReportTypeObj.label}:</strong>{" "}
                {selectedReportTypeObj.description}
              </Typography>
            </Box>
          )}

          {/* Download Button */}
          <Box sx={{ mt: 4, display: "flex", justifyContent: "center" }}>
            <Button
              variant="contained"
              size="large"
              startIcon={<CloudDownload />}
              onClick={handleDownloadReport}
              disabled={loading || loadingExport}
              sx={{
                bgcolor: category.color,
                color: "#fff",
                px: 4,
                py: 1.5,
                "&:hover": {
                  bgcolor: alpha(category.color, 0.8),
                },
              }}
            >
              {loadingExport ? "Generating Report..." : "Download Report"}
            </Button>
          </Box>
        </Paper>

        {/* Information Section */}
        <Paper
          elevation={0}
          sx={{
            p: 3,
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
          }}
        >
          <Typography variant="h6" sx={{ mb: 2 }}>
            About Regulatory Reports
          </Typography>

          <Stack spacing={2}>
            <Typography variant="body2" color="text.secondary">
              Regulatory reports provide standardized information to regulatory
              bodies in compliance with financial regulations and transparency
              requirements.
            </Typography>

            <Typography variant="body2" color="text.secondary">
              <strong>SPK Reports:</strong> Designed for Banking Regulation &
              Supervision Agency submissions, these reports focus on liquidity
              metrics, asset quality, and risk exposure.
            </Typography>

            <Typography variant="body2" color="text.secondary">
              <strong>BDDK Reports:</strong> Created for Capital Markets Board
              regulatory compliance, these reports emphasize investor protection
              metrics, pricing transparency, and market stability factors.
            </Typography>
          </Stack>
        </Paper>
      </Box>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          onClose={handleSnackbarClose}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </div>
  );
};

export default RegulatoryReportCard;

======================================================================

DOSYA: src\components\reports\ReportsModule.js
==================================================
// src/components/reports/ReportsModule.js
import {
    ArrowForwardIos,
    Description,
    DocumentScanner,
    InsertDriveFile,
    NavigateNext,
    ReceiptLong,
  } from "@mui/icons-material";
  import {
    Alert,
    Box,
    Button,
    Card,
    CardActionArea,
    CardContent,
    FormControl,
    Grid,
    InputLabel,
    MenuItem,
    Paper,
    Select,
    Typography,
    alpha,
    useTheme,
    Snackbar,
  } from "@mui/material";
  import React, { useEffect, useState } from "react";
  
  // Report card configuration
  const reportCards = [
    {
      id: "regulatory",
      title: "Regulatory Report",
      description: "Generate compliance reports for regulatory authorities",
      icon: <DocumentScanner />,
      color: "#1976d2", // Blue
      options: [
        { value: "spk", label: "SPK Report" },
        { value: "bddk", label: "BDDK Report" },
      ],
    },
    {
      id: "investor",
      title: "Investor Report",
      description: "Create detailed performance reports for investors",
      icon: <InsertDriveFile />,
      color: "#2e7d32", // Green
      options: [
        { value: "monthly", label: "Monthly Performance" },
        { value: "quarterly", label: "Quarterly Overview" },
      ],
    },
    {
      id: "management",
      title: "Management Report",
      description: "Comprehensive analytics for management decisions",
      icon: <ReceiptLong />,
      color: "#ed6c02", // Orange
      options: [
        { value: "executive", label: "Executive Summary" },
        { value: "financial", label: "Financial Analysis" },
      ],
    },
  ];
  
  // Mock data for cash flows (replace with your actual data fetching)
  const mockCashFlows = [
    { method_code: "cf001", name: "Cash Flow 1" },
    { method_code: "cf002", name: "Cash Flow 2" },
    { method_code: "cf003", name: "Cash Flow 3" },
  ];
  
  const ReportsModule = ({ onSelectReport }) => {
    const theme = useTheme();
    const [selectedReport, setSelectedReport] = useState(null);
    const [cashFlowId, setCashFlowId] = useState("");
    const [reportType, setReportType] = useState("");
    const [loading, setLoading] = useState(false);
    const [loadingExport, setLoadingExport] = useState(false);
    const [cashFlows, setCashFlows] = useState(mockCashFlows);
    const [snackbar, setSnackbar] = useState({
      open: false,
      message: "",
      severity: "info"
    });
  
    // Simulate fetch cash flows when component mounts
    useEffect(() => {
      setLoading(true);
      // Simulate API call
      setTimeout(() => {
        setCashFlows(mockCashFlows);
        setLoading(false);
      }, 500);
    }, []);
  
    const handleReportSelect = (reportId) => {
      // If onSelectReport prop exists (used in ReportsPage), call it
      if (onSelectReport) {
        onSelectReport(reportId);
        return;
      }
      
      // Otherwise use internal state (for backwards compatibility)
      setSelectedReport(reportId);
      setCashFlowId("");
      setReportType("");
    };
  
    const handleBack = () => {
      setSelectedReport(null);
      setCashFlowId("");
      setReportType("");
    };
  
    const handleSnackbarClose = () => {
      setSnackbar({...snackbar, open: false});
    };
  
    const showSnackbar = (message, severity = "info") => {
      setSnackbar({
        open: true,
        message,
        severity
      });
    };
  
    const handleDownload = () => {
      if (!cashFlowId || !reportType) {
        showSnackbar("Please select both a Cash Flow and Report Type", "warning");
        return;
      }
  
      const selectedCard = reportCards.find((card) => card.id === selectedReport);
      const reportName = selectedCard?.title || "Report";
      const reportTypeLabel = selectedCard?.options.find(
        (opt) => opt.value === reportType
      )?.label;
  
      // Simulate download
      setLoadingExport(true);
      setTimeout(() => {
        setLoadingExport(false);
        showSnackbar(`${reportName} (${reportTypeLabel}) has been downloaded`, "success");
      }, 1500);
    };
  
    // Render content based on selection
    const renderContent = () => {
      if (selectedReport) {
        // If a report type is selected, render the report form
        const selectedCard = reportCards.find(
          (card) => card.id === selectedReport
        );
  
        return (
          <Box>
            <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
              {React.cloneElement(selectedCard.icon, {
                sx: { mr: 2, color: selectedCard.color, fontSize: 30 },
              })}
              <Typography variant="h5" component="h2" fontWeight="500">
                {selectedCard.title}
              </Typography>
            </Box>
  
            <Typography variant="body1" color="text.secondary" paragraph>
              {selectedCard.description}
            </Typography>
  
            <Alert severity="info" sx={{ mb: 3 }}>
              Select a Cash Flow and Report Type to generate your report
            </Alert>
  
            <Grid container spacing={3}>
              <Grid item xs={12} md={5}>
                <FormControl fullWidth>
                  <InputLabel id="cash-flow-select-label">
                    Select Cash Flow
                  </InputLabel>
                  <Select
                    labelId="cash-flow-select-label"
                    id="cash-flow-select"
                    value={cashFlowId}
                    onChange={(e) => setCashFlowId(e.target.value)}
                    label="Select Cash Flow"
                    disabled={loading}
                  >
                    <MenuItem value="">
                      <em>Select a Cash Flow</em>
                    </MenuItem>
                    {loading ? (
                      <MenuItem disabled>Loading cash flows...</MenuItem>
                    ) : cashFlows.length === 0 ? (
                      <MenuItem disabled>No cash flows available</MenuItem>
                    ) : (
                      cashFlows.map((cf) => (
                        <MenuItem key={cf.method_code} value={cf.method_code}>
                          {cf.name || cf.method_code}
                        </MenuItem>
                      ))
                    )}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={5}>
                <FormControl fullWidth>
                  <InputLabel id="report-type-select-label">
                    Report Type
                  </InputLabel>
                  <Select
                    labelId="report-type-select-label"
                    id="report-type-select"
                    value={reportType}
                    onChange={(e) => setReportType(e.target.value)}
                    label="Report Type"
                  >
                    <MenuItem value="">
                      <em>Select a Report Type</em>
                    </MenuItem>
                    {selectedCard.options.map((option) => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={2} display={"flex"}>
                <Button
                  variant="contained"
                  onClick={handleDownload}
                  startIcon={<Description />}
                  disabled={!cashFlowId || !reportType || loadingExport}
                  sx={{
                    width: "100%",
                    bgcolor: selectedCard.color,
                    "&:hover": {
                      bgcolor: alpha(selectedCard.color, 0.8),
                    },
                  }}
                >
                  {loadingExport ? "Generating..." : "Generate Report"}
                </Button>
              </Grid>
              <Grid item xs={12} sx={{ mt: 2, display: "flex", gap: 2 }}>
                <Button
                  variant="outlined"
                  onClick={handleBack}
                  startIcon={
                    <ArrowForwardIos sx={{ transform: "rotate(180deg)" }} />
                  }
                >
                  Back
                </Button>
              </Grid>
            </Grid>
          </Box>
        );
      } else {
        // If no report is selected, render the report cards
        return (
          <Box>
            <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
              <Description
                sx={{ mr: 2, color: theme.palette.primary.main, fontSize: 30 }}
              />
              <Typography variant="h5" component="h2" fontWeight="500">
                Available Reports
              </Typography>
            </Box>
  
            <Typography variant="body1" color="text.secondary" paragraph>
              Select a report type to generate and download formatted documents
              for compliance, investor relations, or management decision-making.
            </Typography>
  
            <Grid container spacing={3}>
              {reportCards.map((card) => (
                <Grid item xs={12} sm={6} md={4} key={card.id}>
                  <Card
                    sx={{
                      height: "100%",
                      boxShadow: theme.shadows[2],
                      transition: "all 0.3s ease-in-out",
                      "&:hover": {
                        boxShadow: theme.shadows[8],
                        transform: "translateY(-5px)",
                      },
                      border: `1px solid ${alpha(card.color, 0.3)}`,
                    }}
                  >
                    <CardActionArea
                      onClick={() => handleReportSelect(card.id)}
                      sx={{ height: "100%" }}
                    >
                      <CardContent sx={{ p: 3, height: "100%" }}>
                        <Box
                          sx={{
                            display: "flex",
                            alignItems: "center",
                            mb: 2,
                            pb: 1.5,
                            borderBottom: `1px solid ${alpha(
                              theme.palette.divider,
                              0.5
                            )}`,
                          }}
                        >
                          {React.cloneElement(card.icon, {
                            sx: {
                              mr: 1.5,
                              color: card.color,
                              backgroundColor: alpha(card.color, 0.1),
                              p: 0.7,
                              borderRadius: "50%",
                            },
                          })}
                          <Typography variant="h6" component="h3">
                            {card.title}
                          </Typography>
                        </Box>
                        <Typography variant="body2" color="text.secondary">
                          {card.description}
                        </Typography>
                        <Box
                          sx={{
                            mt: 2,
                            pt: 1.5,
                            borderTop: `1px solid ${alpha(
                              theme.palette.divider,
                              0.3
                            )}`,
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "space-between",
                          }}
                        >
                          <Typography variant="caption" color="text.secondary">
                            {card.options.length} report{" "}
                            {card.options.length !== 1 ? "types" : "type"}
                          </Typography>
                          <NavigateNext fontSize="small" color="action" />
                        </Box>
                      </CardContent>
                    </CardActionArea>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Box>
        );
      }
    };
  
    return (
      <Box sx={{ position: "relative" }}>
        {/* Main content area */}
        <Paper
          elevation={0}
          sx={{
            p: 3,
            borderRadius: 2,
            boxShadow: theme.shadows[1],
            border: selectedReport
              ? `1px solid ${alpha(
                reportCards.find((card) => card.id === selectedReport)?.color ||
                theme.palette.primary.main,
                0.2
              )}`
              : `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
          }}
        >
          {renderContent()}
        </Paper>
        
        {/* Snackbar for notifications */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleSnackbarClose}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert 
            onClose={handleSnackbarClose} 
            severity={snackbar.severity} 
            sx={{ width: '100%' }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    );
  };
  
  export default ReportsModule;

======================================================================

DOSYA: src\contexts\DataContext.js
==================================================
/* -----------------------------------------------------------
 *  Global state & helpers (React Context)
 * --------------------------------------------------------- */

import React, {
  createContext,
  useContext,
  useEffect,
  useState,
} from 'react';

const DataContext = createContext();
export const useData = () => useContext(DataContext);

/* localStorage parse â€“ prevents "undefined" errors */
const safeParse = (key, fallback) => {
  try {
    const raw = localStorage.getItem(key);
    return raw ? JSON.parse(raw) : fallback;
  } catch {
    localStorage.removeItem(key);
    return fallback;
  }
};

/* -----------------------------------------------------------
 *              DEFAULT SETTINGS
 * --------------------------------------------------------- */
const DEFAULT_SETTINGS = {
  previous: {
    generalSettings: {
      start_date: new Date(2025, 3, 28),
      operational_expenses: 3_355_345,
      min_buffer: 5,
    },
    tranchesA: [
      { maturity_days: 88, base_rate: 51, spread: 0, reinvest_rate: 46, nominal: 85_000_000 },
      { maturity_days: 150, base_rate: 50.5, spread: 0, reinvest_rate: 42, nominal: 158_300_000 },
    ],
    trancheB: {
      maturity_days: 155,
      base_rate: 0,
      spread: 0,
      reinvest_rate: 42,
      /* nominal empty â€“ will be filled when optimization comes */
      class_b_percent: 5
    }
  },
  new: {
    generalSettings: {
      start_date: new Date(2025, 3, 28), // April 16, 2025
      operational_expenses: 3_355_345,
      min_buffer: 5,
    },
    tranchesA: [
      { maturity_days: 155, base_rate: 50.75, spread: 0, reinvest_rate: 42.0, nominal: 250_200_000 },
    ],
    trancheB: {
      maturity_days: 155,
      base_rate: 0,
      spread: 0,
      reinvest_rate: 42.0,
      // For new default settings, Class B percentage should be 5%
      class_b_percent: 5 // Will be used to calculate nominal dynamically
    }
  }
};

/* Default stress test scenarios */
const DEFAULT_STRESS_SCENARIOS = {
  base: {
    name: "Base",
    npl_rate: 1.5,
    prepayment_rate: 30,
    reinvestment_shift: 0
  },
  moderate: {
    name: "Moderate",
    npl_rate: 3,
    prepayment_rate: 15,
    reinvestment_shift: -3
  },
  severe: {
    name: "Severe",
    npl_rate: 5,
    prepayment_rate: 10,
    reinvestment_shift: -5
  },
  extreme: {
    name: "Extreme",
    npl_rate: 7,
    prepayment_rate: 5,
    reinvestment_shift: -10
  }
};

/* -----------------------------------------------------------
 *              <DataProvider>
 * --------------------------------------------------------- */
export const DataProvider = ({ children }) => {
  /* ------------------- Core flags ------------------ */
  const [cashFlowData, setCashFlowData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedDefaults, setSelectedDefaults] = useState(() => 
    localStorage.getItem('selectedDefaults') || 'previous'
  );

  /* ---------------- Form defaults ------------------ */
  const [generalSettings, setGeneralSettings] = useState(() => 
    safeParse('generalSettings', DEFAULT_SETTINGS[selectedDefaults].generalSettings)
  );
  
  const [tranchesA, setTranchesA] = useState(() => 
    safeParse('tranchesA', DEFAULT_SETTINGS[selectedDefaults].tranchesA)
  );
  
  const [trancheB, setTrancheB] = useState(() => 
    safeParse('trancheB', DEFAULT_SETTINGS[selectedDefaults].trancheB)
  );

  const [npvSettings, setNpvSettings] = useState({
    method: 'weighted_avg_rate',
    custom_rate: 40,
  });

  /* ---------------- Optimization defaults ------------------ */
  const [optimizationSettings, setOptimizationSettings] = useState({
    optimization_method: 'classic',
    a_tranches_range: [2, 6],
    maturity_range: [32, 180],
    maturity_step: 5,
    min_class_b_percent: 5,
    target_class_b_coupon_rate: 50,
    additional_days_for_class_b: 3,
    population_size: 50,
    num_generations: 40,
  });

  /* ---------------- Stress Test state ------------------ */
  const [stressTestResults, setStressTestResults] = useState(() =>
    safeParse('stressTestResults', null)
  );
  
  const [stressScenarios, setStressScenarios] = useState(() =>
    safeParse('stressScenarios', DEFAULT_STRESS_SCENARIOS)
  );
  
  const [stressTestHistory, setStressTestHistory] = useState(() =>
    safeParse('stressTestHistory', [])
  );

  /* -------------- originals for <Reset> -------------- */
  const [origA, setOrigA] = useState(null);
  const [origB, setOrigB] = useState(null);
  useEffect(() => {
    if (!origA) setOrigA(JSON.parse(JSON.stringify(tranchesA)));
    if (!origB) setOrigB(JSON.parse(JSON.stringify(trancheB)));
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  /* ------------------ Stored results ---------------- */
  const [calculationResults, setCalculationResults] = useState(() =>
    safeParse('calculationResults', null),
  );
  const [optimizationResults, setOptimizationResults] = useState(() =>
    safeParse('optimizationResults', null),
  );
  const [previousCalculationResults, setPreviousCalc] = useState(() =>
    safeParse('previousCalculationResults', null),
  );
  const [savedResults, setSavedResults] = useState(() =>
    safeParse('savedResults', []),
  );
  const [multipleComparisonResults, setMultiResults] = useState(() =>
    safeParse('multipleComparisonResults', []),
  );

  /* -------------- Default settings selection -------------- */
  // Update everything when default settings change
  useEffect(() => {
    localStorage.setItem('selectedDefaults', selectedDefaults);
    setGeneralSettings(DEFAULT_SETTINGS[selectedDefaults].generalSettings);
    setTranchesA(DEFAULT_SETTINGS[selectedDefaults].tranchesA);
    
    // Make a deep copy of the tranche B
    const newTrancheB = JSON.parse(JSON.stringify(DEFAULT_SETTINGS[selectedDefaults].trancheB));
    
    // If it's the new model, calculate and set Class B nominal based on percentage
    if (selectedDefaults === 'new' && newTrancheB.class_b_percent) {
      // Calculate total Class A nominal
      const totalClassANominal = DEFAULT_SETTINGS[selectedDefaults].tranchesA.reduce(
        (sum, tranche) => sum + tranche.nominal, 0
      );
      
      // Calculate Class B nominal using the formula:
      // class_b_nominal = totalClassANominal * (classBPercent / (100 - classBPercent))
      const classBPercent = newTrancheB.class_b_percent;
      const b_percent = classBPercent / 100;
      let b_nominal = (totalClassANominal * b_percent) / (1 - b_percent);
      
      // Round to nearest 1000
      b_nominal = Math.round(b_nominal / 1000) * 1000;
      
      // Set the calculated nominal
      newTrancheB.nominal = b_nominal;
      
      console.log(`Using new model with 10% Class B. Total Class A: ${totalClassANominal}, Class B nominal: ${b_nominal}`);
    }
    
    setTrancheB(newTrancheB);
    
    // Update originals for reset functionality
    setOrigA(JSON.parse(JSON.stringify(DEFAULT_SETTINGS[selectedDefaults].tranchesA)));
    setOrigB(JSON.parse(JSON.stringify(newTrancheB)));
  }, [selectedDefaults]);

  /* -------------- localStorage wrappers -------------- */
  const wrapLocal = (setter, key) => (val) => {
    setter(val);
    if (val && (Array.isArray(val) ? val.length : true))
      localStorage.setItem(key, JSON.stringify(val));
    else localStorage.removeItem(key);
  };

  const setCalcResLS   = wrapLocal(setCalculationResults, 'calculationResults');
  const setOptResLS    = wrapLocal(setOptimizationResults, 'optimizationResults');
  const setPrevCalcLS  = wrapLocal(setPreviousCalc, 'previousCalculationResults');
  const setSavedResLS  = wrapLocal(setSavedResults, 'savedResults');
  const setMultiResLS  = wrapLocal(setMultiResults, 'multipleComparisonResults');
  const setStressResLS = wrapLocal(setStressTestResults, 'stressTestResults');
  const setStressScenLS = wrapLocal(setStressScenarios, 'stressScenarios');
  const setStressHistLS = wrapLocal(setStressTestHistory, 'stressTestHistory');

  /* ---------------------- helpers -------------------- */
  const saveResult = (result, name, methodType) => {
    if (!result) return false;
    const stamped = {
      ...result,
      id: Date.now().toString(),
      savedName: name,
      timestamp: new Date().toISOString(),
      methodType: methodType || result.method_type || 'manual',
    };
    setSavedResLS([...savedResults, stamped]);
    return true;
  };
  
  const saveStressTestResult = (result, scenarioName, structureId) => {
    if (!result) return false;
    const stamped = {
      ...result,
      id: Date.now().toString(),
      scenarioName: scenarioName,
      structureId: structureId,
      timestamp: new Date().toISOString(),
    };
    setStressHistLS([...stressTestHistory, stamped]);
    return true;
  };
  
  const deleteStressTestResult = (id) => 
    setStressHistLS(stressTestHistory.filter(r => r.id !== id));
  
  const clearStressTestHistory = () => 
    setStressHistLS([]);
    
  const deleteSavedResult  = (id) => setSavedResLS(savedResults.filter(r => r.id !== id));
  const clearSavedResults  = () => setSavedResLS([]);
  const clearComparisonData = () => setMultiResLS([]);

  const resetToDefaults = () => {
    if (origA && origB) {
      setTranchesA(JSON.parse(JSON.stringify(origA)));
      setTrancheB(JSON.parse(JSON.stringify(origB)));
      return true;
    }
    return false;
  };

  const clearData = () => {
    setCashFlowData(null);
    setCalcResLS(null);
    setOptResLS(null);
    setError(null);
  };

  /* ---------- request constructors ---------- */
  const createCalculationRequest = () => {
    // Check if we're using the new default settings with Class B percentage
    const isNewDefault = selectedDefaults === 'new';
    const classBPercent = isNewDefault && trancheB.class_b_percent ? trancheB.class_b_percent : null;
    
    // Calculate Class B nominal if percentage is provided
    let modifiedTrancheB = { ...trancheB };
    
    if (classBPercent) {
      // Calculate total Class A nominal
      const totalClassANominal = tranchesA.reduce((sum, tranche) => sum + tranche.nominal, 0);
      
      // Calculate Class B nominal using the formula:
      // class_b_nominal = totalClassANominal * (classBPercent / (100 - classBPercent))
      const b_percent = classBPercent / 100;
      let b_nominal = (totalClassANominal * b_percent) / (1 - b_percent);
      
      // Round to nearest 1000
      b_nominal = Math.round(b_nominal / 1000) * 1000;
      
      // Set the calculated nominal
      modifiedTrancheB.nominal = b_nominal;
    }
    
    return {
      general_settings: {
        start_date: generalSettings.start_date.toISOString().split('T')[0],
        operational_expenses: generalSettings.operational_expenses,
        min_buffer: generalSettings.min_buffer,
      },
      tranches_a: tranchesA,
      tranche_b: modifiedTrancheB,
      npv_settings: npvSettings,
    };
  };

  const createOptimizationRequest = () => ({
    optimization_settings: optimizationSettings,
    general_settings: {
      start_date: generalSettings.start_date.toISOString().split('T')[0],
      operational_expenses: generalSettings.operational_expenses,
      min_buffer: generalSettings.min_buffer,
    },
    selected_default_model: selectedDefaults
  });

  const createStressTestRequest = (structure, scenario) => {
    // Get structure details
    const structureDetails = typeof structure === 'string' ? 
      savedResults.find(r => r.id === structure) : structure;
      
    if (!structureDetails) {
      throw new Error("Structure not found");
    }
    
    // Format structure for API
    const formattedStructure = {
      start_date: structureDetails.start_date ||
                 (structureDetails.general_settings?.start_date instanceof Date ? 
                  structureDetails.general_settings.start_date.toISOString().split('T')[0] :
                  structureDetails.general_settings?.start_date),
      a_maturities: [],
      a_base_rates: [],
      a_spreads: [],
      a_reinvest_rates: [],
      a_nominals: [],
      b_maturity: structureDetails.tranche_b?.maturity_days || 180,
      b_base_rate: structureDetails.tranche_b?.base_rate || 0,
      b_spread: structureDetails.tranche_b?.spread || 0,
      b_reinvest_rate: structureDetails.tranche_b?.reinvest_rate || 0,
      b_nominal: structureDetails.tranche_b?.nominal || 0,
      ops_expenses: Number(structureDetails.general_settings?.operational_expenses || 0)
    };
    
    // Properly extract Class A tranches data
    if (Array.isArray(structureDetails.tranches_a)) {
      structureDetails.tranches_a.forEach(tranche => {
        formattedStructure.a_maturities.push(Number(tranche.maturity_days));
        formattedStructure.a_base_rates.push(Number(tranche.base_rate));
        formattedStructure.a_spreads.push(Number(tranche.spread));
        formattedStructure.a_reinvest_rates.push(Number(tranche.reinvest_rate));
        formattedStructure.a_nominals.push(Number(tranche.nominal));
      });
    }
    
    // Return complete request
    return {
      structure: formattedStructure,
      scenario: scenario
    };
  };

  /* ---------------- context value ------------------- */
  const value = {
    /* raw data */
    cashFlowData,
    setCashFlowData,
    isLoading,
    setIsLoading,
    error,
    setError,

    /* form state */
    generalSettings,
    setGeneralSettings,
    tranchesA,
    setTranchesA,
    trancheB,
    setTrancheB,
    npvSettings,
    setNpvSettings,

    /* default settings selection */
    selectedDefaults,
    setSelectedDefaults,
    defaultOptions: Object.keys(DEFAULT_SETTINGS),

    /* optimization settings */
    optimizationSettings,
    setOptimizationSettings,
    
    /* stress test settings */
    stressTestResults,
    setStressTestResults: setStressResLS,
    stressScenarios,
    setStressScenarios: setStressScenLS,
    stressTestHistory,
    setStressTestHistory: setStressHistLS,
    saveStressTestResult,
    deleteStressTestResult,
    clearStressTestHistory,

    /* results */
    calculationResults,
    setCalculationResults: setCalcResLS,
    optimizationResults,
    setOptimizationResults: setOptResLS,
    previousCalculationResults,
    setPreviousCalculationResults: setPrevCalcLS,

    /* saved / comparison */
    savedResults,
    setSavedResults: setSavedResLS,
    saveResult,
    deleteSavedResult,
    clearSavedResults,
    multipleComparisonResults,
    setMultipleComparisonResults: setMultiResLS,
    clearComparisonData,

    /* misc helpers */
    resetToDefaults,
    clearData,
    createCalculationRequest,
    createOptimizationRequest,
    createStressTestRequest,
  };

  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;
};

======================================================================

DOSYA: src\pages\CalculationPage.js
==================================================
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Tabs,
  Tab,
  Button,
  Alert,
  CircularProgress,
  Snackbar,
  IconButton,
  Tooltip,
  Divider,
  Grid,
  Chip,
  alpha,
  useTheme
} from '@mui/material';
import CalculateIcon from '@mui/icons-material/Calculate';
import CompareIcon from '@mui/icons-material/Compare';
import ReplayIcon from '@mui/icons-material/Replay';
import ReceiptLongIcon from '@mui/icons-material/ReceiptLong';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';

import { useData } from '../contexts/DataContext';
import { calculateResults } from '../services/apiService';

import GeneralSettingsForm from '../components/calculation/GeneralSettingsForm';
import TrancheAForm from '../components/calculation/TrancheAForm';
import TrancheBForm from '../components/calculation/TrancheBForm';
import ClassBCouponAdjuster from '../components/calculation/ClassBCouponAdjuster';
import DefaultSettingsSelector from '../components/calculation/DefaultSettingsSelector';
import CalculationResults from './CalculationResults';
import InterestRatesTable from '../components/calculation/InterestRatesTable';

import { useNavigate } from 'react-router-dom';

const CalculationPage = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const {
    cashFlowData,
    calculationResults,
    setCalculationResults,
    isLoading,
    setIsLoading,
    error,
    setError,
    createCalculationRequest,
    previousCalculationResults,
    resetToDefaults,
    multipleComparisonResults,
    setMultipleComparisonResults,
  } = useData();

  const [tabValue, setTabValue] = useState(0);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success',
  });
  const [optimizationData, setOptimizationData] = useState(null);

  /* ------------- Autoâ€‘calculate after optimization ------------- */
  useEffect(() => {
    const stored = sessionStorage.getItem('optimizationData');
    if (stored) {
      try {
        const parsed = JSON.parse(stored);
        setOptimizationData(parsed);
        handleCalculate(parsed); // pass optimization data
      } catch (e) {
        console.error('Cannot parse optimizationData:', e);
      } finally {
        sessionStorage.removeItem('optimizationData');
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  /* ---------------------- Handlers ---------------------- */
  const handleTabChange = (_, nv) => setTabValue(nv);

  const handleCalculate = async (optData = optimizationData) => {
    try {
      setIsLoading(true);
      setError(null);

      const req = createCalculationRequest();

      /* pass optimization meta (optional) */
      if (optData) {
        req.is_optimized = true;
        req.optimization_method = optData.optimization_method;
      }

      console.log('Calculation request:', req);

      const res = await calculateResults(req, optData); // 2. parametre opsiyonel!
      console.log('Calculation response:', res);

      /* label & metadata */
      if (!res.is_optimized) {
        res.label = 'Manual Calculation';
        res.method_type = 'manual';
      } else {
        const map = {
          classic: 'Standard Optimization',
          genetic: 'Evolutionary Algorithm',
          equal: 'Equal Distribution',
          increasing: 'Increasing by Maturity',
          decreasing: 'Decreasing by Maturity',
          middle_weighted: 'Middle Weighted',
        };
        const mName = res.optimization_method || 'optimized';
        res.label = `${map[mName] || mName} Optimization`;
        res.method_type = mName === 'genetic' ? 'genetic' : 'standard';
      }
      res.timestamp = new Date().toISOString();

      setCalculationResults(res);
      setTabValue(1);

      /* comparison buffer (max 5) */
      setMultipleComparisonResults((prev) => {
        const up = prev ? [...prev] : [];
        const idx = up.findIndex((r) => r.method_type === res.method_type);
        if (idx >= 0) up[idx] = { ...res };
        else {
          if (up.length >= 5) up.shift();
          up.push({ ...res });
        }
        return up;
      });

      setSnackbar({
        open: true,
        message: 'Calculation completed successfully!',
        severity: 'success',
      });
    } catch (e) {
      setError(
        'Calculation failed. Please check parameters and try again.'
      );
      console.error(e);
      setSnackbar({
        open: true,
        message: 'Calculation failed. Please try again.',
        severity: 'error',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const goToComparison = () => navigate('/comparison');

  const handleReset = () => {
    if (resetToDefaults()) {
      setSnackbar({
        open: true,
        message: 'Reset to original values.',
        severity: 'success',
      });
    }
  };

  const handleSnackClose = (_, r) => {
    if (r === 'clickaway') return;
    setSnackbar((s) => ({ ...s, open: false }));
  };

  /* ----------------------- RENDER ----------------------- */
  if (!cashFlowData) {
    return (
      <Container>
        <Box sx={{ mt: 4, textAlign: 'center' }}>
          <Typography variant="h5" color="error">
            Please upload receivables data first
          </Typography>
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleSnackClose}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>

      {/* Header */}
      <Paper
        elevation={2}
        sx={{
          p: 3,
          mb: 3,
          borderRadius: 2,
          border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.primary.main, 0.03)
        }}
      >
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <ReceiptLongIcon sx={{ fontSize: 28, color: theme.palette.primary.main, mr: 2 }} />
            <Typography variant="h4" fontWeight="medium">Receivables Analysis</Typography>
          </Box>

          <Box sx={{ display: 'flex', gap: 2 }}>
            {calculationResults && previousCalculationResults && (
              <Button
                variant="outlined"
                color="primary"
                onClick={goToComparison}
                startIcon={<CompareIcon />}
              >
                View Comparisons
              </Button>
            )}

            <Tooltip title="Reset to original values">
              <IconButton color="primary" onClick={handleReset} size="small">
                <ReplayIcon />
              </IconButton>
            </Tooltip>
          </Box>
        </Box>
        
        <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
          Configure and analyze your receivables securitization structure to maximize returns while maintaining adequate credit enhancement.
        </Typography>
      </Paper>

      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}

      {/* Tabs */}
      <Paper sx={{ mb: 4 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange}>
            <Tab label="Structure Parameters" />
            <Tab label="Results" disabled={!calculationResults} />
            <Tab label="Interest Rates" disabled={!calculationResults} />
          </Tabs>
        </Box>

        <Box sx={{ p: 3 }}>
          {tabValue === 0 && (
            <>
              {/* Add the Default Settings Selector */}
              <DefaultSettingsSelector />
              
              <GeneralSettingsForm />
              <TrancheAForm />
              <TrancheBForm />
              
              {/* Add the ClassBCouponAdjuster component - renamed to Subordinated Yield Adjuster in UI */}
              {calculationResults && (
                <Paper 
                  sx={{ 
                    p: 3, 
                    mb: 3,
                    border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
                    backgroundColor: alpha(theme.palette.secondary.main, 0.03),
                    borderRadius: 2
                  }}
                >
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Typography variant="h6" color="secondary.main" fontWeight="medium">
                        Subordinated Yield Adjuster
                      </Typography>
                      <Tooltip title="Fine-tune the nominal amount to achieve your target yield for subordinated tranche" sx={{ ml: 1 }}>
                        <InfoOutlinedIcon fontSize="small" color="secondary" />
                      </Tooltip>
                    </Box>
                    
                    {/* Current rate indicator chip */}
                    <Chip 
                      label={`Current: ${calculationResults.class_b_coupon_rate?.toFixed(2) || '0.00'}%`} 
                      color="secondary" 
                      variant="outlined"
                      size="small"
                    />
                  </Box>
                  
                  <ClassBCouponAdjuster />
                </Paper>
              )}

              <Divider sx={{ my: 3 }} />

              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'center', gap: 2 }}>
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  onClick={() => handleCalculate()}
                  disabled={isLoading}
                  startIcon={
                    isLoading ? <CircularProgress size={24} /> : <CalculateIcon />
                  }
                >
                  {isLoading ? 'Calculatingâ€¦' : 'Calculate Results'}
                </Button>

                {calculationResults && previousCalculationResults && (
                  <Button
                    variant="outlined"
                    color="primary"
                    size="large"
                    onClick={goToComparison}
                    startIcon={<CompareIcon />}
                  >
                    Compare Results
                  </Button>
                )}
              </Box>
            </>
          )}

          {tabValue === 1 && calculationResults && (
            <CalculationResults results={calculationResults} />
          )}

          {tabValue === 2 && calculationResults && (
            <InterestRatesTable results={calculationResults} />
          )}
        </Box>
      </Paper>
    </Container>
  );
};

export default CalculationPage;

======================================================================

DOSYA: src\pages\CalculationResults.js
==================================================
// src/components/calculation/CalculationResults.js
import React, { useState } from "react";
import { 
  Box, 
  Typography, 
  Paper,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Divider,
  Chip,
  alpha,
  Tabs,
  Tab,
  Grid,
  Card,
  CardContent,
  useTheme,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  TextField,
  Snackbar,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio
} from "@mui/material";
import { BarChart, Bar, PieChart, Pie, Cell, LineChart, Line, ScatterChart, Scatter, ZAxis,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, AreaChart, Area, ReferenceLine } from "recharts";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import TimelineIcon from '@mui/icons-material/Timeline';
import PieChartIcon from '@mui/icons-material/PieChart';
import BarChartIcon from '@mui/icons-material/BarChart';
import AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';
import TableChartIcon from '@mui/icons-material/TableChart';
import ShowChartIcon from '@mui/icons-material/ShowChart';
import SaveIcon from '@mui/icons-material/Save';
import { useData } from '../contexts/DataContext';

// Custom tooltip component for charts with enhanced styling
const CustomTooltip = ({ active, payload, label, formatter }) => {
  const theme = useTheme();
  if (active && payload && payload.length) {
    return (
      <Paper
        sx={{
          p: 1.5,
          boxShadow: theme.shadows[3],
          borderRadius: theme.shape.borderRadius,
          border: "none",
          minWidth: 180,
          maxWidth: 280,
        }}
      >
        <Typography variant="subtitle2" sx={{ mb: 0.5, fontWeight: 600 }}>{label}</Typography>
        {payload.map((entry, index) => (
          <Box key={`item-${index}`} sx={{ color: entry.color, display: 'flex', justifyContent: 'space-between', my: 0.5 }}>
            <Typography variant="body2" sx={{ mr: 2 }}>
              {entry.name}:
            </Typography>
            <Typography variant="body2" fontWeight="medium">
              {formatter ? formatter(entry.value) : entry.value}
            </Typography>
          </Box>
        ))}
      </Paper>
    );
  }
  return null;
};

const CalculationResults = ({ results }) => {
  const theme = useTheme();
  const [tabValue, setTabValue] = useState(0);
  
  // States for save functionality
  const [saveDialogOpen, setSaveDialogOpen] = useState(false);
  const [resultName, setResultName] = useState('');
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [selectedMethodType, setSelectedMethodType] = useState('manual');
  
  // Get saveResult function from context
  const { saveResult } = useData();
  
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Functions for save functionality
  const handleSaveClick = () => {
    setSaveDialogOpen(true);
    // Default name based on calculation type
    let defaultName = 'Manual Calculation';
    if (results.is_optimized) {
      defaultName = results.optimization_method ? 
        `${results.optimization_method.charAt(0).toUpperCase() + results.optimization_method.slice(1)} Optimization` : 
        'Optimized Calculation';
    }
    setResultName(defaultName);
    
    // Set default method type based on results
    let methodType = 'manual';
    if (results.is_optimized) {
      methodType = results.optimization_method === 'genetic' ? 'genetic' : 'standard';
    }
    setSelectedMethodType(methodType);
  };
  
  const handleSaveDialogClose = () => {
    setSaveDialogOpen(false);
  };
  
  const handleSaveConfirm = () => {
    const saved = saveResult(results, resultName, selectedMethodType);
    
    if (saved) {
      setSnackbarMessage(`Result saved as "${resultName}" (${selectedMethodType})`);
      setSnackbarOpen(true);
      setSaveDialogOpen(false);
    } else {
      setSnackbarMessage('Failed to save result');
      setSnackbarOpen(true);
    }
  };
  
  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };
  
  if (!results) {
    return (
      <Paper sx={{ 
        p: 4, 
        textAlign: "center", 
        borderRadius: 2,
        backgroundColor: alpha(theme.palette.info.light, 0.08),
        border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
      }}>
        <Typography variant="h6" color="text.secondary" gutterBottom>
          Results Not Available
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Please start the calculation process to view results
        </Typography>
      </Paper>
    );
  }
  
  // Format currency values
  const formatCurrency = (value) => {
    if (value === undefined || value === null) return "â‚º0.00";
    return new Intl.NumberFormat("tr-TR", { style: "currency", currency: "TRY" }).format(value);
  };
  
  // Format percentage values with null check
  const formatPercent = (value) => {
    if (value === undefined || value === null) return "0.00%";
    return `${value.toFixed(2)}%`;
  };

  // Extract color values from theme
  const classAColor = theme.palette.primary.main;
  const classBColor = theme.palette.secondary.main;
  
  // Calculate totals with null checks
  const totalClassA = (results.class_a_principal || 0) + (results.class_a_interest || 0);
  const totalClassB = results.class_b_principal || 0;
  const totalAll = totalClassA + totalClassB;
  
  // Check if minimum buffer requirement is met
  const minBufferTarget = 5.0;
  const isBufferMet = (results.min_buffer_actual || 0) >= minBufferTarget;
  
  // Prepare data for tranche comparison chart - showing both principal and interest
  const classComparisonData = [
    {
      name: "Class A",
      principal: results.class_a_principal || 0,
      interest: results.class_a_interest || 0,
      total: totalClassA,
      color: classAColor
    },
    {
      name: "Class B",
      principal: results.class_b_principal || 0,
      coupon: results.class_b_coupon || 0,
      total: results.class_b_total || 0,
      color: classBColor
    },
  ];
  
  // Prepare data for pie chart - as specified, Class A is principal + interest, Class B is principal only
  const pieData = [
    { name: 'Class A (Principal + Interest)', value: totalClassA, color: classAColor },
    { name: 'Class B (Principal)', value: totalClassB, color: classBColor }
  ];
  
  // Prepare data for tranche-level charts
  const trancheDetails = results.tranche_results ? results.tranche_results.map(t => ({
    name: t["Tranche"],
    principal: t["Principal"],
    interest: t["Is Class A"] ? t["Interest"] : t["Coupon Payment"],
    total: t["Total Payment"],
    buffer: t["Buffer Cash Flow Ratio (%)"],
    maturity: t["Maturity Days"],
    maturityDate: t["Maturity Date"],
    isClassA: t["Is Class A"],
    bufferIn: t["Buffer In"],
    cashFlow: t["Cash Flow Total"],
    reinvestment: t["Reinvestment Return"],
    bufferReinvestment: t["Buffer Reinvestment"],
    totalAvailable: t["Total Available"],
  })) : [];
  
  // Sort tranche details by maturity for timeline visualization
  const sortedByMaturity = [...trancheDetails].sort((a, b) => a.maturity - b.maturity);
  
  // Cumulative payment timeline for enhanced visualization
  const cumulativeTimelineData = [];
  let cumulativeTotal = 0;
  
  sortedByMaturity.forEach(t => {
    cumulativeTotal += t.total;
    cumulativeTimelineData.push({
      ...t,
      cumulativeTotal: cumulativeTotal
    });
  });
  
  // Buffer ratio chart data
  const bufferData = trancheDetails
    .filter(t => t.isClassA)
    .map(t => ({
      name: t.name,
      buffer: t.buffer,
      minimum: minBufferTarget
    }));
    
  // Cash flow components data
  const cashFlowComponentsData = trancheDetails.map(t => ({
    name: t.name,
    cashFlow: t.cashFlow,
    reinvestment: t.reinvestment,
    bufferIn: t.bufferIn,
    bufferReinvestment: t.bufferReinvestment,
  }));
  
  // Financing analysis data for visualization
  const financingData = [
    { name: 'Total Receivable Amount', value: results.total_loan_principal },
    { name: 'Total Amount Paid to Institution', value: results.total_principal_paid },
  ];
  
  // Color palette for multiple tranches
  const getTrancheColor = (index, isClassA) => {
    if (isClassA) {
      const colors = [
        theme.palette.primary.main,
        theme.palette.primary.light,
        alpha(theme.palette.primary.main, 0.8),
        alpha(theme.palette.primary.main, 0.6),
        alpha(theme.palette.primary.main, 0.4),
      ];
      return colors[index % colors.length];
    } else {
      const colors = [
        theme.palette.secondary.main,
        theme.palette.secondary.light,
        alpha(theme.palette.secondary.main, 0.8),
        alpha(theme.palette.secondary.main, 0.6),
        alpha(theme.palette.secondary.main, 0.4),
      ];
      return colors[index % colors.length];
    }
  };
  
  // Chart configuration
  const chartConfig = {
    height: 350,
    margin: { top: 20, right: 30, left: 20, bottom: 20 },
  };

  return (
    <Box>
      {/* Save Button at the top */}
      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
        <Button
          variant="contained"
          color="success"
          startIcon={<SaveIcon />}
          onClick={handleSaveClick}
        >
          Save Result
        </Button>
      </Box>
      
      {/* Summary Section with enhanced styling */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.primary.main, 0.03),
          borderRadius: 2
        }}
      >
        <Typography variant="h6" color="primary.main" fontWeight="medium" gutterBottom>
          Calculation Results Summary
        </Typography>
        
        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 3, mt: 2 }}>
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: theme.shape.borderRadius,
            boxShadow: theme.shadows[1]
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary" fontWeight="medium">
              Payment Totals
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Class A Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalClassA)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalClassA / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.primary.main, 0.1),
                          color: theme.palette.primary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Class B Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalClassB)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalClassB / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.secondary.main, 0.1),
                          color: theme.palette.secondary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Grand Total</TableCell>
                    <TableCell align="right">{formatCurrency(totalAll)}</TableCell>
                    <TableCell align="right">
                      <Chip 
                        size="small" 
                        label="100.00%"
                        sx={{ 
                          bgcolor: alpha(theme.palette.info.main, 0.1),
                          color: theme.palette.info.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
          
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: theme.shape.borderRadius,
            boxShadow: theme.shadows[1]
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary" fontWeight="medium">
              Principal and Interest
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: classAColor,
                            mr: 1 
                          }} 
                        />
                        Class A
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_interest)}</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: classBColor,
                            mr: 1 
                          }} 
                        />
                        Class B
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_coupon)}</TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Total</TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_principal || 0) + (results.class_b_principal || 0))}
                    </TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_interest || 0) + (results.class_b_coupon || 0))}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </Box>
        
        <Divider sx={{ my: 3, opacity: 0.6 }} />
        
        <Box sx={{ 
          display: 'flex', 
          gap: 4, 
          flexWrap: 'wrap',
          backgroundColor: isBufferMet ? alpha(theme.palette.success.main, 0.08) : alpha(theme.palette.error.main, 0.08),
          p: 2,
          borderRadius: theme.shape.borderRadius,
        }}>
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Minimum Buffer Requirement
            </Typography>
            <Typography variant="h6" sx={{ mt: 0.5 }}>
              {formatPercent(minBufferTarget)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Actual Minimum Buffer (Class A)
            </Typography>
            <Typography variant="h6" color={isBufferMet ? "success.main" : "error.main"} sx={{ mt: 0.5 }}>
              {formatPercent(results.min_buffer_actual)}
            </Typography>
          </Box>
          
          <Box sx={{ ml: 'auto' }}>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Status
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
              {isBufferMet ? (
                <CheckCircleOutlineIcon color="success" sx={{ mr: 1 }} />
              ) : (
                <ErrorOutlineIcon color="error" sx={{ mr: 1 }} />
              )}
              <Typography 
                variant="h6" 
                color={isBufferMet ? "success.main" : "error.main"}
              >
                {isBufferMet ? "Requirement Met" : "Requirement Not Met"}
              </Typography>
            </Box>
          </Box>
        </Box>
      </Paper>
      
      {/* Enhanced Chart and Table Tabs */}
      <Box sx={{ mb: 4 }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          sx={{
            mb: 2,
            '& .MuiTab-root': {
              minWidth: 'auto',
              px: 3
            }
          }}
        >
          <Tab icon={<PieChartIcon />} label="Overview" iconPosition="start" />
          <Tab icon={<BarChartIcon />} label="Tranche Details" iconPosition="start" />
          <Tab icon={<TimelineIcon />} label="Maturity Analysis" iconPosition="start" />
          <Tab icon={<ShowChartIcon />} label="Cash Flow Analysis" iconPosition="start" />
          <Tab icon={<AccountBalanceWalletIcon />} label="Financing" iconPosition="start" />
          <Tab icon={<TableChartIcon />} label="Detailed Table" iconPosition="start" />
        </Tabs>
        
        {/* Tab 1: Overview Charts - With enhanced visualization */}
        {tabValue === 0 && (
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  height: '100%',
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Distribution by Class
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Showing Class A (Principal + Interest) vs Class B (Principal)
                </Typography>
                <Box sx={{ height: chartConfig.height, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart margin={chartConfig.margin}>
                      <Pie
                        data={pieData}
                        dataKey="value"
                        nameKey="name"
                        cx="50%"
                        cy="50%"
                        outerRadius={120}
                        innerRadius={70}
                        labelLine={false}
                        label={({ name, percent }) => `${name.split(' ')[0]} (${(percent * 100).toFixed(1)}%)`}
                      >
                        {pieData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  height: '100%',
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Principal vs Interest/Coupon
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Showing the breakdown of payments by type
                </Typography>
                <Box sx={{ height: chartConfig.height, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={classComparisonData}
                      margin={chartConfig.margin}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis dataKey="name" />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="principal" 
                        name="Principal" 
                        stackId="a" 
                        fill={theme.palette.primary.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="interest" 
                        name="Interest" 
                        stackId="a" 
                        fill={theme.palette.info.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="coupon" 
                        name="Coupon" 
                        stackId="a" 
                        fill={theme.palette.secondary.main}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                  backgroundColor: alpha(theme.palette.info.main, 0.03),
                  borderRadius: 2
                }}
              >
                <Typography variant="h6" color="info.main" gutterBottom fontWeight="medium">
                  Financing Analysis
                </Typography>
                
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Box sx={{ 
                      mt: 2,
                      p: 2,
                      bgcolor: 'background.paper', 
                      borderRadius: theme.shape.borderRadius,
                      boxShadow: theme.shadows[1]
                    }}>
                      <TableContainer>
                        <Table>
                          <TableBody>
                            <TableRow>
                              <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Amount Paid to Institution:</TableCell>
                              <TableCell align="right" sx={{ fontWeight: 600, pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                                {formatCurrency(results.total_principal_paid)}
                              </TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Receivable Amount:</TableCell>
                              <TableCell align="right" sx={{ pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                                {formatCurrency(results.total_loan_principal)}
                              </TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell sx={{ pl: 2, fontWeight: 600 }}>
                                Total Financing Cost:
                              </TableCell>
                              <TableCell 
                                align="right" 
                                sx={{ 
                                  fontWeight: 600,
                                  pr: 2,
                                  color: (results.financing_cost || 0) > 0 ? "success.main" : "error.main"
                                }}
                              >
                                {formatCurrency(Math.abs(results.financing_cost || 0))}
                              </TableCell>
                            </TableRow>
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Box sx={{ height: 250 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                          layout="vertical"
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                          <XAxis type="number" tickFormatter={(value) => `â‚º${value/1000000}M`} />
                          <YAxis type="category" dataKey="name" />
                          <Tooltip 
                            content={<CustomTooltip formatter={(value) => formatCurrency(value)} />} 
                          />
                          <Bar 
                            dataKey="value" 
                            fill={(results.financing_cost || 0) > 0 ? theme.palette.success.light : theme.palette.error.light}
                            radius={4}
                            barSize={30}
                          />
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 2: Tranche Details - Enhanced for clarity */}
        {tabValue === 1 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Tranche Payments Breakdown
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Showing the principal and interest/coupon payments for each tranche
                </Typography>
                <Box sx={{ height: 400, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trancheDetails}
                      margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name" 
                        angle={-45}
                        textAnchor="end"
                        height={60}
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="principal" 
                        name="Principal" 
                        fill={theme.palette.primary.dark}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="interest" 
                        name="Interest/Coupon" 
                        fill={theme.palette.secondary.light}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Individual Tranche Payments
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Comparison of total payments across all tranches
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trancheDetails}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Bar 
                        dataKey="total" 
                        name="Total Payment" 
                        radius={[4, 4, 0, 0]}
                      >
                        {trancheDetails.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={getTrancheColor(index, entry.isClassA)} 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Buffer Analysis (Class A)
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Comparing actual buffer ratios against minimum requirements
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={bufferData}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `${value}%`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => `${value.toFixed(2)}%`} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="buffer" 
                        name="Buffer Ratio" 
                        fill={theme.palette.success.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <ReferenceLine 
                        y={minBufferTarget} 
                        stroke={theme.palette.error.main} 
                        strokeDasharray="3 3"
                        label={{ value: 'Minimum Requirement', position: 'insideBottomRight', fill: theme.palette.error.main }}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 3: Maturity Analysis - Completely redesigned for better visualization */}
        {tabValue === 2 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Payment Schedule by Maturity
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Discrete payment events across the maturity timeline
                </Typography>
                <Box sx={{ height: 400, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={sortedByMaturity}
                      margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="maturity" 
                        type="number"
                        domain={[0, 'dataMax + 30']}
                        label={{ 
                          value: 'Maturity (days)', 
                          position: 'insideBottom', 
                          offset: -5 
                        }}
                      />
                      <YAxis 
                        tickFormatter={(value) => `â‚º${value/1000000}M`}
                        label={{ 
                          value: 'Payment Amount', 
                          angle: -90, 
                          position: 'insideLeft',
                          style: { textAnchor: 'middle' }
                        }}
                      />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value, name) => 
                          name === "maturity" ? `${value} days` : 
                          name === "maturityDate" ? value : 
                          formatCurrency(value)
                        } />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="total" 
                        name="Payment Amount" 
                        radius={[4, 4, 0, 0]}
                      >
                        {sortedByMaturity.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={entry.isClassA ? theme.palette.primary.main : theme.palette.secondary.main} 
                          />
                        ))}
                      </Bar>
                      <ReferenceLine
                        x={0}
                        stroke={theme.palette.text.secondary}
                        strokeWidth={1}
                        label={{ value: 'Today', position: 'insideTopLeft', fill: theme.palette.text.secondary }}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Maturity Distribution by Class
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Comparing maturity dates between Class A and Class B tranches
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trancheDetails.sort((a, b) => a.maturity - b.maturity)}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="maturity"
                        label={{ 
                          value: 'Maturity (days)', 
                          position: 'insideBottom', 
                          offset: -5 
                        }}
                      />
                      <YAxis 
                        tickFormatter={(value) => `â‚º${value/1000000}M`}
                      />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value, name) => 
                          name === "maturity" ? `${value} days` : formatCurrency(value)
                        } />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="total" 
                        name="Payment Amount" 
                        radius={[4, 4, 0, 0]}
                      >
                        {trancheDetails.sort((a, b) => a.maturity - b.maturity).map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={entry.isClassA ? theme.palette.primary.main : theme.palette.secondary.main} 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Maturity vs. Buffer Ratio
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Analyzing how buffer ratios change across different maturity dates
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={trancheDetails.filter(t => t.isClassA).sort((a, b) => a.maturity - b.maturity)}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="maturity"
                        type="number"
                        label={{ 
                          value: 'Maturity (days)', 
                          position: 'insideBottom', 
                          offset: -5 
                        }}
                      />
                      <YAxis 
                        label={{ 
                          value: 'Buffer Ratio (%)', 
                          angle: -90, 
                          position: 'insideLeft',
                          style: { textAnchor: 'middle' }
                        }}
                        unit="%"
                      />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value, name) => 
                          name === "maturity" ? `${value} days` : 
                          name === "buffer" ? `${value.toFixed(2)}%` : 
                          value
                        } />}
                      />
                      <ReferenceLine 
                        y={minBufferTarget}
                        stroke={theme.palette.error.main}
                        strokeDasharray="3 3"
                        label={{ 
                          value: 'Minimum Requirement', 
                          position: 'insideTopRight',
                          fill: theme.palette.error.main,
                          fontSize: 12
                        }}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="buffer" 
                        name="Buffer Ratio" 
                        stroke={theme.palette.success.main}
                        strokeWidth={2}
                        dot={{ 
                          r: 6, 
                          fill: data => data.value >= minBufferTarget ? theme.palette.success.main : theme.palette.error.main 
                        }}
                        activeDot={{ r: 8 }}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 4: Cash Flow Analysis - Enhanced for better readability */}
        {tabValue === 3 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Cash Flow Components by Tranche
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Detailed breakdown of all cash flow sources for each tranche
                </Typography>
                <Box sx={{ height: 400, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={cashFlowComponentsData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name" 
                        angle={-45}
                        textAnchor="end"
                        height={60}
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="cashFlow" 
                        name="Cash Flow" 
                        fill={theme.palette.primary.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="reinvestment" 
                        name="Reinvestment Return" 
                        fill={theme.palette.secondary.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="bufferIn" 
                        name="Buffer In" 
                        fill={theme.palette.info.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="bufferReinvestment" 
                        name="Buffer Reinvestment" 
                        fill={theme.palette.warning.main}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Available Funds vs Required Payments
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Comparing total available funds against payment obligations
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trancheDetails}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="totalAvailable" 
                        name="Total Available" 
                        fill={theme.palette.success.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="total" 
                        name="Total Payment" 
                        fill={theme.palette.primary.main}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Cash Flow Components Over Time
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Visualizing how different cash flow sources contribute to the overall pool
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart
                      data={cashFlowComponentsData}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Area 
                        type="monotone" 
                        dataKey="cashFlow" 
                        name="Cash Flow" 
                        stackId="1"
                        stroke={theme.palette.primary.main}
                        fill={alpha(theme.palette.primary.main, 0.6)}
                      />
                      <Area 
                        type="monotone" 
                        dataKey="reinvestment" 
                        name="Reinvestment" 
                        stackId="1"
                        stroke={theme.palette.secondary.main}
                        fill={alpha(theme.palette.secondary.main, 0.6)}
                      />
                      <Area 
                        type="monotone" 
                        dataKey="bufferIn" 
                        name="Buffer In" 
                        stackId="1"
                        stroke={theme.palette.info.main}
                        fill={alpha(theme.palette.info.main, 0.6)}
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 5: Financing Analysis - Enhanced and terminology improved */}
        {tabValue === 4 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 3, 
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                  backgroundColor: alpha(theme.palette.info.main, 0.03),
                  borderRadius: 2
                }}
              >
                <Typography variant="h6" color="info.main" gutterBottom fontWeight="medium">
                  Financing Analysis
                </Typography>
                
                <Grid container spacing={4}>
                  <Grid item xs={12} md={6}>
                    <Box sx={{ 
                      p: 3,
                      bgcolor: 'background.paper', 
                      borderRadius: 2,
                      boxShadow: theme.shadows[1]
                    }}>
                      <Typography variant="subtitle1" gutterBottom color="text.secondary" fontWeight="medium">
                        Key Financing Metrics
                      </Typography>
                      
                      <Box sx={{ mt: 2 }}>
                        <Grid container spacing={2}>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Total Receivable Amount</Typography>
                            <Typography variant="h6" fontWeight="medium">{formatCurrency(results.total_loan_principal)}</Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Amount Paid to Institution</Typography>
                            <Typography variant="h6" fontWeight="medium">{formatCurrency(results.total_principal_paid)}</Typography>
                          </Grid>
                          <Grid item xs={12}>
                            <Divider sx={{ my: 2 }} />
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Financing Cost</Typography>
                            <Typography 
                              variant="h5" 
                              fontWeight="medium"
                              color={(results.financing_cost || 0) > 0 ? "success.main" : "error.main"}
                            >
                              TOTAL COST
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Amount</Typography>
                            <Typography 
                              variant="h5" 
                              fontWeight="medium"
                              color={(results.financing_cost || 0) > 0 ? "success.main" : "error.main"}
                            >
                              {formatCurrency(Math.abs(results.financing_cost || 0))}
                            </Typography>
                          </Grid>
                        </Grid>
                      </Box>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Box sx={{ height: 300 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                          <XAxis dataKey="name" />
                          <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                          <Tooltip 
                            content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                          />
                          <Legend />
                          <Bar 
                            dataKey="value" 
                            name="Amount" 
                            radius={[4, 4, 0, 0]}
                          >
                            {financingData.map((entry, index) => (
                              <Cell 
                                key={`cell-${index}`} 
                                fill={index === 0 
                                  ? theme.palette.info.main 
                                  : theme.palette.primary.main
                                } 
                              />
                            ))}
                          </Bar>
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12}>
                    <Box sx={{ 
                      p: 3,
                      bgcolor: 'background.paper', 
                      borderRadius: 2,
                      boxShadow: theme.shadows[1]
                    }}>
                      <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                        Financing Analysis Summary
                      </Typography>
                      
                      <Typography variant="body1" paragraph>
                        The total amount paid to the institution is {formatCurrency(results.total_principal_paid)}, while the total receivable amount is {formatCurrency(results.total_loan_principal)}.
                      </Typography>
                      
                      <Typography variant="body1" paragraph>
                        The difference between these amounts represents a <strong>total financing cost of {formatCurrency(Math.abs(results.financing_cost || 0))}</strong>. This is the cost of the securitization structure based on the current configuration.
                      </Typography>
                      
                      <Typography variant="body1">
                        The total principal of the ABS structure (Class A + Class B) is {formatCurrency((results.class_a_principal || 0) + (results.class_b_principal || 0))}, with total interest and coupon payments of {formatCurrency((results.class_a_interest || 0) + (results.class_b_coupon || 0))}.
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 6: Detailed Table - Enhanced styling */}
        {tabValue === 5 && (
          <Box>
            <Paper 
              elevation={0}
              sx={{ 
                p: 3, 
                border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
                backgroundColor: 'background.paper',
                borderRadius: 2
              }}
            >
              <Typography variant="h6" gutterBottom fontWeight="medium">
                Detailed Tranche Results
              </Typography>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Complete breakdown of all payment details by individual tranche
              </Typography>
              
              {results.tranche_results && results.tranche_results.length > 0 ? (
                <TableContainer sx={{ 
                  maxHeight: 440,
                  mt: 2,
                  borderRadius: 1,
                  boxShadow: theme.shadows[1]
                }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.08) }}>Tranche</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.08) }}>Maturity Days</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.08) }}>Maturity Date</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.08) }}>Principal</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.08) }}>Interest / Coupon</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.08) }}>Total Payment</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.08) }}>Buffer Ratio (%)</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {results.tranche_results.map((tranche, index) => (
                        <TableRow 
                          key={index}
                          sx={{ 
                            backgroundColor: tranche["Is Class A"] 
                              ? alpha(theme.palette.primary.main, 0.03)
                              : alpha(theme.palette.secondary.main, 0.03),
                            '&:hover': {
                              backgroundColor: tranche["Is Class A"] 
                                ? alpha(theme.palette.primary.main, 0.07)
                                : alpha(theme.palette.secondary.main, 0.07),
                            }
                          }}
                        >
                          <TableCell>
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <Box 
                                component="span" 
                                sx={{ 
                                  display: 'inline-block', 
                                  width: 10, 
                                  height: 10, 
                                  borderRadius: '50%', 
                                  bgcolor: tranche["Is Class A"] ? classAColor : classBColor,
                                  mr: 1 
                                }} 
                              />
                              {tranche["Tranche"]}
                            </Box>
                          </TableCell>
                          <TableCell>{tranche["Maturity Days"]}</TableCell>
                          <TableCell>{tranche["Maturity Date"]}</TableCell>
                          <TableCell>{formatCurrency(tranche["Principal"])}</TableCell>
                          <TableCell>
                            {formatCurrency(
                              tranche["Is Class A"] ? tranche["Interest"] : tranche["Coupon Payment"]
                            )}
                          </TableCell>
                          <TableCell>{formatCurrency(tranche["Total Payment"])}</TableCell>
                          <TableCell>
                            <Chip 
                              size="small" 
                              label={formatPercent(tranche["Buffer Cash Flow Ratio (%)"])}
                              sx={{ 
                                bgcolor: 
                                  tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                                    ? alpha(theme.palette.success.main, 0.1)
                                    : alpha(theme.palette.warning.main, 0.1),
                                color: 
                                  tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                                    ? theme.palette.success.main
                                    : theme.palette.warning.main,
                                fontWeight: 500,
                                fontSize: '0.75rem'
                              }}
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              ) : (
                <Typography variant="body2" color="text.secondary" sx={{ py: 3, textAlign: "center" }}>
                  Detailed results are not available yet
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Box>
      
      {/* Save Dialog with Method Type Selection */}
      <Dialog open={saveDialogOpen} onClose={handleSaveDialogClose}>
        <DialogTitle>Save Calculation Result</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Enter a name for this result and select its type for comparison.
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            id="name"
            label="Result Name"
            type="text"
            fullWidth
            variant="outlined"
            value={resultName}
            onChange={(e) => setResultName(e.target.value)}
          />
          <FormControl fullWidth sx={{ mt: 2 }}>
            <FormLabel id="method-type-label">Result Type</FormLabel>
            <RadioGroup
              row
              value={selectedMethodType}
              onChange={(e) => setSelectedMethodType(e.target.value)}
            >
              <FormControlLabel value="manual" control={<Radio />} label="Manual Configuration" />
              <FormControlLabel value="standard" control={<Radio />} label="Standard Optimization" />
              <FormControlLabel value="genetic" control={<Radio />} label="Genetic Optimization" />
            </RadioGroup>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleSaveDialogClose}>Cancel</Button>
          <Button onClick={handleSaveConfirm} color="primary" disabled={!resultName.trim()}>
            Save
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={4000}
        onClose={handleSnackbarClose}
        message={snackbarMessage}
      />
    </Box>
  );
};

export default CalculationResults;

======================================================================

DOSYA: src\pages\ComparisonPage.js
==================================================
import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Tabs, 
  Tab, 
  Grid, 
  Card, 
  CardContent, 
  Table,
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Chip,
  Divider,
  alpha,
  useTheme,
  Button,
  IconButton,
  Tooltip,
  Alert,
  CircularProgress,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Checkbox,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  ThemeProvider,
  createTheme,
  CssBaseline
} from '@mui/material';
import { useData } from '../contexts/DataContext';
import CompareIcon from '@mui/icons-material/Compare';
import AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';
import BarChartIcon from '@mui/icons-material/BarChart';
import PieChartIcon from '@mui/icons-material/PieChart';
import TimelineIcon from '@mui/icons-material/Timeline';
import DownloadIcon from '@mui/icons-material/Download';
import ScienceIcon from '@mui/icons-material/Science';
import SettingsIcon from '@mui/icons-material/Settings';
import TuneIcon from '@mui/icons-material/Tune';
import DeleteIcon from '@mui/icons-material/Delete';
import RefreshIcon from '@mui/icons-material/Refresh';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import { 
  BarChart, Bar, PieChart, Pie, Cell, 
  XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer, 
  ReferenceLine
} from "recharts";

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#4dabf5',
    },
    secondary: {
      main: '#ce93d8',
    },
    success: {
      main: '#66bb6a',
    },
    error: {
      main: '#f44336',
    },
    warning: {
      main: '#ffa726',
    },
    info: {
      main: '#29b6f6',
    },
    background: {
      default: '#0a1929',
      paper: '#132f4c',
    },
    text: {
      primary: '#ffffff',
      secondary: 'rgba(255, 255, 255, 0.7)',
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    grid: 'rgba(255, 255, 255, 0.15)',
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 500,
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          '&:last-child': {
            paddingBottom: 16,
          },
        },
      },
    },
  },
});

// TabPanel component
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`tabpanel-${index}`}
      aria-labelledby={`tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ pt: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const ComparisonPage = () => {
  const theme = darkTheme;
  const { 
    savedResults,
    clearSavedResults,
    deleteSavedResult
  } = useData();
  
  // State variables
  const [tabValue, setTabValue] = useState(0);
  const [loading, setLoading] = useState(true);
  const [selectedResults, setSelectedResults] = useState([]);
  const [selectDialogOpen, setSelectDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [resultToDelete, setResultToDelete] = useState(null);
  const [comparisonData, setComparisonData] = useState({
    manualResults: null,
    geneticResults: null,
    standardResults: null
  });

  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Format currency values
  const formatCurrency = (value) => {
    if (value === undefined || value === null) return "â‚º0,00";
    
    try {
      return new Intl.NumberFormat("tr-TR", { 
        style: "currency", 
        currency: "TRY",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(value);
    } catch (error) {
      console.error('Error formatting currency:', error);
      return `â‚º${value.toFixed(2).replace('.', ',')}`;
    }
  };
  
  // Format percentage values
  const formatPercent = (value) => {
    if (value === undefined || value === null) return "0,00%";
    return `${value.toFixed(2).replace('.', ',')}%`;
  };

  // Calculate percentage difference
  const calculateDifference = (current, reference) => {
    if (!current || !reference || reference === 0) return null;
    return ((current - reference) / reference) * 100;
  };

  // Format difference with color and sign
  const formatDifference = (diff) => {
    if (diff === null) return "-";
    const isPositive = diff > 0;
    return (
      <Typography 
        variant="body2" 
        sx={{ 
          color: isPositive ? 'success.main' : 'error.main',
          fontWeight: 'medium',
          display: 'flex',
          alignItems: 'center'
        }}
      >
        {isPositive ? '+' : ''}{diff.toFixed(2).replace('.', ',')}%
      </Typography>
    );
  };

  // Dialog handlers
  const handleOpenSelectDialog = () => setSelectDialogOpen(true);
  const handleCloseSelectDialog = () => setSelectDialogOpen(false);
  const handleDeleteDialogOpen = (resultId) => {
    setResultToDelete(resultId);
    setDeleteDialogOpen(true);
  };
  const handleDeleteDialogClose = () => {
    setDeleteDialogOpen(false);
    setResultToDelete(null);
  };

  // Handle result selection
  const handleSelectResult = (resultId) => {
    setSelectedResults(prev => {
      if (prev.includes(resultId)) {
        return prev.filter(id => id !== resultId);
      } else {
        // Limit to 3 selections
        if (prev.length >= 3) {
          return [...prev.slice(1), resultId];
        }
        return [...prev, resultId];
      }
    });
  };

  // Confirm result selection
  const handleConfirmSelection = () => {
    setSelectDialogOpen(false);
    processSelectedResults();
  };

  // Process the selected results
  const processSelectedResults = () => {
    if (selectedResults.length === 0) return;
    
    setLoading(true);
    
    // Filter the saved results based on selection
    const selectedResultsData = savedResults.filter(result => 
      selectedResults.includes(result.id)
    );
    
    // Create an empty result object structure
    const processedData = {
      manualResults: null,
      geneticResults: null,
      standardResults: null
    };
    
    // Process each selected result and assign to the appropriate category
    selectedResultsData.forEach(result => {      
      if (result.methodType === 'manual') {
        processedData.manualResults = {...result};
      } else if (result.methodType === 'genetic') {
        processedData.geneticResults = {...result};
      } else if (result.methodType === 'standard') {
        processedData.standardResults = {...result};
      }
    });
    
    // Update the comparison data state
    setComparisonData(processedData);
    setLoading(false);
  };

  // Handle delete confirmation
  const handleDeleteConfirm = () => {
    if (resultToDelete) {
      deleteSavedResult(resultToDelete);
      
      // Remove from selected results if present
      if (selectedResults.includes(resultToDelete)) {
        setSelectedResults(prev => prev.filter(id => id !== resultToDelete));
      }
      
      setDeleteDialogOpen(false);
      setResultToDelete(null);
    }
  };

  // Reset all comparison data
  const handleResetComparison = () => {
    clearSavedResults();
    setSelectedResults([]);
    setComparisonData({
      manualResults: null,
      geneticResults: null,
      standardResults: null
    });
  };
  
  // Initialize selected results when component mounts
  useEffect(() => {
    setLoading(true);
    
    if (savedResults && savedResults.length > 0) {
      // Auto-select one of each type (manual, genetic, grid) initially
      const initialSelectedIds = [];
      
      // Try to find one of each type
      const manualResult = savedResults.find(r => r.methodType === 'manual');
      const geneticResult = savedResults.find(r => r.methodType === 'genetic');
      const standardResult = savedResults.find(r => r.methodType === 'standard');
      
      // Add each result's ID to our initial selection if found
      if (manualResult) initialSelectedIds.push(manualResult.id);
      if (geneticResult) initialSelectedIds.push(geneticResult.id);
      if (standardResult) initialSelectedIds.push(standardResult.id);
      
      // If we haven't selected anything yet, just take the first result
      if (initialSelectedIds.length === 0 && savedResults.length > 0) {
        initialSelectedIds.push(savedResults[0].id);
      }
      
      // Process these initial selections
      const initialSelectedData = savedResults.filter(result => 
        initialSelectedIds.includes(result.id)
      );
      
      // Set the selected results state
      setSelectedResults(initialSelectedIds);
      
      // Explicitly create a new object for each result type to avoid reference issues
      const processedData = {
        manualResults: null,
        geneticResults: null,
        standardResults: null
      };
      
      // Assign each result type manually with spread operator to create a copy
      const manualResultData = initialSelectedData.find(r => r.methodType === 'manual');
      const geneticResultData = initialSelectedData.find(r => r.methodType === 'genetic');
      const standardResultData = initialSelectedData.find(r => r.methodType === 'standard');
      
      if (manualResultData) processedData.manualResults = {...manualResultData};
      if (geneticResultData) processedData.geneticResults = {...geneticResultData};
      if (standardResultData) processedData.standardResults = {...standardResultData};
      
      setComparisonData(processedData);
    }
    
    setLoading(false);
  }, [savedResults]);

  // Get all valid results as an array
  const getComparisonResults = () => {
    const results = [];
    
    if (comparisonData.manualResults) {
      results.push({
        id: comparisonData.manualResults.id,
        label: 'Manual Calculation',
        result: comparisonData.manualResults,
        isOptimized: false,
        method: 'manual',
        color: theme.palette.error.main,
        icon: <TuneIcon />
      });
    }
    
    if (comparisonData.geneticResults) {
      results.push({
        id: comparisonData.geneticResults.id,
        label: 'Genetic Algorithm',
        result: comparisonData.geneticResults,
        isOptimized: true,
        method: 'genetic',
        color: theme.palette.success.main,
        icon: <ScienceIcon />
      });
    }
    
    if (comparisonData.standardResults) {
      results.push({
        id: comparisonData.standardResults.id,
        label: 'Grid Algorithm',
        result: comparisonData.standardResults,
        isOptimized: true,
        method: 'standard',
        color: theme.palette.primary.main,
        icon: <SettingsIcon />
      });
    }
    
    return results;
  };

  // Check if we have at least two results to compare
  const hasEnoughData = () => {
    const results = getComparisonResults();
    return results.length >= 2;
  };

  // Add the header with buttons
  const ComparisonHeader = () => {
    return (
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <CompareIcon sx={{ fontSize: 28, color: theme.palette.primary.main, mr: 2 }} />
          <Typography variant="h4" component="h1" gutterBottom>
            Comparison Analysis
          </Typography>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            color="primary"
            onClick={handleOpenSelectDialog}
            sx={{ borderRadius: 2 }}
          >
            Select Results
          </Button>
          
          <Button
            variant="outlined"
            color="error"
            startIcon={<RefreshIcon />}
            onClick={handleResetComparison}
            sx={{ borderRadius: 2 }}
          >
            Clear All Results
          </Button>
          
          <Button
            variant="outlined"
            startIcon={<DownloadIcon />}
            size="medium"
            sx={{ borderRadius: 2 }}
          >
            Export Comparison
          </Button>
        </Box>
      </Box>
    );
  };

  // Custom tooltip for charts
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <Paper sx={{ p: 1.5, borderRadius: 1, boxShadow: 2, bgcolor: 'background.paper' }}>
          <Typography variant="body2" fontWeight="medium" sx={{ mb: 1 }}>{label}</Typography>
          {payload.map((entry, index) => (
            <Box key={`tooltip-${index}`} sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
              <Typography variant="body2" sx={{ mr: 2, color: entry.color }}>
                {entry.name}:
              </Typography>
              <Typography variant="body2" fontWeight="medium">
                {entry.name.includes('Buffer') || entry.name.includes('Rate')
                  ? `${entry.value.toFixed(2)}%` 
                  : formatCurrency(entry.value)}
              </Typography>
            </Box>
          ))}
        </Paper>
      );
    }
    return null;
  };

  // Identify which results we have
  const hasManual = comparisonData.manualResults !== null;
  const hasGenetic = comparisonData.geneticResults !== null;
  const hasStandard = comparisonData.standardResults !== null;
  
  // Get active comparison results
  const comparisonResults = getComparisonResults();
  
  // Prepare chart data
  const barChartData = comparisonResults.map(item => ({
    name: item.label,
    classA: item.result.class_a_total || 0,
    classB: item.result.class_b_total || 0,
    total: (item.result.class_a_total || 0) + (item.result.class_b_total || 0),
    color: item.color
  }));
  
  // Prepare principal interest breakdown data
  const breakdownData = comparisonResults.map(item => ({
    name: item.label,
    classAPrincipal: item.result.class_a_principal || 0,
    classAInterest: item.result.class_a_interest || 0,
    classBPrincipal: item.result.class_b_principal || 0,
    classBCoupon: item.result.class_b_coupon || 0,
    color: item.color
  }));
  
  // Prepare buffer data
  const bufferData = comparisonResults.map(item => ({
    name: item.label,
    minBuffer: item.result.min_buffer_actual || 0,
    color: item.color
  }));
  
  // Prepare financing data
  const financingData = comparisonResults.map(item => ({
    name: item.label,
    financingCost: Math.abs(item.result.financing_cost || 0),
    isProfit: (item.result.financing_cost || 0) > 0,
    principalPaid: item.result.total_principal_paid || 0,
    loanPrincipal: item.result.total_loan_principal || 0,
    color: item.color
  }));

  // Loading state
  if (loading) {
    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4, textAlign: 'center', py: 10 }}>
          <CircularProgress size={60} color="primary" />
          <Typography variant="h6" sx={{ mt: 3 }}>
            Loading comparison data...
          </Typography>
        </Container>
      </ThemeProvider>
    );
  }

  // No saved results state
  if (!savedResults || savedResults.length === 0) {
    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <ComparisonHeader />
          
          <Paper 
            elevation={2}
            sx={{ 
              p: 4, 
              textAlign: 'center',
              borderRadius: 2,
              backgroundColor: alpha(theme.palette.info.main, 0.05),
              border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
            }}
          >
            <CompareIcon sx={{ fontSize: 60, color: theme.palette.info.main, opacity: 0.8, mb: 2 }} />
            <Typography variant="h5" gutterBottom>
              No Saved Results
            </Typography>
            <Typography variant="body1" color="text.secondary">
              You need to save calculation results first before comparing them.
            </Typography>
            <Box sx={{ mt: 4 }}>
              <Grid container spacing={3} justifyContent="center">
                <Grid item xs={12} md={6}>
                  <Card variant="outlined" sx={{ height: '100%', bgcolor: alpha(theme.palette.background.paper, 0.6) }}>
                    <CardContent>
                      <Typography variant="subtitle1" gutterBottom color="primary" fontWeight="medium">
                        How to Compare Results
                      </Typography>
                      <ol>
                        <li>Go to the Calculation page and set your manual parameters</li>
                        <li>Calculate your manual configuration results and save them</li>
                        <li>Go to the Optimization page and run genetic algorithm optimization</li>
                        <li>Save the optimization results</li>
                        <li>Go to the Optimization page and run grid algorithm</li>
                        <li>Save the grid algorithm results</li>
                        <li>Return to this page to compare all saved results</li>
                      </ol>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </Box>
          </Paper>
        </Container>
      </ThemeProvider>
    );
  }

  // Not enough data to compare
  if (!hasEnoughData()) {
    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <ComparisonHeader />
          
          <Paper 
            elevation={2}
            sx={{ 
              p: 4, 
              textAlign: 'center',
              borderRadius: 2,
              backgroundColor: alpha(theme.palette.warning.main, 0.05),
              border: `1px solid ${alpha(theme.palette.warning.main, 0.2)}`
            }}
          >
            <CompareIcon sx={{ fontSize: 60, color: theme.palette.warning.main, opacity: 0.8, mb: 2 }} />
            <Typography variant="h5" gutterBottom>
              Select at Least Two Results
            </Typography>
            <Typography variant="body1" color="text.secondary">
              You need to select at least two results to compare them.
            </Typography>
            <Button
              variant="contained"
              color="primary"
              onClick={handleOpenSelectDialog}
              sx={{ mt: 3, borderRadius: 2 }}
            >
              Select Results
            </Button>
            
            <Box sx={{ mt: 4 }}>
              <TableContainer component={Paper} elevation={1} sx={{ bgcolor: alpha(theme.palette.background.paper, 0.6) }}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Name</TableCell>
                      <TableCell>Type</TableCell>
                      <TableCell>Date Saved</TableCell>
                      <TableCell>Actions</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {savedResults.map((result) => (
                      <TableRow key={result.id}>
                        <TableCell>{result.savedName}</TableCell>
                        <TableCell>
                          <Chip 
                            label={result.methodType === 'manual' ? 'Manual' : 
                                   result.methodType === 'genetic' ? 'Genetic' : 'Grid Algorithm'} 
                            color={result.methodType === 'manual' ? 'error' :
                                   result.methodType === 'genetic' ? 'success' : 'primary'}
                            size="small"
                            sx={{ fontWeight: 500 }}
                          />
                        </TableCell>
                        <TableCell>
                          {new Date(result.timestamp).toLocaleString()}
                        </TableCell>
                        <TableCell>
                          <IconButton 
                            color="error" 
                            size="small"
                            onClick={() => handleDeleteDialogOpen(result.id)}
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </Box>
          </Paper>
        </Container>
      </ThemeProvider>
    );
  }

  // Main comparison view with enough data
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        <ComparisonHeader />
        
        {/* Summary Cards */}
        <Paper 
          elevation={3}
          sx={{ 
            p: 3, 
            mb: 4, 
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
            backgroundColor: alpha(theme.palette.background.paper, 0.8)
          }}
        >
          <Typography variant="h5" color="primary.main" gutterBottom fontWeight="medium" sx={{ mb: 3 }}>
            Comparison Summary
          </Typography>
          
          <Grid container spacing={3}>
            {comparisonResults.map((item, index) => (
              <Grid item xs={12} md={4} key={index}>
                <Card elevation={2} sx={{ 
                  height: '100%', 
                  backgroundColor: alpha(item.color, 0.1), 
                  border: `1px solid ${alpha(item.color, 0.2)}`,
                  borderRadius: 2
                }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <Box sx={{ mr: 1, color: item.color }}>
                        {item.icon}
                      </Box>
                      <Typography variant="h6" fontWeight="medium" sx={{ color: item.color }}>
                        {item.label}
                      </Typography>
                    </Box>
                    
                    <Divider sx={{ mb: 2, opacity: 0.2 }} />
                    
                    <Box>
                      <Typography variant="body2" color="text.secondary">Total Structure Size</Typography>
                      <Typography variant="h6" sx={{ my: 0.5 }}>
                        {formatCurrency((item.result.class_a_total || 0) + (item.result.class_b_total || 0))}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        Class A: {formatCurrency(item.result.class_a_total || 0)}, 
                        Class B: {formatCurrency(item.result.class_b_total || 0)}
                      </Typography>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="body2" color="text.secondary">Minimum Buffer</Typography>
                      <Typography variant="h6" color={
                        (item.result.min_buffer_actual || 0) >= 5.0 ? 'success.main' : 'error.main'
                      } sx={{ my: 0.5 }}>
                        {formatPercent(item.result.min_buffer_actual || 0)}
                      </Typography>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="body2" color="text.secondary">Financing Result</Typography>
                      <Typography variant="h6" color={
                        (item.result.financing_cost || 0) > 0 ? 'success.main' : 'error.main'
                      } sx={{ my: 0.5 }}>
                        {(item.result.financing_cost || 0) > 0 ? "Profit: " : "Loss: "}
                        {formatCurrency(Math.abs(item.result.financing_cost || 0))}
                      </Typography>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Paper>
        
        {/* Tabs for different comparison views */}
        <Box sx={{ 
          mb: 3, 
          borderRadius: 2, 
          overflow: 'hidden', 
          backgroundColor: alpha(theme.palette.background.paper, 0.4)
        }}>
          <Tabs 
            value={tabValue} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{
              '& .MuiTab-root': {
                minWidth: 'auto',
                px: 3,
                py: 2
              },
              '& .MuiTabs-indicator': {
                height: 3,
                borderTopLeftRadius: 3,
                borderTopRightRadius: 3
              }
            }}
          >
            <Tab icon={<PieChartIcon />} label="Portfolio Overview" iconPosition="start" />
            <Tab icon={<BarChartIcon />} label="Cashflow Distribution" iconPosition="start" />
            <Tab icon={<AccountBalanceWalletIcon />} label="Financing Comparison" iconPosition="start" />
            <Tab icon={<TimelineIcon />} label="Tranche Breakdown" iconPosition="start" />
          </Tabs>
        </Box>
        
        {/* Tab 1: Portfolio Overview */}
        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" fontWeight="medium">
                    Total Structure Comparison
                  </Typography>
                  <Tooltip title="Shows the distribution of Class A and Class B in each calculation approach">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Box sx={{ height: 400, mt: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={barChartData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                      <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                      <YAxis 
                        tickFormatter={(value) => `â‚º${value/1000000}M`} 
                        tick={{ fill: theme.palette.text.secondary }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Legend 
                        wrapperStyle={{ paddingTop: 20 }}
                        formatter={(value) => (
                          <span style={{ color: theme.palette.text.primary }}>{value}</span>
                        )}
                      />
                      <Bar 
                        dataKey="classA" 
                        name="Class A" 
                        stackId="a"
                      >
                        {barChartData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={alpha(entry.color, 0.8)} />
                        ))}
                      </Bar>
                      <Bar 
                        dataKey="classB" 
                        name="Class B" 
                        stackId="a"
                        opacity={0.5}
                      >
                        {barChartData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
                
                <Divider sx={{ my: 4 }} />
                
                <Typography variant="h6" gutterBottom fontWeight="medium">
                  Class Distribution
                </Typography>
                
                <Grid container spacing={4}>
                  {comparisonResults.map((item, index) => (
                    <Grid item xs={12} md={4} key={index}>
                      <Box sx={{ textAlign: 'center' }}>
                        <Typography variant="subtitle1" align="center" gutterBottom sx={{ color: item.color, fontWeight: 'medium' }}>
                          {item.label}
                        </Typography>
                        <Box sx={{ height: 280 }}>
                          <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                              <Pie
                                data={[
                                  { name: 'Class A', value: item.result.class_a_total || 0 },
                                  { name: 'Class B', value: item.result.class_b_total || 0 }
                                ]}
                                cx="50%"
                                cy="50%"
                                outerRadius={100}
                                dataKey="value"
                                label={({ name, percent }) => `${name} (${(percent * 100).toFixed(1)}%)`}
                                labelLine={{ stroke: theme.palette.text.secondary }}
                              >
                                <Cell fill={alpha(item.color, 0.8)} />
                                <Cell fill={alpha(item.color, 0.4)} />
                              </Pie>
                              <RechartsTooltip formatter={(value) => formatCurrency(value)} />
                            </PieChart>
                          </ResponsiveContainer>
                        </Box>
                        <Box sx={{ mt: 1 }}>
                          <Typography variant="body2" color="text.secondary">
                            Total: {formatCurrency((item.result.class_a_total || 0) + (item.result.class_b_total || 0))}
                          </Typography>
                        </Box>
                      </Box>
                    </Grid>
                  ))}
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Tab 2: Cashflow Distribution */}
        <TabPanel value={tabValue} index={1}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" fontWeight="medium">
                    Principal and Interest Distribution
                  </Typography>
                  <Tooltip title="Detailed breakdown of principal and interest components for each class">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Box sx={{ height: 400, mt: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={breakdownData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                      <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                      <YAxis 
                        tickFormatter={(value) => `â‚º${value/1000000}M`} 
                        tick={{ fill: theme.palette.text.secondary }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Legend 
                        wrapperStyle={{ paddingTop: 20 }}
                        formatter={(value) => (
                          <span style={{ color: theme.palette.text.primary }}>{value}</span>
                        )}
                      />
                      <Bar 
                        dataKey="classAPrincipal" 
                        name="Class A Principal" 
                        fill={alpha(theme.palette.primary.main, 0.8)}
                      />
                      <Bar 
                        dataKey="classAInterest" 
                        name="Class A Interest" 
                        fill={alpha(theme.palette.primary.main, 0.5)}
                      />
                      <Bar 
                        dataKey="classBPrincipal" 
                        name="Class B Principal" 
                        fill={alpha(theme.palette.secondary.main, 0.8)}
                      />
                      <Bar 
                        dataKey="classBCoupon" 
                        name="Class B Coupon" 
                        fill={alpha(theme.palette.secondary.main, 0.5)}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
                
                <Divider sx={{ my: 4 }} />
                
                <TableContainer sx={{ maxHeight: 500 }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                        <TableCell>Metric</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell 
                            key={index} 
                            align="right"
                            sx={{
                              color: item.color,
                              fontWeight: 'medium'
                            }}
                          >
                            {item.label}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            Manual vs. Genetic
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            Manual vs. Grid Algorithm
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            Genetic vs. Grid Algorithm
                          </TableCell>
                        )}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow hover>
                        <TableCell>Class A Principal</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_a_principal || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_a_principal,
                              comparisonData.manualResults.class_a_principal
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_principal,
                              comparisonData.manualResults.class_a_principal
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_principal,
                              comparisonData.geneticResults.class_a_principal
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Class A Interest</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_a_interest || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_a_interest,
                              comparisonData.manualResults.class_a_interest
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_interest,
                              comparisonData.manualResults.class_a_interest
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_interest,
                              comparisonData.geneticResults.class_a_interest
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Class B Principal</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_b_principal || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_b_principal,
                              comparisonData.manualResults.class_b_principal
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_principal,
                              comparisonData.manualResults.class_b_principal
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_principal,
                              comparisonData.geneticResults.class_b_principal
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Class B Coupon</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_b_coupon || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_b_coupon,
                              comparisonData.manualResults.class_b_coupon
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_coupon,
                              comparisonData.manualResults.class_b_coupon
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_coupon,
                              comparisonData.geneticResults.class_b_coupon
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow sx={{ "& td": { fontWeight: 'medium', backgroundColor: alpha(theme.palette.primary.main, 0.1) } }}>
                        <TableCell>Total</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(
                              (item.result.class_a_total || 0) + (item.result.class_b_total || 0)
                            )}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              (comparisonData.geneticResults.class_a_total || 0) + (comparisonData.geneticResults.class_b_total || 0),
                              (comparisonData.manualResults.class_a_total || 0) + (comparisonData.manualResults.class_b_total || 0)
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              (comparisonData.standardResults.class_a_total || 0) + (comparisonData.standardResults.class_b_total || 0),
                              (comparisonData.manualResults.class_a_total || 0) + (comparisonData.manualResults.class_b_total || 0)
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              (comparisonData.standardResults.class_a_total || 0) + (comparisonData.standardResults.class_b_total || 0),
                              (comparisonData.geneticResults.class_a_total || 0) + (comparisonData.geneticResults.class_b_total || 0)
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Tab 3: Financing Comparison */}
        <TabPanel value={tabValue} index={2}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" color="info.main" fontWeight="medium">
                    Financing Comparison
                  </Typography>
                  <Tooltip title="Compares principal and interest payments alongside financing outcomes">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Grid container spacing={4}>
                  <Grid item xs={12} md={7}>
                    <Box sx={{ height: 350, pr: 2 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                          layout="vertical"
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                          <XAxis 
                            type="number" 
                            tickFormatter={(value) => `â‚º${value/1000000}M`} 
                            tick={{ fill: theme.palette.text.secondary }}
                          />
                          <YAxis 
                            type="category" 
                            dataKey="name" 
                            tick={{ fill: theme.palette.text.secondary }}
                          />
                          <RechartsTooltip content={<CustomTooltip />} />
                          <Legend 
                            wrapperStyle={{ paddingTop: 20 }}
                            formatter={(value) => (
                              <span style={{ color: theme.palette.text.primary }}>{value}</span>
                            )}
                          />
                          <Bar 
                            dataKey="principalPaid" 
                            name="Total Principal Paid" 
                            fill={theme.palette.primary.main} 
                            radius={[0, 4, 4, 0]}
                          />
                          <Bar 
                            dataKey="loanPrincipal" 
                            name="Total Loan Principal" 
                            fill={theme.palette.info.main}
                            radius={[0, 4, 4, 0]}
                          />
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12} md={5}>
                    <Box sx={{ height: 350 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                          <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                          <YAxis 
                            tickFormatter={(value) => `â‚º${value/1000000}M`} 
                            tick={{ fill: theme.palette.text.secondary }}
                          />
                          <RechartsTooltip content={<CustomTooltip />} />
                          <Legend 
                            wrapperStyle={{ paddingTop: 20 }}
                            formatter={(value) => (
                              <span style={{ color: theme.palette.text.primary }}>{value}</span>
                            )}
                          />
                          <Bar 
                            dataKey="financingCost" 
                            name="Financing Result" 
                            radius={[4, 4, 0, 0]}
                          >
                            {financingData.map((entry, index) => (
                              <Cell 
                                key={`cell-${index}`} 
                                fill={entry.isProfit ? theme.palette.success.main : theme.palette.error.main}
                              />
                            ))}
                          </Bar>
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                </Grid>
                
                <Divider sx={{ my: 4 }} />
                
                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>Metric</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell 
                            key={index} 
                            align="right"
                            sx={{
                              color: item.color,
                              fontWeight: 'medium'
                            }}
                          >
                            {item.label}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            Genetic Gain
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            Grid Algorithm Gain
                          </TableCell>
                        )}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow hover>
                        <TableCell>Total Principal Paid</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.total_principal_paid || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.total_principal_paid,
                              comparisonData.manualResults.total_principal_paid
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.total_principal_paid,
                              comparisonData.manualResults.total_principal_paid
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Total Loan Principal</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.total_loan_principal || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.total_loan_principal,
                              comparisonData.manualResults.total_loan_principal
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.total_loan_principal,
                              comparisonData.manualResults.total_loan_principal
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow sx={{ 
                        "& td": { 
                          fontWeight: 'medium', 
                          backgroundColor: alpha(theme.palette.info.main, 0.1) 
                        } 
                      }}>
                        <TableCell>Financing Result</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell 
                            key={index} 
                            align="right"
                            sx={{ 
                              color: (item.result.financing_cost || 0) > 0 
                                ? 'success.main' 
                                : 'error.main' 
                            }}
                          >
                            {(item.result.financing_cost || 0) > 0 ? "Profit: " : "Loss: "}
                            {formatCurrency(Math.abs(item.result.financing_cost || 0))}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                            {formatCurrency(Math.abs(
                              (comparisonData.geneticResults.financing_cost || 0) - 
                              (comparisonData.manualResults.financing_cost || 0)
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                            {formatCurrency(Math.abs(
                              (comparisonData.standardResults.financing_cost || 0) - 
                              (comparisonData.manualResults.financing_cost || 0)
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Tab 4: Tranche Breakdown */}
        <TabPanel value={tabValue} index={3}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.success.main, 0.2)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" color="success.main" fontWeight="medium">
                    Buffer Analysis
                  </Typography>
                  <Tooltip title="Analyzes the minimum buffer values across tranches">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Box sx={{ mb: 3 }}>
                  <Alert 
                    severity="info" 
                    sx={{ mb: 2, bgcolor: alpha(theme.palette.info.main, 0.1) }}
                  >
                    Minimum buffer requirement is 5.0%. Values below this threshold may cause cash flow issues.
                  </Alert>
                </Box>
                
                <Box sx={{ height: 400, mt: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={bufferData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                      <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                      <YAxis 
                        tickFormatter={(value) => `${value}%`} 
                        domain={[0, 'dataMax + 2']} 
                        tick={{ fill: theme.palette.text.secondary }}
                      />
                      <RechartsTooltip formatter={(value) => `${value.toFixed(2)}%`} />
                      <Legend 
                        wrapperStyle={{ paddingTop: 20 }}
                        formatter={(value) => (
                          <span style={{ color: theme.palette.text.primary }}>{value}</span>
                        )}
                      />
                      <ReferenceLine 
                        y={5} 
                        label={{ value: "Min Requirement", fill: theme.palette.text.secondary }}
                        stroke={theme.palette.error.main} 
                        strokeDasharray="3 3" 
                      />
                      <Bar dataKey="minBuffer" name="Minimum Buffer" radius={[4, 4, 0, 0]}>
                        {bufferData.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={entry.minBuffer >= 5.0 ? theme.palette.success.main : theme.palette.error.main} 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
                
                <Divider sx={{ my: 4 }} />
                
                <Typography variant="h6" gutterBottom fontWeight="medium">
                  Tranche-Level Buffer Details
                </Typography>
                
                {comparisonResults.map((resultItem, resultIndex) => (
                  <Box key={resultIndex} sx={{ mb: 4 }}>
                    <Typography variant="subtitle1" gutterBottom sx={{ 
                      display: 'flex',
                      alignItems: 'center',
                      color: resultItem.color,
                      fontWeight: 'medium',
                      mt: 3
                    }}>
                      <Box 
                        sx={{ 
                          width: 12, 
                          height: 12, 
                          borderRadius: '50%', 
                          backgroundColor: resultItem.color,
                          mr: 1 
                        }} 
                      />
                      {resultItem.label}
                    </Typography>
                    
                    {resultItem.result.tranche_results ? (
                      <TableContainer sx={{ mb: 2 }}>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>Tranche</TableCell>
                              <TableCell align="right">Maturity (Days)</TableCell>
                              <TableCell align="right">Total Payment</TableCell>
                              <TableCell align="right">Buffer Ratio (%)</TableCell>
                              <TableCell align="right">Status</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {resultItem.result.tranche_results
                              .filter(tranche => tranche["Is Class A"])
                              .map((tranche, index) => (
                                <TableRow key={index} hover>
                                  <TableCell>{tranche["Tranche"]}</TableCell>
                                  <TableCell align="right">{tranche["Maturity Days"]}</TableCell>
                                  <TableCell align="right">{formatCurrency(tranche["Total Payment"])}</TableCell>
                                  <TableCell align="right">{formatPercent(tranche["Buffer Cash Flow Ratio (%)"])}</TableCell>
                                  <TableCell align="right">
                                    <Chip 
                                      size="small" 
                                      label={tranche["Buffer Cash Flow Ratio (%)"] >= 5.0 ? "Valid" : "Low"} 
                                      color={tranche["Buffer Cash Flow Ratio (%)"] >= 5.0 ? "success" : "error"} 
                                      sx={{ fontWeight: 500 }}
                                    />
                                  </TableCell>
                                </TableRow>
                              ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    ) : (
                      <Typography variant="body2" color="text.secondary">
                        Detailed tranche data not available for this result.
                      </Typography>
                    )}
                  </Box>
                ))}
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Select Results Dialog */}
        <Dialog 
          open={selectDialogOpen} 
          onClose={handleCloseSelectDialog} 
          maxWidth="sm" 
          fullWidth
          PaperProps={{
            sx: {
              bgcolor: 'background.paper',
              borderRadius: 2
            }
          }}
        >
          <DialogTitle>Select Results to Compare</DialogTitle>
          <DialogContent>
            <DialogContentText>
              Select up to 3 results to compare. Choose results of different types (Manual, Genetic, and Grid Algorithm) for the best comparison.
            </DialogContentText>
            <List sx={{ mt: 2 }}>
              {savedResults.map((result) => (
                <ListItem 
                  key={result.id} 
                  dense
                  onClick={() => handleSelectResult(result.id)}
                  sx={{ 
                    cursor: 'pointer',
                    p: 1,
                    mb: 1,
                    '&:hover': {
                      backgroundColor: alpha(theme.palette.primary.main, 0.05)
                    },
                    backgroundColor: selectedResults.includes(result.id) 
                    ? alpha(theme.palette.primary.main, 0.1) 
                    : 'transparent',
                  borderRadius: 1
                }}
              >
                <Checkbox
                  edge="start"
                  checked={selectedResults.includes(result.id)}
                  tabIndex={-1}
                  disableRipple
                  color={
                    result.methodType === 'manual' ? 'error' :
                    result.methodType === 'genetic' ? 'success' : 'primary'
                  }
                />
                <ListItemText 
                  primary={
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Typography variant="body1">{result.savedName}</Typography>
                      <Chip 
                        label={
                          result.methodType === 'manual' ? 'Manual' : 
                          result.methodType === 'genetic' ? 'Genetic' : 'Grid Algorithm'
                        }
                        size="small"
                        color={
                          result.methodType === 'manual' ? 'error' :
                          result.methodType === 'genetic' ? 'success' : 'primary'
                        }
                        sx={{ ml: 2, fontWeight: 500 }}
                      />
                    </Box>
                  }
                  secondary={new Date(result.timestamp).toLocaleString()}
                />
                <ListItemSecondaryAction>
                  <IconButton 
                    edge="end" 
                    aria-label="delete"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteDialogOpen(result.id);
                    }}
                  >
                    <DeleteIcon />
                  </IconButton>
                </ListItemSecondaryAction>
              </ListItem>
            ))}
          </List>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 3 }}>
          <Button onClick={handleCloseSelectDialog} variant="outlined" sx={{ borderRadius: 2 }}>Cancel</Button>
          <Button 
            onClick={handleConfirmSelection} 
            color="primary"
            variant="contained"
            disabled={selectedResults.length === 0}
            sx={{ borderRadius: 2 }}
          >
            Compare Selected ({selectedResults.length})
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={handleDeleteDialogClose}
        PaperProps={{
          sx: {
            bgcolor: 'background.paper',
            borderRadius: 2
          }
        }}
      >
        <DialogTitle>Delete Saved Result</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this saved result? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 3 }}>
          <Button onClick={handleDeleteDialogClose} variant="outlined" sx={{ borderRadius: 2 }}>Cancel</Button>
          <Button 
            onClick={handleDeleteConfirm} 
            color="error" 
            variant="contained"
            sx={{ borderRadius: 2 }}
          >
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  </ThemeProvider>
);
};

export default ComparisonPage;

======================================================================

DOSYA: src\pages\HomePage.js
==================================================
// src/pages/HomePage.js
import React from 'react';
import { Link } from 'react-router-dom';
import { 
  Container, 
  Typography, 
  Box, 
  Button, 
  Grid, 
  Paper, 
  alpha,
  Divider,
  useTheme,
  Card,
  CardContent,
  Chip
} from '@mui/material';
import CalculateIcon from '@mui/icons-material/Calculate';
import OptimizeIcon from '@mui/icons-material/Speed';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import ReceiptLongIcon from '@mui/icons-material/ReceiptLong';
import CompareIcon from '@mui/icons-material/Compare';
import RestoreIcon from '@mui/icons-material/Restore';
import AssignmentIcon from '@mui/icons-material/Assignment';
import BusinessIcon from '@mui/icons-material/Business';
import PaymentsIcon from '@mui/icons-material/Payments';
import AccountBalanceIcon from '@mui/icons-material/AccountBalance';
import { useData } from '../contexts/DataContext';
import FileUploader from '../components/FileUploader';

const HomePage = () => {
  const { cashFlowData, selectedDefaults, setSelectedDefaults } = useData();
  const theme = useTheme();

  // Define just one default settings info
  const modelInfo = {
    label: "Standard Model",
    description: "February 13, 2025 start date with 4 senior tranches (61-274 days)",
    icon: <RestoreIcon sx={{ color: theme.palette.primary.main }} />,
    color: theme.palette.primary.main,
    details: [
      { label: "Start Date", value: "13 February 2025" },
      { label: "Senior Tranches", value: "4" },
      { label: "Senior Maturity Range", value: "61-274 days" },
      { label: "Subordinated Maturity", value: "300 days" },
      { label: "Subordinated Percentage", value: "Default calculation" },
    ]
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Box
        sx={{
          py: 7,
          px: { xs: 3, md: 6 },
          mb: 5,
          textAlign: 'center',
          background: `linear-gradient(135deg, ${alpha(theme.palette.primary.dark, 0.9)}, ${alpha(theme.palette.secondary.dark, 0.8)})`,
          borderRadius: 3,
          color: 'white',
          boxShadow: `0 8px 24px ${alpha(theme.palette.primary.dark, 0.4)}`,
        }}
      >
        <ReceiptLongIcon sx={{ fontSize: 56, mb: 2, color: alpha('#fff', 0.9) }} />
        <Typography variant="h3" component="h1" gutterBottom fontWeight="500">
          Receivables Securitization Platform
        </Typography>
        <Typography variant="h6" sx={{ mb: 3, fontWeight: 400, opacity: 0.9 }}>
          Professional cash flow analysis and optimization for commercial receivables securitization
        </Typography>
        <Divider sx={{ 
          width: '100px', 
          mx: 'auto', 
          mb: 3, 
          borderColor: 'rgba(255,255,255,0.25)' 
        }} />
        <Typography variant="body1" sx={{ maxWidth: '800px', mx: 'auto', opacity: 0.9 }}>
          Upload your receivables data to analyze cash flows, 
          calculate securitization structures, and optimize your tranches for maximum returns and risk protection.
        </Typography>
        
        {/* Key Features Badge Section */}
        <Box sx={{ mt: 4, display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: 2 }}>
          <Chip 
            icon={<BusinessIcon />} 
            label="Commercial Receivables" 
            sx={{ bgcolor: alpha('#fff', 0.15), color: '#fff', fontWeight: 500, px: 1 }}
          />
          <Chip 
            icon={<AccountBalanceIcon />} 
            label="Securitization" 
            sx={{ bgcolor: alpha('#fff', 0.15), color: '#fff', fontWeight: 500, px: 1 }}
          />
          <Chip 
            icon={<PaymentsIcon />} 
            label="Cash Flow Analytics" 
            sx={{ bgcolor: alpha('#fff', 0.15), color: '#fff', fontWeight: 500, px: 1 }}
          />
          <Chip 
            icon={<AssignmentIcon />} 
            label="Risk Management" 
            sx={{ bgcolor: alpha('#fff', 0.15), color: '#fff', fontWeight: 500, px: 1 }}
          />
        </Box>
      </Box>

      <Grid container spacing={4}>
        <Grid item xs={12}>
          <Paper
            elevation={2}
            sx={{
              p: 4,
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              borderRadius: 2,
              border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              background: `linear-gradient(to right, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
              boxShadow: `0 4px 16px ${alpha(theme.palette.common.black, 0.3)}`,
            }}
          >
            <Typography variant="h5" gutterBottom fontWeight="medium" sx={{ mb: 3 }}>
              Upload Your Receivables Data
            </Typography>
            <FileUploader />
          </Paper>
        </Grid>

        {cashFlowData && (
          <>
            {/* Single Securitization Model */}
            <Grid item xs={12}>
              <Paper
                elevation={2}
                sx={{
                  p: 4,
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                  background: `linear-gradient(to right, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
                  boxShadow: `0 4px 16px ${alpha(theme.palette.common.black, 0.3)}`,
                }}
              >
                <Typography variant="h5" gutterBottom fontWeight="medium" sx={{ mb: 3, color: theme.palette.info.main }}>
                  Securitization Structure Model
                </Typography>
                
                <Typography variant="body1" paragraph sx={{ color: 'text.secondary' }}>
                  Our pre-configured securitization structure model is optimized for your receivables profile.
                </Typography>
                
                <Card 
                  elevation={2} 
                  sx={{
                    maxWidth: '600px',
                    mx: 'auto',
                    borderRadius: 2,
                    transition: 'all 0.3s',
                    border: `1px solid ${alpha(modelInfo.color, 0.6)}`,
                    backgroundColor: alpha(modelInfo.color, 0.05),
                    '&:hover': {
                      boxShadow: `0 8px 20px ${alpha(modelInfo.color, 0.2)}`,
                      transform: 'translateY(-4px)',
                    }
                  }}
                >
                  <CardContent sx={{ p: 3 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        {modelInfo.icon}
                        <Typography variant="h6" fontWeight="medium" color={modelInfo.color}>
                          {modelInfo.label}
                        </Typography>
                      </Box>
                      <Chip 
                        label="Selected" 
                        size="small" 
                        color="primary" 
                        sx={{ 
                          backgroundColor: modelInfo.color,
                          fontWeight: 'medium'
                        }} 
                      />
                    </Box>
                    
                    <Typography variant="body2" color="text.secondary" paragraph>
                      {modelInfo.description}
                    </Typography>
                    
                    <Divider sx={{ my: 2 }} />
                    
                    <Grid container spacing={1}>
                      {modelInfo.details.map((detail, index) => (
                        <Grid item xs={6} key={index}>
                          <Box>
                            <Typography variant="caption" color="text.secondary">
                              {detail.label}
                            </Typography>
                            <Typography 
                              variant="body2" 
                              fontWeight="medium"
                              color={detail.highlight ? modelInfo.color : "inherit"}
                              sx={detail.highlight ? {
                                display: 'flex',
                                alignItems: 'center',
                                '&::before': {
                                  content: '""',
                                  display: 'inline-block',
                                  width: 8,
                                  height: 8,
                                  bgcolor: modelInfo.color,
                                  borderRadius: '50%',
                                  mr: 1
                                }
                              } : {}}
                            >
                              {detail.value}
                            </Typography>
                          </Box>
                        </Grid>
                      ))}
                    </Grid>
                    
                    <Box sx={{ mt: 3, textAlign: 'center' }}>
                      <Button
                        variant="contained"
                        color="primary"
                        component={Link}
                        to="/calculation"
                        size="medium"
                        endIcon={<ArrowForwardIcon />}
                        sx={{ 
                          borderRadius: 2,
                          borderColor: modelInfo.color,
                          backgroundColor: modelInfo.color,
                        }}
                      >
                        Continue with Model
                      </Button>
                    </Box>
                  </CardContent>
                </Card>
              </Paper>
            </Grid>

            <Grid item xs={12} md={6}>
              <Paper
                elevation={2}
                sx={{
                  p: 4,
                  display: 'flex',
                  flexDirection: 'column',
                  height: '100%',
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
                  transition: 'all 0.3s',
                  background: `linear-gradient(145deg, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: `0 8px 20px ${alpha(theme.palette.primary.main, 0.25)}`,
                    borderColor: alpha(theme.palette.primary.main, 0.3),
                  },
                }}
              >
                <Box sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  mb: 2.5
                }}>
                  <Box sx={{ 
                    background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${alpha(theme.palette.primary.light, 0.8)})`,
                    borderRadius: '50%', 
                    p: 1.5, 
                    mr: 2,
                    boxShadow: `0 4px 8px ${alpha(theme.palette.primary.main, 0.4)}`
                  }}>
                    <CalculateIcon sx={{ fontSize: 30, color: theme.palette.common.white }} />
                  </Box>
                  <Typography variant="h5" fontWeight="medium" color="primary.main">
                    Receivables Analysis
                  </Typography>
                </Box>
                
                <Typography paragraph sx={{ color: 'text.secondary', mb: 3 }}>
                  Configure tranche parameters and calculate detailed results for your
                  receivables-backed securitization. Analyze cash flows, interest rates, and buffer ratios 
                  to ensure your structure meets all requirements.
                </Typography>
                
                <Box sx={{ mt: 'auto', textAlign: 'center' }}>
                  <Button
                    variant="contained"
                    color="primary"
                    component={Link}
                    to="/calculation"
                    size="large"
                    endIcon={<ArrowForwardIcon />}
                    sx={{ 
                      mt: 2, 
                      py: 1.2, 
                      px: 3.5,
                      fontWeight: 500,
                      borderRadius: 2,
                      boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                      background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,
                      '&:hover': {
                        boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                        background: `linear-gradient(45deg, ${theme.palette.primary.light}, ${theme.palette.primary.main})`
                      }
                    }}
                  >
                    Analyze Receivables
                  </Button>
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12} md={6}>
              <Paper
                elevation={2}
                sx={{
                  p: 4,
                  display: 'flex',
                  flexDirection: 'column',
                  height: '100%',
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
                  transition: 'all 0.3s',
                  background: `linear-gradient(145deg, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: `0 8px 20px ${alpha(theme.palette.secondary.main, 0.25)}`,
                    borderColor: alpha(theme.palette.secondary.main, 0.3),
                  },
                }}
              >
                <Box sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  mb: 2.5
                }}>
                  <Box sx={{ 
                    background: `linear-gradient(45deg, ${theme.palette.secondary.main}, ${alpha(theme.palette.secondary.light, 0.8)})`,
                    borderRadius: '50%', 
                    p: 1.5, 
                    mr: 2,
                    boxShadow: `0 4px 8px ${alpha(theme.palette.secondary.main, 0.4)}`
                  }}>
                    <OptimizeIcon sx={{ fontSize: 30, color: theme.palette.common.white }} />
                  </Box>
                  <Typography variant="h5" fontWeight="medium" color="secondary.main">
                    Portfolio Optimizer
                  </Typography>
                </Box>
                
                <Typography paragraph sx={{ color: 'text.secondary', mb: 3 }}>
                  Optimize your receivables securitization structure to maximize returns
                  while maintaining minimum buffer requirements. Our advanced optimization
                  algorithms explore multiple strategies to find the best tranche configuration.
                </Typography>
                
                <Box sx={{ mt: 'auto', textAlign: 'center' }}>
                  <Button
                    variant="contained"
                    color="secondary"
                    component={Link}
                    to="/optimization"
                    size="large"
                    endIcon={<ArrowForwardIcon />}
                    sx={{ 
                      mt: 2, 
                      py: 1.2, 
                      px: 3.5,
                      fontWeight: 500,
                      borderRadius: 2,
                      boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                      background: `linear-gradient(45deg, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,
                      '&:hover': {
                        boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                        background: `linear-gradient(45deg, ${theme.palette.secondary.light}, ${theme.palette.secondary.main})`
                      }
                    }}
                  >
                    Optimize Portfolio
                  </Button>
                </Box>
              </Paper>
            </Grid>
            
            {/* Add Compare section */}
            <Grid item xs={12}>
              <Paper
                elevation={2}
                sx={{
                  p: 4,
                  display: 'flex',
                  flexDirection: 'column',
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                  background: `linear-gradient(145deg, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
                  transition: 'all 0.3s',
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: `0 8px 20px ${alpha(theme.palette.info.main, 0.25)}`,
                    borderColor: alpha(theme.palette.info.main, 0.3),
                  },
                }}
              >
                <Grid container spacing={3} alignItems="center">
                  <Grid item xs={12} md={8}>
                    <Box sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      mb: 2
                    }}>
                      <Box sx={{ 
                        background: `linear-gradient(45deg, ${theme.palette.info.main}, ${alpha(theme.palette.info.light, 0.8)})`,
                        borderRadius: '50%', 
                        p: 1.5, 
                        mr: 2,
                        boxShadow: `0 4px 8px ${alpha(theme.palette.info.main, 0.4)}`
                      }}>
                        <CompareIcon sx={{ fontSize: 30, color: theme.palette.common.white }} />
                      </Box>
                      <Typography variant="h5" fontWeight="medium" color="info.main">
                        Compare Structures
                      </Typography>
                    </Box>
                    
                    <Typography paragraph sx={{ color: 'text.secondary' }}>
                      Compare different optimization strategies and manual configurations side by side. 
                      Analyze differences in receivables distribution, interest rates, and buffer ratios 
                      to make informed decisions about your securitization structure.
                    </Typography>
                  </Grid>
                  
                  <Grid item xs={12} md={4} sx={{ textAlign: 'center' }}>
                    <Button
                      variant="contained"
                      color="info"
                      component={Link}
                      to="/comparison"
                      size="large"
                      endIcon={<ArrowForwardIcon />}
                      sx={{ 
                        py: 1.2, 
                        px: 3.5,
                        fontWeight: 500,
                        borderRadius: 2,
                        boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                        background: `linear-gradient(45deg, ${theme.palette.info.main}, ${theme.palette.info.dark})`,
                        '&:hover': {
                          boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                          background: `linear-gradient(45deg, ${theme.palette.info.light}, ${theme.palette.info.main})`
                        }
                      }}
                    >
                      View Comparisons
                    </Button>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>
          </>
        )}
      </Grid>
    </Container>
  );
};

export default HomePage;

======================================================================

DOSYA: src\pages\OptimizationPage.js
==================================================
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Button,
  Alert,
  CircularProgress,
  Divider,
  alpha,
  Chip,
  Stepper,
  Step,
  StepLabel,
  useTheme,
} from '@mui/material';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import SettingsIcon from '@mui/icons-material/Settings';
import SpeedIcon from '@mui/icons-material/Speed';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import RestartAltIcon from '@mui/icons-material/RestartAlt';

import OptimizationSettingsForm from '../components/optimization/OptimizationSettingsForm';
import OptimizationResults from '../components/optimization/OptimizationResults';
import OptimizationProgress from '../components/optimization/OptimizationProgress';
import { useData } from '../contexts/DataContext';
import { optimizeStructure } from '../services/apiService';

const OptimizationPage = () => {
  const theme = useTheme();
  const {
    cashFlowData,
    optimizationResults,
    setOptimizationResults,
    isLoading,
    setIsLoading,
    error,
    setError,
    optimizationSettings,
    setOptimizationSettings,
    generalSettings,
    selectedDefaults,
  } = useData();

  const [isOptimizing, setIsOptimizing] = useState(false);
  const [activeStep, setActiveStep] = useState(0);

  const methodName = (m) =>
    ({ classic: 'Standard Optimization', genetic: 'Evolutionary Algorithm' }[m] ||
    m);

  /* --------------------- Form change -------------------- */
  const handleFormChange = (vals) => setOptimizationSettings(vals);

  /* --------------------- Optimize ----------------------- */
  const handleOptimize = async () => {
    if (!cashFlowData) return;

    try {
      setIsLoading(true);
      setError(null);
      setIsOptimizing(true);
      setOptimizationResults(null);
      setActiveStep(1);

      const method = optimizationSettings.optimization_method;
      console.log(`Starting ${method} optimizationâ€¦`);
      console.log(`Using default model: ${selectedDefaults}`);

      const body = {
        optimization_settings: {
          ...optimizationSettings,
          selected_default_model: selectedDefaults
        },
        general_settings: {
          start_date: generalSettings.start_date.toISOString().split('T')[0],
          operational_expenses: generalSettings.operational_expenses,
          min_buffer: generalSettings.min_buffer,
        },
      };

      if (method === 'classic' && optimizationSettings.selected_strategies) {
        console.log(
          `Selected strategies: ${optimizationSettings.selected_strategies.join(', ')}`,
        );
      }

      const res = await optimizeStructure(body, method);
      console.log('Optimization successful:', res);
      setOptimizationResults(res);
      setActiveStep(2);
    } catch (e) {
      setError(
        `Optimization failed. Please check your parameters and try again. Error: ${e.message}`,
      );
      console.error('Optimization error:', e);
      setIsOptimizing(false);
      setActiveStep(0);
    } finally {
      setIsLoading(false);
    }
  };

  const handleOptimizationComplete = () => setIsOptimizing(false);

  const handleReset = () => {
    setOptimizationResults(null);
    setIsOptimizing(false);
    setActiveStep(0);
    setError(null);
    window.scrollTo(0, 0);
  };

  /* progress to results */
  useEffect(() => {
    if (optimizationResults && !isOptimizing) setActiveStep(2);
  }, [optimizationResults, isOptimizing]);

  /* ----------------------- RENDER ----------------------- */
  if (!cashFlowData) {
    return (
      <Container maxWidth="lg" sx={{ mt: 6, mb: 8 }}>
        <Paper
          elevation={0}
          sx={{
            p: 4,
            textAlign: 'center',
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.warning.main, 0.3)}`,
            backgroundColor: alpha(theme.palette.warning.main, 0.05),
          }}
        >
          <Box
            sx={{
              width: 70,
              height: 70,
              borderRadius: '50%',
              backgroundColor: alpha(theme.palette.warning.main, 0.1),
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              mb: 2,
            }}
          >
            <SpeedIcon
              sx={{ fontSize: 32, color: theme.palette.warning.main }}
            />
          </Box>
          <Typography variant="h5" color="warning.main" gutterBottom>
            Cash Flow Data Required
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Please upload your cashâ€‘flow data on the Home page before starting
            the optimization process.
          </Typography>
          <Button variant="outlined" color="warning" href="/" sx={{ mt: 3 }}>
            Go to Home Page
          </Button>
        </Paper>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ my: 4 }}>
      {/* ---------------- Header ---------------- */}
      <Paper
        elevation={0}
        sx={{
          p: 4,
          mb: 4,
          borderRadius: 2,
          background: `linear-gradient(135deg, ${alpha(
            theme.palette.secondary.main,
            0.05,
          )} 0%, ${alpha(theme.palette.primary.main, 0.07)} 100%)`,
          border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
        }}
      >
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            mb: 2,
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <TrendingUpIcon
              sx={{ fontSize: 28, color: theme.palette.secondary.main, mr: 1.5 }}
            />
            <Typography variant="h4" fontWeight={500}>
              ABS Structure Optimization
            </Typography>
          </Box>

          {(activeStep > 0 || optimizationResults) && (
            <Button
              variant="outlined"
              color="primary"
              startIcon={<RestartAltIcon />}
              onClick={handleReset}
              disabled={isLoading || isOptimizing}
              sx={{ fontWeight: 500 }}
            >
              Start Over
            </Button>
          )}
        </Box>
        <Typography variant="body1" color="text.secondary">
          Optimize your assetâ€‘backedâ€‘securities structure to maximise principal
          while maintaining buffer requirements.
        </Typography>
      </Paper>

      {/* ---------------- Alerts ---------------- */}
      {error && (
        <Alert severity="error" sx={{ mb: 3, borderRadius: 2 }}>
          {error}
        </Alert>
      )}

      {/* ---------------- Stepper ---------------- */}
      <Box sx={{ mb: 4 }}>
        <Stepper activeStep={activeStep} alternativeLabel>
          {['Configure Settings', 'Run Optimization', 'Review Results'].map(
            (label) => (
              <Step key={label}>
                <StepLabel
                  StepIconProps={{
                    sx: { '& .MuiStepIcon-text': { fontWeight: 'bold' } },
                  }}
                >
                  {label}
                </StepLabel>
              </Step>
            ),
          )}
        </Stepper>
      </Box>

      {/* ------------- Progress Component -------- */}
      {isOptimizing && (
        <OptimizationProgress
          isOptimizing={isOptimizing}
          onComplete={handleOptimizationComplete}
        />
      )}

      {/* ------------- Settings Form ------------- */}
      {(activeStep === 0 || (!isOptimizing && !optimizationResults)) && (
        <Paper
          elevation={0}
          sx={{
            p: 0,
            mb: 4,
            overflow: 'hidden',
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
            bgcolor: 'background.paper',
          }}
        >
          <Box
            sx={{
              px: 3,
              py: 2,
              display: 'flex',
              alignItems: 'center',
              borderBottom: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
              backgroundColor: alpha(theme.palette.primary.main, 0.02),
            }}
          >
            <SettingsIcon sx={{ color: 'text.secondary', mr: 1.5 }} />
            <Typography variant="h6" fontWeight="medium">
              Optimization Settings
            </Typography>

            <Chip
              label={methodName(optimizationSettings.optimization_method)}
              color="primary"
              variant="outlined"
              size="small"
              sx={{ ml: 'auto' }}
            />
          </Box>

          <Box sx={{ p: 3 }}>
            <OptimizationSettingsForm
              values={optimizationSettings}
              onChange={handleFormChange}
            />
          </Box>

          <Divider />

          <Box sx={{ p: 3, textAlign: 'center' }}>
            <Button
              variant="contained"
              color="primary"
              size="large"
              onClick={handleOptimize}
              disabled={isLoading || isOptimizing}
              startIcon={
                isLoading || isOptimizing ? (
                  <CircularProgress size={20} />
                ) : (
                  <PlayArrowIcon />
                )
              }
              sx={{ py: 1.2, px: 4, borderRadius: 2, fontWeight: 500 }}
            >
              {isLoading || isOptimizing ? 'Optimizingâ€¦' : 'Run Optimization'}
            </Button>
            <Typography
              variant="body2"
              color="text.secondary"
              sx={{ mt: 2 }}
            >
              This may take several minutes depending on data size and
              parameters.
            </Typography>
          </Box>
        </Paper>
      )}

      {/* ------------- Results -------------------- */}
      {optimizationResults && !isOptimizing && (
        <OptimizationResults results={optimizationResults} />
      )}
    </Container>
  );
};

export default OptimizationPage;

======================================================================

DOSYA: src\pages\ReceivablesAnalysis.js
==================================================
// src/pages/ReceivablesAnalysis.js
import React from 'react';
import { 
  Box, 
  Container, 
  Typography, 
  Paper, 
  Grid,
  Breadcrumbs,
  Link,
  useTheme,
  alpha,
  Divider
} from '@mui/material';
import NavigateNextIcon from '@mui/icons-material/NavigateNext';
import BarChartIcon from '@mui/icons-material/BarChart';
import { Link as RouterLink } from 'react-router-dom';
import ReceivablesDashboard from '../components/receivables/ReceivablesDashboard';

function ReceivablesAnalysis() {
  const theme = useTheme();

  return (
    <Container maxWidth="xl" sx={{ mt: 4, mb: 6 }}>
      {/* Breadcrumbs navigation */}
      <Breadcrumbs 
        separator={<NavigateNextIcon fontSize="small" />} 
        aria-label="breadcrumb"
        sx={{ mb: 3 }}
      >
        <Link 
          component={RouterLink} 
          to="/"
          color="inherit"
          underline="hover"
        >
          Dashboard
        </Link>
        <Typography color="text.primary">Receivables Analytics</Typography>
      </Breadcrumbs>
      
      {/* Page Header */}
      <Box 
        sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          mb: 3,
          pb: 2,
          borderBottom: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`
        }}
      >
        <BarChartIcon 
          sx={{ 
            fontSize: 36, 
            color: theme.palette.primary.main,
            mr: 2 
          }} 
        />
        <Box>
          <Typography variant="h4" component="h1" gutterBottom sx={{ mb: 1 }}>
            Receivables Analytics
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Comprehensive analysis of trade receivables for securitization
          </Typography>
        </Box>
      </Box>
      
      {/* Dashboard Context */}
      <Paper 
        sx={{ 
          p: 3, 
          mb: 4,
          background: 'linear-gradient(145deg, rgba(78, 123, 234, 0.05) 0%, rgba(14, 23, 42, 0) 100%)'
        }}
      >
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} md={7}>
            <Typography variant="body1" paragraph>
              This dashboard provides detailed analysis of the receivables portfolio for securitization assessment. All maturity analyses are calculated from April 28, 2025.
            </Typography>
            <Typography variant="body2" color="text.secondary">
              The analysis includes customer concentration risk evaluation, maturity distribution, document type analysis, and other key metrics to help in structuring optimal securitization strategies.
            </Typography>
          </Grid>
          <Grid item xs={12} md={5}>
            <Box 
              sx={{ 
                p: 2, 
                backgroundColor: alpha(theme.palette.background.default, 0.7),
                borderRadius: 1,
                border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`
              }}
            >
              <Typography variant="subtitle2" sx={{ color: theme.palette.primary.main, fontWeight: 600, mb: 1 }}>
                Analysis Highlights
              </Typography>
              <Divider sx={{ mb: 1 }} />
              <Typography variant="body2" sx={{ mb: 0.5 }}>
                â€¢ Total portfolio value: â‚º249,901,429
              </Typography>
              <Typography variant="body2" sx={{ mb: 0.5 }}>
                â€¢ Top 3 customers represent 90.12% of portfolio
              </Typography>
              <Typography variant="body2" sx={{ mb: 0.5 }}>
                â€¢ Average remaining maturity: 83 days
              </Typography>
              <Typography variant="body2">
                â€¢ 64.52% of receivables with maturity beyond 90 days
              </Typography>
            </Box>
          </Grid>
        </Grid>
      </Paper>
      
      {/* Main Dashboard */}
      <ReceivablesDashboard />
    </Container>
  );
}

export default ReceivablesAnalysis;

======================================================================

DOSYA: src\pages\ReportsPage.jsx
==================================================
// src/pages/ReportsPage.js
import React, { useState } from "react";
import {
  Box,
  Container,
  Typography,
  Breadcrumbs,
  Link,
  Paper,
  alpha,
  useTheme,
} from "@mui/material";
import { Link as RouterLink } from "react-router-dom";
import { Assessment, NavigateNext } from "@mui/icons-material";
import ReportsModule from "../components/reports/ReportsModule";
import ManagementReportCard from "../components/reports/ManagementReportCard";
import RegulatoryReportCard from "../components/reports/RegulatoryReportCard";
import InvestorReportCard from "../components/reports/InvestorReportCard";

const ReportsPage = () => {
  const theme = useTheme();
  const [activeReport, setActiveReport] = useState(null);

  // Report category definitions
  const reportCategories = {
    regulatory: {
      id: "regulatory",
      title: "Regulatory Report",
      color: "#1976d2", // Blue
    },
    investor: {
      id: "investor",
      title: "Investor Report",
      color: "#2e7d32", // Green
    },
    management: {
      id: "management",
      title: "Management Report",
      color: "#ed6c02", // Orange
    },
  };

  // Handle back to reports list
  const handleBackToReports = () => {
    setActiveReport(null);
  };

  // Render the appropriate report card based on selection
  const renderReportCard = () => {
    if (!activeReport) return null;

    const category = reportCategories[activeReport];

    switch (activeReport) {
      case "regulatory":
        return (
          <RegulatoryReportCard
            onBack={handleBackToReports}
            category={category}
          />
        );
      case "investor":
        return (
          <InvestorReportCard onBack={handleBackToReports} category={category} />
        );
      case "management":
        return (
          <ManagementReportCard
            onBack={handleBackToReports}
            category={category}
          />
        );
      default:
        return null;
    }
  };

  // Function to handle report selection from the module
  const handleReportSelect = (reportId) => {
    setActiveReport(reportId);
  };

  return (
    <Container maxWidth="xl" sx={{ py: 4 }}>
      {/* Page header with breadcrumbs */}
      <Box sx={{ mb: 4 }}>
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            mb: 1,
          }}
        >
          <Assessment
            sx={{
              mr: 1.5,
              color: theme.palette.primary.main,
              fontSize: 32,
            }}
          />
          <Typography variant="h4" component="h1" fontWeight="500">
            Reports
          </Typography>
        </Box>

        <Breadcrumbs
          separator={<NavigateNext fontSize="small" />}
          aria-label="breadcrumb"
          sx={{ color: "text.secondary" }}
        >
          <Link
            component={RouterLink}
            to="/"
            underline="hover"
            color="inherit"
            sx={{ display: "flex", alignItems: "center" }}
          >
            Dashboard
          </Link>
          <Typography color="text.primary">Reports</Typography>
          {activeReport && (
            <Typography color="text.primary">
              {reportCategories[activeReport]?.title || ""}
            </Typography>
          )}
        </Breadcrumbs>
      </Box>

      {/* Page content */}
      <Paper
        elevation={0}
        sx={{
          p: 0,
          borderRadius: 2,
          overflow: "hidden",
          border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        }}
      >
        {activeReport ? (
          renderReportCard()
        ) : (
          <ReportsModule onSelectReport={handleReportSelect} />
        )}
      </Paper>
    </Container>
  );
};

export default ReportsPage;

======================================================================

DOSYA: src\pages\StressTestingPage.js
==================================================
import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Grid, 
  Slider, 
  TextField, 
  Button, 
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Divider,
  alpha,
  IconButton,
  Tooltip,
  CircularProgress,
  Snackbar,
  Alert,
  Tab,
  Tabs,
  LinearProgress
} from '@mui/material';

import AssessmentIcon from '@mui/icons-material/Assessment';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import WarningAmberIcon from '@mui/icons-material/WarningAmber';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import TrendingDownIcon from '@mui/icons-material/TrendingDown';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import ShowChartIcon from '@mui/icons-material/ShowChart';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import PieChartIcon from '@mui/icons-material/PieChart';
import TableChartIcon from '@mui/icons-material/TableChart';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

import { useData } from '../contexts/DataContext';
import { useNavigate } from 'react-router-dom';
import { useTheme } from '@mui/material';
import { runEnhancedStressTest, formatStructureForStressTest } from '../services/apiService';

// Recharts components
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, 
  Legend, ResponsiveContainer, AreaChart, Area, BarChart, Bar, ScatterChart, 
  Scatter, ZAxis, ReferenceLine, PieChart, Pie, Cell
} from 'recharts';

// Custom tooltip for charts
const CustomTooltip = ({ active, payload, label }) => {
  const theme = useTheme();
  if (active && payload && payload.length) {
    return (
      <Paper sx={{ p: 2, boxShadow: 3 }}>
        <Typography variant="subtitle2" gutterBottom>
          {label}
        </Typography>
        
        {payload.map((entry, index) => (
          <Box key={`tooltip-item-${index}`} sx={{ display: 'flex', justifyContent: 'space-between', my: 0.5 }}>
            <Typography variant="body2" color="text.secondary" sx={{ mr: 2 }}>
              {entry.name}:
            </Typography>
            <Typography variant="body2" fontWeight="medium" sx={{ color: entry.color }}>
              {typeof entry.value === 'number' 
                ? entry.value.toFixed(2) + (entry.unit || '%')
                : entry.value}
            </Typography>
          </Box>
        ))}
      </Paper>
    );
  }
  return null;
};

// Main StressTestingPage component
const StressTestingPage = () => {
  const theme = useTheme();
  const { 
    savedResults, 
    stressScenarios,
    setStressScenarios,
    stressTestResults,
    setStressTestResults,
    saveStressTestResult,
    createStressTestRequest
  } = useData();
  const navigate = useNavigate();
  
  // State variables
  const [isLoading, setIsLoading] = useState(false);
  const [tabValue, setTabValue] = useState(0);
  
  // Scenario parameters
  const [nplRate, setNplRate] = useState(1.5);
  const [prepaymentRate, setPrepaymentRate] = useState(30);
  const [reinvestmentShift, setReinvestmentShift] = useState(0);
  const [recoveryRate, setRecoveryRate] = useState(0.5);
  const [recoveryLag, setRecoveryLag] = useState(90);
  const [delinquencyRate, setDelinquencyRate] = useState(null);
  
  // Scenario type
  const [scenarioType, setScenarioType] = useState('base');
  
  // Structure selection
  const [selectedStructureId, setSelectedStructureId] = useState('');
  const [availableStructures, setAvailableStructures] = useState([]);
  
  // Notifications
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  
  // Results display
  const [showResults, setShowResults] = useState(false);
  const [testResults, setTestResults] = useState({
    classBRate: {
      original: null,
      stressed: null,
      difference: null
    },
    cashFlowMetrics: {
      reductionPct: null,
      nplImpact: null,
      prepaymentTotal: null,
      reinvestmentTotal: null
    },
    modeledCashflows: []
  });
  
  // Get available structures on component mount
  useEffect(() => {
    if (savedResults && savedResults.length > 0) {
      const structures = savedResults.map(result => ({
        id: result.id,
        name: result.savedName || `${result.methodType || 'Default'} Structure`,
        type: result.methodType || 'default',
        classBCouponRate: result.class_b_coupon_rate || result.stressed_class_b_rate || 0,
        originalData: result // Store the entire result for later use
      }));
      
      setAvailableStructures(structures);
      
      if (structures.length > 0 && !selectedStructureId) {
        setSelectedStructureId(structures[0].id);
      }
    }
  }, [savedResults, selectedStructureId]);
  
  // Check if we have stored stress test results
  useEffect(() => {
    if (stressTestResults && 
        stressTestResults.structureId === selectedStructureId && 
        stressTestResults.scenarioType === scenarioType) {
      setTestResults(stressTestResults);
      setShowResults(true);
    }
  }, [stressTestResults, selectedStructureId, scenarioType]);
  
  // Tab change handler
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Structure selection handler
  const handleStructureChange = (event) => {
    setSelectedStructureId(event.target.value);
  };
  
  // Get the selected structure
  const getSelectedStructure = () => {
    return availableStructures.find(structure => structure.id === selectedStructureId) || null;
  };
  
  // Scenario selection handler
  const handleScenarioChange = (type) => {
    setScenarioType(type);
    
    // Update parameters based on scenario type
    if (stressScenarios && stressScenarios[type]) {
      const scenario = stressScenarios[type];
      setNplRate(scenario.npl_rate);
      setPrepaymentRate(scenario.prepayment_rate);
      setReinvestmentShift(scenario.reinvestment_shift);
    } else {
      // Default values if scenario not found
      switch (type) {
        case 'base':
          setNplRate(1.5);
          setPrepaymentRate(30);
          setReinvestmentShift(0);
          break;
        case 'moderate':
          setNplRate(3);
          setPrepaymentRate(15);
          setReinvestmentShift(-3);
          break;
        case 'severe':
          setNplRate(5);
          setPrepaymentRate(10);
          setReinvestmentShift(-5);
          break;
        default:
          // Keep current values for custom scenario
          break;
      }
    }
  };
  
  // Navigate back to calculation
  const handleNavigateToCalculation = () => {
    navigate('/calculation');
  };
  
  // Run stress test
  const handleRunStressTest = async () => {
    const selectedStructure = getSelectedStructure();
    
    if (!selectedStructure) {
      setSnackbarMessage("Please select a structure to test");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return;
    }
    
    setIsLoading(true);
    setShowResults(false);
    
    try {
      // Get structure details from savedResults
      const structureDetails = savedResults.find(r => r.id === selectedStructureId);
      
      if (!structureDetails) {
        throw new Error("Structure details not found");
      }
      
      // Get original Class B rate and calculate original coupon payment
      const originalClassBRate = structureDetails.class_b_coupon_rate || structureDetails.stressed_class_b_rate || 36.72;
      const classBPrincipal = structureDetails.class_b_nominal || 200000000; // Class B principal
      const originalClassBCouponPayment = (originalClassBRate / 100) * classBPrincipal; // Calculate original coupon payment
      const originalTotalCashflow = structureDetails.total_cashflow || 1942409829; // Original total cash flow in TL
      
      // Manually formatted structure with original values preserved
      const manuallyFormattedStructure = {
        start_date: structureDetails.start_date || "2025-02-12",
        a_maturities: [],
        a_base_rates: [],
        a_spreads: [],
        a_reinvest_rates: [],
        a_nominals: [],
        b_maturity: 300,
        b_base_rate: 0,
        b_spread: 0,
        b_reinvest_rate: 25.5, // Original value preserved
        b_nominal: classBPrincipal,
        ops_expenses: structureDetails.general_settings?.operational_expenses || 0,
        original_class_b_rate: originalClassBRate,
        original_total_cashflow: originalTotalCashflow
      };
      
      // Collect Class A tranche details
      if (structureDetails.tranche_results && Array.isArray(structureDetails.tranche_results)) {
        for (const tranche of structureDetails.tranche_results) {
          if (tranche["Is Class A"]) {
            manuallyFormattedStructure.a_maturities.push(tranche["Maturity Days"]);
            manuallyFormattedStructure.a_base_rates.push(parseFloat(tranche["Base Rate (%)"] || 0));
            manuallyFormattedStructure.a_spreads.push(parseFloat(tranche["Spread (bps)"] || 0));
            manuallyFormattedStructure.a_reinvest_rates.push(40); // Original value preserved
            manuallyFormattedStructure.a_nominals.push(tranche["Principal"] || 0);
          } else {
            manuallyFormattedStructure.b_maturity = tranche["Maturity Days"];
            manuallyFormattedStructure.b_base_rate = parseFloat(tranche["Base Rate (%)"] || 0);
            manuallyFormattedStructure.b_spread = parseFloat(tranche["Spread (bps)"] || 0);
            manuallyFormattedStructure.b_reinvest_rate = 25.5; // Original value preserved
            manuallyFormattedStructure.b_nominal = tranche["Principal"] || 0;
          }
        }
      }
      
      // If Class A not found, use default values - preserving original high rates
      if (manuallyFormattedStructure.a_maturities.length === 0) {
        manuallyFormattedStructure.a_maturities = [61, 120, 182, 274];
        manuallyFormattedStructure.a_base_rates = [45.6, 44.5, 43.3, 42.5];
        manuallyFormattedStructure.a_spreads = [0, 0, 0, 0];
        manuallyFormattedStructure.a_reinvest_rates = [40, 37.25, 32.5, 30]; // Original values preserved
        manuallyFormattedStructure.a_nominals = [480000000, 460000000, 425000000, 400000000];
      }
      
      // Scenario parameters - user-defined values preserved
      const scenarioParams = {
        name: scenarioType,
        npl_rate: nplRate,
        prepayment_rate: prepaymentRate,
        reinvestment_shift: reinvestmentShift,
        recovery_rate: recoveryRate,
        recovery_lag: recoveryLag,
        delinquency_rate: delinquencyRate
      };
      
      // Update scenarios
      const updatedScenarios = {
        ...stressScenarios,
        [scenarioType]: {
          ...scenarioParams
        }
      };
      setStressScenarios(updatedScenarios);
      
      // Create request parameters
      const requestParams = {
        structure: manuallyFormattedStructure,
        scenario: scenarioParams
      };
      
      // API call
      const response = await runEnhancedStressTest(requestParams);
      
      // Process results - calculate net loss and stressed coupon correctly
      // 1. Get total impact from stress scenario
      const nplImpact = response.stress_test?.total_npl_impact || 0;
      const prepaymentImpact = response.stress_test?.prepayment_impact || 0;
      const reinvestmentImpact = response.stress_test?.reinvestment_impact || 0;
      const totalStressImpact = nplImpact + prepaymentImpact - reinvestmentImpact;
      
      // 2. Calculate stressed Class B coupon payment
      const stressedClassBCouponPayment = originalClassBCouponPayment - totalStressImpact;
      
      // 3. Calculate stressed Class B coupon rate
      const stressedClassBCouponRate = (stressedClassBCouponPayment / classBPrincipal) * 100;
      
      // 4. Calculate net loss percentage based on original total cash flow
      const netLossPercentage = (totalStressImpact / originalTotalCashflow) * 100;
      
      // Calculate difference
      const difference = stressedClassBCouponRate - originalClassBRate;
      
      const resultsData = {
        structureId: selectedStructureId,
        scenarioType: scenarioType,
        classBRate: {
          original: originalClassBRate,
          stressed: stressedClassBCouponRate,
          difference: difference
        },
        cashFlowMetrics: {
          reductionPct: netLossPercentage,  // Net loss as percentage of original total cash flow
          nplImpact: nplImpact,
          prepaymentTotal: response.stress_test?.total_prepayment || 0,
          reinvestmentTotal: response.stress_test?.total_reinvestment || 0,
          netLoss: totalStressImpact,
          originalClassBCouponPayment: originalClassBCouponPayment,
          stressedClassBCouponPayment: stressedClassBCouponPayment,
          originalTotalCashflow: originalTotalCashflow
        },
        modeledCashflows: response.cashflows?.stress || []
      };
      
      // Validate results to ensure they're reasonable
      if (resultsData.classBRate.stressed < 0 || resultsData.classBRate.stressed > 100) {
        console.error("Unreasonable stress test results detected:", resultsData);
        throw new Error("Stress test returned unrealistic values. Please check the calculation logic.");
      }
      
      // Update state
      setTestResults(resultsData);
      setStressTestResults(resultsData);
      
      // Save results
      saveStressTestResult(
        resultsData, 
        `${scenarioType.charAt(0).toUpperCase() + scenarioType.slice(1)} Scenario`, 
        selectedStructureId
      );
      
      setIsLoading(false);
      setShowResults(true);
      
      // Success message
      setSnackbarMessage("Stress test completed successfully");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
      
    } catch (error) {
      console.error("Error running stress test:", error);
      setIsLoading(false);
      
      let errorMessage = "Error running stress test";
      if (error.response && error.response.data) {
        errorMessage += ": " + (error.response.data.detail || error.response.data);
      } else if (error.message) {
        errorMessage += ": " + error.message;
      }
      
      setSnackbarMessage(errorMessage);
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };
  
  // Close snackbar
  const handleCloseSnackbar = () => {
    setSnackbarOpen(false);
  };
  
  // Export results
  const handleExportResults = () => {
    if (!showResults) return;
    
    try {
      const selectedStructure = getSelectedStructure();
      const scenarioName = scenarioType.charAt(0).toUpperCase() + scenarioType.slice(1);
      
      // Create export data
      const exportData = {
        testDate: new Date().toISOString(),
        structure: {
          id: selectedStructureId,
          name: selectedStructure?.name || 'Unknown Structure'
        },
        scenario: {
          name: scenarioName,
          npl_rate: nplRate,
          prepayment_rate: prepaymentRate,
          reinvestment_shift: reinvestmentShift,
          recovery_rate: recoveryRate
        },
        results: testResults
      };
      
      // Convert to JSON
      const jsonStr = JSON.stringify(exportData, null, 2);
      const blob = new Blob([jsonStr], { type: 'application/json' });
      
      // Create download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `stress-test-${selectedStructureId}-${scenarioType}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      setSnackbarMessage("Results exported successfully");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
      
    } catch (error) {
      console.error("Export error:", error);
      setSnackbarMessage("Error exporting results");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };
  
  // Get color based on difference value
  const getDifferenceColor = (diff) => {
    if (diff >= 0) return theme.palette.success.main;
    if (diff >= -3) return theme.palette.warning.main;
    return theme.palette.error.main;
  };
  
  // Format pie chart data
  const formatPieData = () => {
    const { classBRate } = testResults;
    
    if (!classBRate.original) {
      return [];
    }
    
    // For pie chart, we want to show the proportion of original rate that remains
    const stressedRate = Math.max(0, classBRate.stressed);
    const loss = Math.max(0, classBRate.original - classBRate.stressed);
    
    // If the stressed rate is higher than original, show gain instead of loss
    if (stressedRate > classBRate.original) {
      return [
        { 
          name: "Original Rate", 
          value: classBRate.original, 
          color: theme.palette.primary.main 
        },
        { 
          name: "Stress Gain", 
          value: stressedRate - classBRate.original, 
          color: theme.palette.success.main 
        }
      ];
    }
    
    return [
      { 
        name: "Stressed Rate", 
        value: stressedRate, 
        color: theme.palette.primary.main 
      },
      { 
        name: "Stress Loss", 
        value: loss, 
        color: theme.palette.error.main 
      }
    ];
  };
  
  // Format cashflow comparison data
  const formatCashflowComparisonData = () => {
    if (!testResults.modeledCashflows || testResults.modeledCashflows.length === 0) {
      return [];
    }
    
    // Use first 10 cashflows for comparison
    return testResults.modeledCashflows.slice(0, 10).map(cf => ({
      date: new Date(cf.installment_date).toLocaleDateString(),
      original: cf.original_cashflow,
      actual: cf.total_actual_cashflow,
      difference: cf.total_actual_cashflow - cf.original_cashflow,
      percentDiff: ((cf.total_actual_cashflow / cf.original_cashflow) - 1) * 100
    }));
  };
  
  // Scenario comparison data
  const scenarioComparisonData = [
    {
      name: "Base Case",
      npl: 0,
      prepayment: 30,
      reinvestment: 0,
      rate: testResults.classBRate.original || 0
    },
    {
      name: scenarioType.charAt(0).toUpperCase() + scenarioType.slice(1),
      npl: nplRate,
      prepayment: prepaymentRate,
      reinvestment: reinvestmentShift,
      rate: testResults.classBRate.stressed || 0
    }
  ];
  
  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* Page Header */}
      <Box
        sx={{
          mb: 4,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <AssessmentIcon 
            sx={{ 
              fontSize: 36, 
              color: theme.palette.primary.main,
              mr: 2,
            }} 
          />
          <Box>
            <Typography variant="h4" fontWeight="500">
              Stress Testing
            </Typography>
            <Typography variant="subtitle1" color="text.secondary">
              Analyze Class B coupon performance under various market conditions
            </Typography>
          </Box>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            color="primary"
            startIcon={<ArrowBackIcon />}
            onClick={handleNavigateToCalculation}
          >
            Back to Structure Analysis
          </Button>
          
          <Button
            variant="contained"
            color="primary"
            startIcon={<SaveAltIcon />}
            disabled={!showResults}
            onClick={handleExportResults}
          >
            Export Results
          </Button>
        </Box>
      </Box>
      
      <Grid container spacing={4}>
        {/* Left Panel: Structure Selection and Parameters */}
        <Grid item xs={12} md={4}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            {/* Structure Selection */}
            <Paper
              elevation={3}
              sx={{
                p: 3,
                borderRadius: 2,
                backgroundColor: alpha(theme.palette.background.paper, 0.8),
              }}
            >
              <Typography variant="h6" gutterBottom>
                Stress Test Structure
              </Typography>
              
              {availableStructures.length > 0 ? (
                <FormControl fullWidth variant="outlined">
                  <InputLabel id="structure-select-label">Select Structure</InputLabel>
                  <Select
                    labelId="structure-select-label"
                    value={selectedStructureId}
                    onChange={handleStructureChange}
                    label="Select Structure"
                  >
                    {availableStructures.map((structure) => (
                      <MenuItem key={structure.id} value={structure.id}>
                        {structure.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              ) : (
                <Alert 
                  severity="info"
                  action={
                    <Button color="inherit" size="small" onClick={handleNavigateToCalculation}>
                      Go to Analysis
                    </Button>
                  }
                >
                  No saved structures found. Please calculate and save at least one structure before running stress tests.
                </Alert>
              )}
              
              {getSelectedStructure() && (
                <Box sx={{ mt: 2, p: 2, borderRadius: 1, bgcolor: alpha(theme.palette.info.main, 0.05) }}>
                  <Typography variant="subtitle2" gutterBottom>Selected Structure Details:</Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Type:</Typography>
                      <Typography variant="body1">
                        {getSelectedStructure().type === 'manual' ? 'Manual Calculation' : 
                         getSelectedStructure().type === 'genetic' ? 'Genetic Algorithm' : 
                         'Standard Algorithm'}
                      </Typography>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Class B Coupon Rate:</Typography>
                      <Typography variant="body1" fontWeight="medium" color="primary">
                        {getSelectedStructure().classBCouponRate.toFixed(2)}%
                      </Typography>
                    </Grid>
                  </Grid>
                </Box>
              )}
            </Paper>
            
            {/* Scenario Selection */}
            <Paper
              elevation={3}
              sx={{
                p: 3,
                borderRadius: 2,
                backgroundColor: alpha(theme.palette.background.paper, 0.8),
              }}
            >
              <Typography variant="h6" gutterBottom>
                Stress Scenario
              </Typography>
              
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 2, mb: 3 }}>
                <Button
                  variant={scenarioType === 'base' ? 'contained' : 'outlined'}
                  color="primary"
                  onClick={() => handleScenarioChange('base')}
                  size="medium"
                >
                  Base
                </Button>
                
                <Button
                  variant={scenarioType === 'moderate' ? 'contained' : 'outlined'}
                  color="secondary"
                  onClick={() => handleScenarioChange('moderate')}
                  size="medium"
                >
                  Moderate
                </Button>
                
                <Button
                  variant={scenarioType === 'severe' ? 'contained' : 'outlined'}
                  color="error"
                  onClick={() => handleScenarioChange('severe')}
                  size="medium"
                >
                  Severe
                </Button>
                
                <Button
                  variant={scenarioType === 'custom' ? 'contained' : 'outlined'}
                  onClick={() => handleScenarioChange('custom')}
                  size="medium"
                >
                  Custom
                </Button>
              </Box>
              
              <Divider sx={{ my: 2 }} />
              
              {/* Parameter Settings */}
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" display="flex" alignItems="center">
                  <WarningAmberIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.warning.main }} />
                  NPL Rate (%)
                  <Tooltip title="Non-Performing Loan rate affects the cash flow available for Class B payment" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Slider
                  value={nplRate}
                  onChange={(e, value) => setNplRate(value)}
                  valueLabelDisplay="auto"
                  min={0}
                  max={15}
                  step={0.5}
                  marks={[
                    { value: 0, label: '0%' },
                    { value: 5, label: '5%' },
                    { value: 15, label: '15%' }
                  ]}
                  sx={{ mt: 2, mb: 4 }}
                />
              </Box>
              
              <Box sx={{ mt: 2 }}>
                <Typography variant="subtitle2" display="flex" alignItems="center">
                  <TrendingDownIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.primary.light }} />
                  Prepayment Rate (%)
                  <Tooltip title="Early prepayment rates affect the expected cash flow timing" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Slider
                  value={prepaymentRate}
                  onChange={(e, value) => setPrepaymentRate(value)}
                  valueLabelDisplay="auto"
                  min={0}
                  max={50}
                  step={1}
                  marks={[
                    { value: 0, label: '0%' },
                    { value: 30, label: '30%' },
                    { value: 50, label: '50%' }
                  ]}
                  sx={{ mt: 2, mb: 4 }}
                />
              </Box>
              
              <Box sx={{ mt: 2 }}>
                <Typography variant="subtitle2" display="flex" alignItems="center">
                  <AttachMoneyIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.secondary.light }} />
                  Reinvestment Rate Shift (Â±%)
                  <Tooltip title="All reinvestment rates will shift by this amount" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Slider
                  value={reinvestmentShift}
                  onChange={(e, value) => setReinvestmentShift(value)}
                  valueLabelDisplay="auto"
                  min={-10}
                  max={10}
                  step={1}
                  marks={[
                    { value: -10, label: '-10%' },
                    { value: 0, label: '0%' },
                    { value: 10, label: '+10%' }
                  ]}
                  sx={{ mt: 2, mb: 3 }}
                />
              </Box>
              
              <Divider sx={{ my: 2 }} />
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Advanced Parameters
                </Typography>
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      fullWidth
                      label="Recovery Rate (0-1)"
                      value={recoveryRate}
                      onChange={(e) => setRecoveryRate(Number(e.target.value))}
                      type="number"
                      inputProps={{ min: 0, max: 1, step: 0.05 }}
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      fullWidth
                      label="Delinquency Rate (%)"
                      value={delinquencyRate === null ? '' : delinquencyRate}
                      onChange={(e) => {
                        const value = e.target.value === '' ? null : Number(e.target.value);
                        setDelinquencyRate(value);
                      }}
                      type="number"
                      inputProps={{ min: 0, max: 100, step: 0.1 }}
                      size="small"
                      helperText="Leave blank to use half of NPL rate"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      label="Recovery Lag (days)"
                      value={recoveryLag}
                      onChange={(e) => setRecoveryLag(Number(e.target.value))}
                      type="number"
                      inputProps={{ min: 0, step: 1 }}
                      size="small"
                    />
                  </Grid>
                </Grid>
              </Box>
            </Paper>
            
            {/* Run Button */}
            <Button
              variant="contained"
              color="primary"
              fullWidth
              size="large"
              startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : <AssessmentIcon />}
              onClick={handleRunStressTest}
              disabled={isLoading || !selectedStructureId}
              sx={{ py: 1.5, boxShadow: '0 4px 10px rgba(0,0,0,0.3)' }}
            >
              {isLoading ? 'Running Tests...' : 'Run Stress Test'}
            </Button>
          </Box>
        </Grid>
        
        {/* Right Panel: Results */}
        <Grid item xs={12} md={8}>
          {isLoading && (
            <Box sx={{ mt: 2, mb: 4 }}>
              <Typography variant="subtitle1" gutterBottom>
                Running stress test...
              </Typography>
              <LinearProgress />
            </Box>
          )}
          
          {!showResults && !isLoading && (
            <Paper
              elevation={3}
              sx={{
                p: 4,
                borderRadius: 2,
                backgroundColor: alpha(theme.palette.background.paper, 0.8),
                textAlign: 'center',
                height: '300px',
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'center',
                alignItems: 'center'
              }}
            >
              <AssessmentIcon sx={{ fontSize: 60, color: alpha(theme.palette.primary.main, 0.3), mb: 2 }} />
              <Typography variant="h6" gutterBottom>
                Stress Test Results Will Appear Here
              </Typography>
              <Typography variant="body1" color="text.secondary">
                Select a structure and run the stress test
              </Typography>
            </Paper>
          )}
          
          {showResults && testResults.classBRate.original !== null && (
            <>
              {/* Tab Navigation */}
              <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
                <Tabs 
                  value={tabValue} 
                  onChange={handleTabChange}
                  variant="scrollable"
                  scrollButtons="auto"
                >
                  <Tab icon={<ShowChartIcon />} label="Summary" iconPosition="start" />
                  <Tab icon={<PieChartIcon />} label="Coupon Analysis" iconPosition="start" />
                  <Tab icon={<TableChartIcon />} label="Cash Flow" iconPosition="start" />
                </Tabs>
              </Box>
              
              {/* Tab Content */}
              {tabValue === 0 && (
                <>
                  {/* Summary Results */}
                  <Paper
                    elevation={3}
                    sx={{
                      p: 3,
                      mb: 3,
                      borderRadius: 2,
                      backgroundColor: alpha(theme.palette.background.paper, 0.8),
                    }}
                  >
                    <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                      <ShowChartIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
                      Class B Coupon Rate Results
                    </Typography>
                    
                    <Grid container spacing={3}>
                      <Grid item xs={12} sm={4}>
                        <Paper sx={{ p: 2, textAlign: 'center', bgcolor: alpha(theme.palette.primary.main, 0.1) }}>
                          <Typography variant="subtitle2" color="text.secondary">
                            Original Coupon Rate
                          </Typography>
                          <Typography variant="h4" color="primary" fontWeight="bold">
                            {testResults.classBRate.original.toFixed(2)}%
                          </Typography>
                        </Paper>
                      </Grid>
                      
                      <Grid item xs={12} sm={4}>
                        <Paper sx={{ p: 2, textAlign: 'center', bgcolor: alpha(theme.palette.secondary.main, 0.1) }}>
                          <Typography variant="subtitle2" color="text.secondary">
                            Stressed Coupon Rate
                          </Typography>
                          <Typography variant="h4" color="secondary" fontWeight="bold">
                            {testResults.classBRate.stressed.toFixed(2)}%
                          </Typography>
                        </Paper>
                      </Grid>
                      
                      <Grid item xs={12} sm={4}>
                        <Paper sx={{ 
                          p: 2, 
                          textAlign: 'center', 
                          bgcolor: alpha(getDifferenceColor(testResults.classBRate.difference), 0.1)
                        }}>
                          <Typography variant="subtitle2" color="text.secondary">
                            Impact
                          </Typography>
                          <Typography 
                            variant="h4" 
                            fontWeight="bold"
                            color={getDifferenceColor(testResults.classBRate.difference)}
                          >
                            {testResults.classBRate.difference > 0 ? '+' : ''}
                            {testResults.classBRate.difference.toFixed(2)}%
                          </Typography>
                        </Paper>
                      </Grid>
                    </Grid>
                    
                    <Box sx={{ mt: 3, p: 2, borderRadius: 2, bgcolor: alpha(theme.palette.info.main, 0.05) }}>
                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={4}>
                          <Typography variant="body2" color="text.secondary">Cash Flow Reduction:</Typography>
                          <Typography variant="h6" fontWeight="medium" color="error">
                            {testResults.cashFlowMetrics.reductionPct.toFixed(2)}%
                          </Typography>
                        </Grid>
                        <Grid item xs={12} sm={4}>
                          <Typography variant="body2" color="text.secondary">Net Loss:</Typography>
                          <Typography variant="h6" fontWeight="medium">
                            {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.netLoss)}
                          </Typography>
                        </Grid>
                        <Grid item xs={12} sm={4}>
                          <Typography variant="body2" color="text.secondary">NPL Impact:</Typography>
                          <Typography variant="h6" fontWeight="medium">
                            {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.nplImpact)}
                          </Typography>
                        </Grid>
                      </Grid>
                    </Box>
                  </Paper>
                  
                  {/* Comparison Chart */}
                  <Paper
                    elevation={3}
                    sx={{
                      p: 3,
                      mb: 3,
                      borderRadius: 2,
                      backgroundColor: alpha(theme.palette.background.paper, 0.8),
                    }}
                  >
                    <Typography variant="h6" gutterBottom>
                      Scenario Comparison
                    </Typography>
                    
                    <Box sx={{ height: 350, mt: 2 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={scenarioComparisonData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="name" />
                          <YAxis 
                            tickFormatter={(value) => `${value}%`}
                            domain={[0, 'dataMax + 5']}
                          />
                          <RechartsTooltip content={<CustomTooltip />} />
                          <Legend />
                          <Bar 
                            dataKey="rate" 
                            name="Class B Coupon Rate" 
                            fill={theme.palette.primary.main}
                            maxBarSize={80}
                          />
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                    
                    <Divider sx={{ my: 3 }} />
                    
                    <Typography variant="subtitle1" gutterBottom>
                      Scenario Parameters
                    </Typography>
                    
                    <Grid container spacing={2} sx={{ mt: 1 }}>
                      <Grid item xs={12} sm={4}>
                        <Paper sx={{ p: 2, textAlign: 'center' }}>
                          <Typography variant="body2" color="text.secondary">NPL Rate</Typography>
                          <Typography variant="h6" fontWeight="medium">
                            {nplRate}%
                          </Typography>
                        </Paper>
                      </Grid>
                      <Grid item xs={12} sm={4}>
                        <Paper sx={{ p: 2, textAlign: 'center' }}>
                          <Typography variant="body2" color="text.secondary">Prepayment</Typography>
                          <Typography variant="h6" fontWeight="medium">
                            {prepaymentRate}%
                          </Typography>
                        </Paper>
                      </Grid>
                      <Grid item xs={12} sm={4}>
                        <Paper sx={{ p: 2, textAlign: 'center' }}>
                          <Typography variant="body2" color="text.secondary">Reinvestment Shift</Typography>
                          <Typography variant="h6" fontWeight="medium">
                            {reinvestmentShift > 0 ? '+' : ''}{reinvestmentShift}%
                          </Typography>
                        </Paper>
                      </Grid>
                    </Grid>
                  </Paper>
                </>
              )}
              
              {/* Coupon Analysis Tab */}
              {tabValue === 1 && (
                <>
                  <Paper
                    elevation={3}
                    sx={{
                      p: 3,
                      mb: 3,
                      borderRadius: 2,
                      backgroundColor: alpha(theme.palette.background.paper, 0.8),
                    }}
                  >
                    <Typography variant="h6" gutterBottom>
                      Class B Coupon Analysis
                    </Typography>
                    
                    <Grid container spacing={3}>
                      <Grid item xs={12} md={6}>
                        <Box sx={{ height: 350 }}>
                          <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                              <Pie
                                data={formatPieData()}
                                dataKey="value"
                                nameKey="name"
                                cx="50%"
                                cy="50%"
                                outerRadius={120}
                                innerRadius={60}
                                labelLine={false}
                                label={({ percent }) => `${(percent * 100).toFixed(1)}%`}
                              >
                                {formatPieData().map((entry, index) => (
                                  <Cell key={`cell-${index}`} fill={entry.color} />
                                ))}
                              </Pie>
                              <RechartsTooltip content={<CustomTooltip />} />
                              <Legend />
                            </PieChart>
                          </ResponsiveContainer>
                        </Box>
                      </Grid>
                      
                      <Grid item xs={12} md={6}>
                        <Box sx={{ p: 2, height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                          <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                            Coupon Rate Details
                          </Typography>
                          
                          <Box sx={{ mt: 2 }}>
                            <Typography variant="body2" color="text.secondary">Original Coupon Rate:</Typography>
                            <Typography variant="h5" color="primary" fontWeight="medium">
                              {testResults.classBRate.original.toFixed(2)}%
                            </Typography>
                            
                            <Divider sx={{ my: 2 }} />
                            
                            <Typography variant="body2" color="text.secondary">Stressed Coupon Rate:</Typography>
                            <Typography variant="h5" color="secondary" fontWeight="medium">
                              {testResults.classBRate.stressed.toFixed(2)}%
                            </Typography>
                            
                            <Divider sx={{ my: 2 }} />
                            
                            <Typography variant="body2" color="text.secondary">Coupon Rate Difference:</Typography>
                            <Typography 
                              variant="h5" 
                              fontWeight="medium"
                              color={getDifferenceColor(testResults.classBRate.difference)}
                            >
                              {testResults.classBRate.difference > 0 ? '+' : ''}
                              {testResults.classBRate.difference.toFixed(2)}%
                            </Typography>
                            
                            <Divider sx={{ my: 2 }} />
                            
                            <Typography variant="body2" color="text.secondary">Percentage Change:</Typography>
                            <Typography 
                              variant="h5" 
                              fontWeight="medium"
                              color={getDifferenceColor(testResults.classBRate.difference)}
                            >
                              {((testResults.classBRate.stressed - testResults.classBRate.original) / testResults.classBRate.original * 100).toFixed(2)}%
                            </Typography>
                          </Box>
                        </Box>
                      </Grid>
                    </Grid>
                  </Paper>
                </>
              )}
              
              {/* Cash Flow Tab */}
              {tabValue === 2 && (
                <>
                  <Paper
                    elevation={3}
                    sx={{
                      p: 3,
                      mb: 3,
                      borderRadius: 2,
                      backgroundColor: alpha(theme.palette.background.paper, 0.8),
                    }}
                  >
                    <Typography variant="h6" gutterBottom>
                      Cash Flow Comparison
                    </Typography>
                    
                    <Box sx={{ height: 350, mt: 2 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={formatCashflowComparisonData()}
                          margin={{ top: 20, right: 30, left: 20, bottom: 30 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis 
                            dataKey="date" 
                            label={{ value: 'Payment Date', position: 'insideBottom', offset: -15 }}
                            angle={-45}
                            textAnchor="end"
                            height={60}
                          />
                          <YAxis 
                            tickFormatter={(value) => `â‚º${(value/1000).toFixed(0)}k`}
                          />
                          <RechartsTooltip content={<CustomTooltip />} />
                          <Legend />
                          <Bar 
                            dataKey="original" 
                            name="Original Cash Flow" 
                            fill={theme.palette.primary.main}
                            maxBarSize={20}
                          />
                          <Bar 
                            dataKey="actual" 
                            name="Stressed Cash Flow" 
                            fill={theme.palette.secondary.main}
                            maxBarSize={20}
                          />
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Paper>
                  
                  <Paper
                    elevation={3}
                    sx={{
                      p: 3,
                      mb: 3,
                      borderRadius: 2,
                      backgroundColor: alpha(theme.palette.background.paper, 0.8),
                    }}
                  >
                    <Typography variant="h6" gutterBottom>
                      Cash Flow Impact Analysis
                    </Typography>
                    
                    <Grid container spacing={3}>
                      <Grid item xs={12} sm={6} md={3}>
                        <Paper sx={{ p: 2, textAlign: 'center', bgcolor: alpha(theme.palette.error.main, 0.1) }}>
                          <Typography variant="subtitle2" color="text.secondary">
                            NPL Impact
                          </Typography>
                          <Typography variant="h6" color="error" fontWeight="medium">
                            {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.nplImpact)}
                          </Typography>
                        </Paper>
                      </Grid>
                      
                      <Grid item xs={12} sm={6} md={3}>
                        <Paper sx={{ p: 2, textAlign: 'center', bgcolor: alpha(theme.palette.warning.main, 0.1) }}>
                          <Typography variant="subtitle2" color="text.secondary">
                            Cash Flow Loss
                          </Typography>
                          <Typography variant="h6" color="warning.dark" fontWeight="medium">
                            {testResults.cashFlowMetrics.reductionPct.toFixed(2)}%
                          </Typography>
                        </Paper>
                      </Grid>
                      
                      <Grid item xs={12} sm={6} md={3}>
                        <Paper sx={{ p: 2, textAlign: 'center', bgcolor: alpha(theme.palette.info.main, 0.1) }}>
                          <Typography variant="subtitle2" color="text.secondary">
                            Prepayment
                          </Typography>
                          <Typography variant="h6" color="info.dark" fontWeight="medium">
                            {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.prepaymentTotal)}
                          </Typography>
                        </Paper>
                      </Grid>
                      
                      <Grid item xs={12} sm={6} md={3}>
                        <Paper sx={{ p: 2, textAlign: 'center', bgcolor: alpha(theme.palette.success.main, 0.1) }}>
                          <Typography variant="subtitle2" color="text.secondary">
                            Reinvestment
                          </Typography>
                          <Typography variant="h6" color="success.dark" fontWeight="medium">
                            {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.reinvestmentTotal)}
                          </Typography>
                        </Paper>
                      </Grid>
                    </Grid>
                    
                    <Box sx={{ mt: 3, p: 2, borderRadius: 2, bgcolor: alpha(theme.palette.info.main, 0.05) }}>
                      <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                        Stress Scenario Summary
                      </Typography>
                      
                      <Typography variant="body1" paragraph>
                        This stress test modeled cash flows under a {scenarioType === 'base' ? 'base' : scenarioType === 'moderate' ? 'moderate' : scenarioType === 'severe' ? 'severe' : 'custom'} scenario with {nplRate}% NPL rate and {prepaymentRate}% prepayment rate assumptions.
                      </Typography>
                      
                      <Typography variant="body1" paragraph>
                        Original Class B coupon payment: {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.originalClassBCouponPayment || 0)}<br/>
                        Total stress impact (net loss): {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.netLoss || 0)}<br/>
                        Stressed Class B coupon payment: {new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(testResults.cashFlowMetrics.stressedClassBCouponPayment || 0)}
                      </Typography>
                      
                      <Typography variant="body1" paragraph>
                        The stressed Class B coupon rate is calculated as:<br/>
                        (Stressed Coupon Payment / Class B Principal) Ã— 100 = {testResults.classBRate.stressed.toFixed(2)}%
                      </Typography>
                      
                      <Typography variant="body1">
                        Net loss as percentage of original total cash flow: {testResults.cashFlowMetrics.reductionPct.toFixed(2)}%
                      </Typography>
                    </Box>
                  </Paper>
                </>
              )}
            </>
          )}
        </Grid>
      </Grid>
      
      {/* Snackbar */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleCloseSnackbar} 
          severity={snackbarSeverity}
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default StressTestingPage;

======================================================================

DOSYA: src\services\apiService.js
==================================================
// src/services/apiService.js
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

/**
 * Shared axios client
 */
const apiClient = axios.create({
  baseURL: API_URL,
  headers: { 'Content-Type': 'application/json' },
  // 5 minutes (300,000 ms) - optimization processes can take long
  timeout: 300_000,
});

/* --------------------------------------------------------------------- */
/*                               UPLOAD                                  */
/* --------------------------------------------------------------------- */

/**
 * Upload Excel file
 * @param {File} file
 * @returns {Promise<Object>}
 */
const uploadFile = async (file) => {
  const formData = new FormData();
  formData.append('file', file);

  try {
    console.log('Uploading file:', file.name);

    const response = await axios.post(
      `${API_URL}/upload-excel/`,
      formData,
      {
        headers: { 'Content-Type': 'multipart/form-data' },
      }
    );

    console.log('File upload successful');
    return response.data;
  } catch (error) {
    console.error('Error uploading file:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                             CALCULATION                               */
/* --------------------------------------------------------------------- */

/**
 * Calculation service.
 * If optimization output is sent as 2nd parameter,
 * Class B nominal is automatically added.
 *
 * @param {Object} params - CalculationRequest body
 * @param {Object|null} optResult - OptimizationResult (optional)
 * @returns {Promise<Object>}
 */
const calculateResults = async (params, optResult = null) => {
  try {
    // Optional Class B nominal integration
    const finalParams = { ...params };

    if (
      optResult &&
      optResult.class_b_nominal &&
      Number(optResult.class_b_nominal) > 0
    ) {
      finalParams.tranche_b = {
        ...(finalParams.tranche_b || {}),
        nominal: optResult.class_b_nominal,
      };
    }

    console.log('Calculating results with params:', finalParams);

    const response = await apiClient.post('/calculate/', finalParams);

    console.log('Calculation successful');
    return response.data;
  } catch (error) {
    console.error('Error calculating results:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                             OPTIMIZATION                              */
/* --------------------------------------------------------------------- */

/**
 * Structure optimization (classic | genetic)
 *
 * @param {Object} params - OptimizationRequest body
 * @param {'classic'|'genetic'} [method='classic']
 * @returns {Promise<Object>}
 */
const optimizeStructure = async (params, method = 'classic') => {
  try {
    console.log(`Starting optimization with method: ${method}`);
    console.log(
      'Optimization params:',
      JSON.stringify(params, null, 2)
    );

    // Create cancellable request
    const CancelToken = axios.CancelToken;
    const source = CancelToken.source();

    // 5 minute timeout
    const timeout = setTimeout(() => {
      source.cancel(
        'Operation timeout: The optimization process took too long'
      );
    }, 300_000);

    const response = await apiClient.post(
      `/optimize/${method}/`,
      params,
      { cancelToken: source.token }
    );

    clearTimeout(timeout);

    console.log(`${method} optimization completed successfully`);
    return response.data;
  } catch (error) {
    console.error(`Error in ${method} optimization:`, error);

    if (axios.isCancel(error)) {
      console.log('Request canceled:', error.message);
      throw new Error(
        'Optimization process was canceled: ' + error.message
      );
    }

    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);

      const status = error.response.status;
      let message = 'Optimization failed';

      switch (status) {
        case 400:
          message =
            'Invalid optimization parameters: ' +
            (error.response.data.detail ||
              'Please check your parameters');
          break;
        case 500:
          message =
            'Server error during optimization. The calculation may be too complex.';
          break;
        case 504:
          message =
            'Optimization timed out. Try again with simpler parameters.';
          break;
        default:
          message =
            `Optimization error (${status}): ` +
            (error.response.data.detail || error.message);
      }

      throw new Error(message);
    }

    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                           PROGRESS POLLING                            */
/* --------------------------------------------------------------------- */

/**
 * Poll optimization progress from server
 * @returns {Promise<Object>}
 */
const pollOptimizationProgress = async () => {
  try {
    const response = await apiClient.get('/optimize/progress/');
    return response.data;
  } catch (error) {
    console.error('Error polling optimization progress:', error);
    return {
      progress: 0,
      phase: 'Error',
      message: 'Failed to get progress information',
      error: true,
    };
  }
};

/* --------------------------------------------------------------------- */
/*                            STRESS TESTING                             */
/* --------------------------------------------------------------------- */

/**
 * Format structure for stress test API
 * @param {Object} savedStructure - Saved structure from context
 * @returns {Object} - Formatted structure for API
 */
const formatStructureForStressTest = (savedStructure) => {
  console.log('Formatting structure for stress test:', savedStructure);
  
  // Create a_tranches array from tranchesA
  const a_tranches = [];
  
  // Check if tranches_a exists in the saved structure
  const tranchesArray = savedStructure.tranches_a || savedStructure.tranchesA || [];
  console.log('Found tranches array:', tranchesArray);
  
  if (Array.isArray(tranchesArray) && tranchesArray.length > 0) {
    for (const tranche of tranchesArray) {
      console.log('Processing tranche:', tranche);
      a_tranches.push({
        maturity_days: Number(tranche.maturity_days),
        base_rate: Number(tranche.base_rate),
        spread: Number(tranche.spread),
        reinvest_rate: Number(tranche.reinvest_rate),
        nominal: Number(tranche.nominal)
      });
    }
  } else {
    console.warn('No tranches_a found in the structure');
  }
  
  // Format tranche_b
  const trancheB = savedStructure.tranche_b || savedStructure.trancheB || {};
  console.log('Found tranche B:', trancheB);
  
  const b_tranche = {
    maturity_days: Number(trancheB.maturity_days || 180),
    base_rate: Number(trancheB.base_rate || 0),
    spread: Number(trancheB.spread || 0),
    reinvest_rate: Number(trancheB.reinvest_rate || 0),
    nominal: Number(trancheB.nominal || 0)
  };
  
  // If no nominal is provided, calculate it as 10% of total structure
  if (!b_tranche.nominal || b_tranche.nominal <= 0) {
    const total_a_nominal = a_tranches.reduce((sum, t) => sum + t.nominal, 0);
    // Calculate using the percentage formula (10% / 90%)
    const percent_b = 10;
    b_tranche.nominal = (total_a_nominal * percent_b) / (100 - percent_b);
    b_tranche.nominal = Math.round(b_tranche.nominal / 1000) * 1000;
    console.log('Calculated B nominal:', b_tranche.nominal);
  }
  
  // Format date
  let start_date = savedStructure.start_date || 
                   savedStructure.general_settings?.start_date || 
                   new Date().toISOString().split('T')[0];
  
  console.log('Start date before formatting:', start_date);
  
  // If it's a Date object, convert to ISO format
  if (start_date instanceof Date) {
    start_date = start_date.toISOString().split('T')[0];
  }
  
  console.log('Start date after formatting:', start_date);
  
  // Return formatted structure for API
  const formattedStructure = {
    start_date: start_date,
    a_maturities: a_tranches.map(t => t.maturity_days),
    a_base_rates: a_tranches.map(t => t.base_rate),
    a_spreads: a_tranches.map(t => t.spread),
    a_reinvest_rates: a_tranches.map(t => t.reinvest_rate),
    a_nominals: a_tranches.map(t => t.nominal),
    b_maturity: b_tranche.maturity_days,
    b_base_rate: b_tranche.base_rate,
    b_spread: b_tranche.spread,
    b_reinvest_rate: b_tranche.reinvest_rate,
    b_nominal: b_tranche.nominal,
    ops_expenses: Number(savedStructure.general_settings?.operational_expenses || 0)
  };
  
  console.log('Final formatted structure:', formattedStructure);
  return formattedStructure;
};

/**
 * Run a basic stress test on a structure
 * @param {Object} params - StressTestRequest body
 * @returns {Promise<Object>}
 */
const runStressTest = async (params) => {
  try {
    console.log('Running stress test with params:', params);
    
    const response = await apiClient.post('/stress-test/', params);
    
    console.log('Stress test successful');
    return response.data;
  } catch (error) {
    console.error('Error running stress test:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/**
 * Run enhanced stress test with detailed cash flow modeling
 * @param {Object} params - EnhancedStressTestRequest body
 * @returns {Promise<Object>}
 */
const runEnhancedStressTest = async (params) => {
  try {
    console.log('Running enhanced stress test with params:', params);
    
    // Log structure details
    console.log('Structure details:', JSON.stringify(params.structure, null, 2));
    console.log('Scenario details:', JSON.stringify(params.scenario, null, 2));
    
    // Log specific fields to debug date issues
    console.log('Start date:', params.structure.start_date);
    console.log('Start date type:', typeof params.structure.start_date);
    
    const response = await apiClient.post('/enhanced-stress-test/', params);
    
    console.log('Enhanced stress test successful');
    return response.data;
  } catch (error) {
    console.error('Error running enhanced stress test:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
      console.error('Full error response:', JSON.stringify(error.response.data, null, 2));
      
      // Extract specific validation errors
      if (error.response.data && error.response.data.detail) {
        console.error('Validation errors:', error.response.data.detail);
      }
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                                EXPORT                                 */
/* --------------------------------------------------------------------- */

export {
  uploadFile,
  calculateResults,
  optimizeStructure,
  pollOptimizationProgress,
  formatStructureForStressTest,
  runStressTest,
  runEnhancedStressTest
};

======================================================================

