FRONTEND KLASÃ–R YAPISI:
======================

ðŸ“¦src
  â”£ ðŸ“œApp.js
  â”£ ðŸ“œindex.css
  â”£ ðŸ“œindex.js
  â”£ ðŸ“‚components
    â”£ ðŸ“œFileUploader.js
    â”£ ðŸ“œFooter.js
    â”£ ðŸ“œTopBar.js
    â”£ ðŸ“‚calculation
      â”£ ðŸ“œCalculationResults.js
      â”£ ðŸ“œClassBCouponAdjuster.js
      â”£ ðŸ“œGeneralSettingsForm.js
      â”£ ðŸ“œInterestRatesTable.js
      â”£ ðŸ“œTrancheAForm.js
      â”£ ðŸ“œTrancheBForm.js
    â”£ ðŸ“‚optimization
      â”£ ðŸ“œOptimizationProgress.js
      â”£ ðŸ“œOptimizationResults.js
      â”£ ðŸ“œOptimizationSettingsForm.js
  â”£ ðŸ“‚contexts
    â”£ ðŸ“œDataContext.js
  â”£ ðŸ“‚pages
    â”£ ðŸ“œCalculationPage.js
    â”£ ðŸ“œCalculationResults.js
    â”£ ðŸ“œComparisonPage.js
    â”£ ðŸ“œHomePage.js
    â”£ ðŸ“œOptimizationPage.js
    â”£ ðŸ“œStressTestingPage.js
  â”£ ðŸ“‚services
    â”£ ðŸ“œapiService.js


BACKEND KLASÃ–R YAPISI:
=====================

ðŸ“¦backend
  â”£ ðŸ“œDockerfile
  â”£ ðŸ“œrequirements.txt
  â”£ ðŸ“‚app
    â”£ ðŸ“œmain.py
    â”£ ðŸ“œ__init__.py
    â”£ ðŸ“‚models
      â”£ ðŸ“œinput_models.py
      â”£ ðŸ“œoutput_models.py
      â”£ ðŸ“‚__pycache__
    â”£ ðŸ“‚routers
      â”£ ðŸ“œcalculation.py
      â”£ ðŸ“œoptimization.py
      â”£ ðŸ“‚__pycache__
    â”£ ðŸ“‚services
      â”£ ðŸ“œcalculation_service.py
      â”£ ðŸ“œoptimization_service.py
      â”£ ðŸ“‚__pycache__
    â”£ ðŸ“‚utils
      â”£ ðŸ“œcash_flow_utils.py
      â”£ ðŸ“œfinance_utils.py
      â”£ ðŸ“œtranche_utils.py
      â”£ ðŸ“‚__pycache__
    â”£ ðŸ“‚__pycache__


FRONTEND DOSYALARI VE Ä°Ã‡ERÄ°KLERÄ°:
===============================

DOSYA: src\App.js
==================================================
// src/App.js
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";

import TopBar from "./components/TopBar";
import Footer from "./components/Footer";
import HomePage from "./pages/HomePage";
import CalculationPage from "./pages/CalculationPage";
import OptimizationPage from "./pages/OptimizationPage";
import StressTestingPage from "./pages/StressTestingPage";
import { DataProvider } from "./contexts/DataContext";
import ComparisonPage from "./pages/ComparisonPage";

// Create a dark navy theme
const theme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#4e7bea', // Modern blue
      light: '#6d92fd',
      dark: '#3461c7',
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#9c27b0', // Purple
      light: '#bb4fd3',
      dark: '#7b1fa2',
      contrastText: '#ffffff',
    },
    error: {
      main: '#f44336',
      light: '#ff7961',
      dark: '#d32f2f',
    },
    warning: {
      main: '#ff9800',
      light: '#ffb74d',
      dark: '#f57c00',
    },
    info: {
      main: '#29b6f6',
      light: '#4fc3f7',
      dark: '#0288d1',
    },
    success: {
      main: '#4caf50',
      light: '#80e27e',
      dark: '#087f23',
    },
    background: {
      default: '#0f172a', // Dark navy
      paper: '#1e293b', // Lighter navy
    },
    text: {
      primary: '#e2e8f0',
      secondary: '#94a3b8',
    },
    divider: 'rgba(148, 163, 184, 0.12)',
  },
  typography: {
    fontFamily: '"Roboto", "Segoe UI", "Helvetica Neue", sans-serif',
    h4: {
      fontWeight: 500,
    },
    h5: {
      fontWeight: 500,
    },
    h6: {
      fontWeight: 500,
    },
    subtitle1: {
      fontWeight: 500,
    },
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
          borderRadius: 8,
        },
        elevation1: {
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
        },
        elevation2: {
          boxShadow: '0 3px 6px rgba(0,0,0,0.7), 0 2px 4px rgba(0,0,0,0.8)',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          fontWeight: 500,
          borderRadius: 6,
        },
        contained: {
          boxShadow: '0 1px 2px rgba(0,0,0,0.3)',
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        head: {
          fontWeight: 600,
          backgroundColor: 'rgba(78, 123, 234, 0.15)',
        },
      },
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          '&:last-child td': {
            borderBottom: 0,
          },
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          boxShadow: '0 1px 3px rgba(0,0,0,0.5), 0 1px 2px rgba(0,0,0,0.7)',
          backgroundColor: '#0f172a', // Match background.default
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          borderRadius: 6,
        },
      },
    },
    MuiCssBaseline: {
      styleOverrides: {
        body: {
          scrollbarColor: "#6b6b6b #2b2b2b",
          "&::-webkit-scrollbar, & *::-webkit-scrollbar": {
            backgroundColor: "#2b2b2b",
            width: 8,
          },
          "&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb": {
            borderRadius: 8,
            backgroundColor: "#6b6b6b",
            minHeight: 24,
          },
          "&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus": {
            backgroundColor: "#959595",
          },
          "&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active": {
            backgroundColor: "#959595",
          },
          "&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover": {
            backgroundColor: "#959595",
          },
        },
      },
    },
  },
});

function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <DataProvider>
        <Router>
          <TopBar />
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/calculation" element={<CalculationPage />} />
            <Route path="/optimization" element={<OptimizationPage />} />
            <Route path="/comparison" element={<ComparisonPage />} />
            <Route path="/stress-testing" element={<StressTestingPage />} />
          </Routes>
          <Footer />
        </Router>
      </DataProvider>
    </ThemeProvider>
  );
}

export default App;

======================================================================

DOSYA: src\index.css
==================================================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

======================================================================

DOSYA: src\index.js
==================================================
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

======================================================================

DOSYA: src\components\FileUploader.js
==================================================
// src/components/FileUploader.js
import React, { useState } from "react";
import { 
  Box, 
  Button, 
  Typography, 
  Alert, 
  Paper, 
  CircularProgress,
  alpha,
  useTheme
} from "@mui/material";
import UploadFileIcon from "@mui/icons-material/UploadFile";
import FileUploadOutlinedIcon from "@mui/icons-material/FileUploadOutlined";
import DescriptionOutlinedIcon from "@mui/icons-material/DescriptionOutlined";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import { uploadFile } from "../services/apiService";
import { useData } from "../contexts/DataContext";

const FileUploader = () => {
  const { setCashFlowData, setIsLoading, setError, isLoading, error, cashFlowData } = useData();
  const theme = useTheme();

  const [file, setFile] = useState(null);
  const [dragActive, setDragActive] = useState(false);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFile(e.dataTransfer.files[0]);
    }
  };

  const handleChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!file) return;
    
    try {
      setIsLoading(true);
      setError(null);
      
      const data = await uploadFile(file);
      setCashFlowData(data);
    } catch (error) {
      setError('Failed to upload file. Please check the file format and try again.');
      console.error('Upload error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Box sx={{ width: '100%', maxWidth: 700, mx: 'auto', my: 3 }}>
      {error && (
        <Alert 
          severity="error" 
          sx={{ 
            mb: 3, 
            borderRadius: 2,
            '& .MuiAlert-icon': {
              alignItems: 'center'
            }
          }}
        >
          {error}
        </Alert>
      )}
      
      <form onSubmit={handleSubmit}>
        <Box
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
          sx={{
            border: '2px dashed',
            borderColor: dragActive 
                ? theme.palette.primary.main
                : alpha(theme.palette.primary.main, 0.3),
            borderRadius: 2,
            p: 4,
            mb: 3,
            textAlign: 'center',
            cursor: 'pointer',
            transition: 'all 0.2s ease-in-out',
            backgroundColor: dragActive 
              ? alpha(theme.palette.primary.main, 0.15)
              : alpha(theme.palette.background.paper, 0.4),
            '&:hover': {
              borderColor: theme.palette.primary.main,
              backgroundColor: alpha(theme.palette.primary.main, 0.1)
            }
          }}
          onClick={() => document.getElementById('file-upload').click()}
        >
          <input
            type="file"
            id="file-upload"
            accept=".xlsx,.xls"
            onChange={handleChange}
            style={{ display: 'none' }}
          />
          {!file ? (
            <>
              <CloudUploadIcon sx={{ 
                fontSize: 64, 
                color: theme.palette.primary.main, 
                mb: 2, 
                filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'
              }} />
              <Typography variant="h6" gutterBottom fontWeight="medium" color="primary.main">
                Drag and drop your Excel file here
              </Typography>
              <Typography variant="body1" color="text.secondary">
                or click to browse files
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ 
                mt: 2, 
                opacity: 0.8
              }}>
                Supported formats: .xlsx, .xls
              </Typography>
            </>
          ) : (
            <>
              <DescriptionOutlinedIcon sx={{ 
                fontSize: 50, 
                color: theme.palette.primary.main, 
                mb: 2,
                filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'
              }} />
              <Typography variant="h6" gutterBottom color="primary.main">
                File selected
              </Typography>
              <Typography variant="body1" fontWeight="medium">
                {file.name}
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                Size: {(file.size / 1024).toFixed(1)} KB
              </Typography>
              <Typography variant="body2" color="primary.main" sx={{ mt: 2 }}>
                Click to select a different file
              </Typography>
            </>
          )}
        </Box>
        
        <Button
          type="submit"
          variant="contained"
          color="primary"
          fullWidth
          disabled={!file || isLoading}
          size="large"
          sx={{
            py: 1.5,
            fontWeight: 500,
            boxShadow: '0 4px 6px rgba(0,0,0,0.3)',
            background: isLoading ? 
              'linear-gradient(45deg, #4e7bea, #6d92fd)' : 
              'linear-gradient(45deg, #4e7bea, #3461c7)',
            '&:hover': {
              boxShadow: '0 6px 10px rgba(0,0,0,0.4)',
              background: 'linear-gradient(45deg, #5d8aff, #4e7bea)'
            }
          }}
          startIcon={isLoading ? <CircularProgress size={24} color="inherit" /> : <UploadFileIcon />}
        >
          {isLoading ? 'Processing...' : 'Upload and Process'}
        </Button>
      </form>
      
      {/* Display data summary after upload */}
      {cashFlowData && !isLoading && !error && (
        <Paper 
          elevation={2} 
          sx={{ 
            mt: 4, 
            p: 3, 
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.success.main, 0.4)}`,
            background: `linear-gradient(to right, ${alpha(theme.palette.success.dark, 0.1)}, ${alpha(theme.palette.success.main, 0.05)})`,
            boxShadow: `0 4px 12px ${alpha(theme.palette.success.dark, 0.25)}`
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <DescriptionOutlinedIcon sx={{ 
              color: theme.palette.success.main, 
              mr: 1,
              filter: 'drop-shadow(0 1px 2px rgba(0,0,0,0.3))'
            }} />
            <Typography variant="h6" color="success.main" fontWeight="medium">
              File Uploaded Successfully
            </Typography>
          </Box>
          
          <Box sx={{ 
            mt: 2,
            p: 2,
            backgroundColor: alpha(theme.palette.background.paper, 0.8),
            borderRadius: 1,
            boxShadow: `0 2px 8px ${alpha('#000', 0.2)}`
          }}>
            <Typography variant="subtitle2" gutterBottom color="text.secondary">
              Summary
            </Typography>
            
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, mt: 1 }}>
              <Box>
                <Typography variant="body2" color="text.secondary">Total Records</Typography>
                <Typography variant="h6">{cashFlowData.total_records}</Typography>
              </Box>
              
              <Box>
                <Typography variant="body2" color="text.secondary">Total Principal</Typography>
                <Typography variant="h6">{new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(cashFlowData.total_principal)}</Typography>
              </Box>
              
              <Box>
                <Typography variant="body2" color="text.secondary">Total Interest</Typography>
                <Typography variant="h6">{new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(cashFlowData.total_interest)}</Typography>
              </Box>
              
              <Box>
                <Typography variant="body2" color="text.secondary">Total Cash Flow</Typography>
                <Typography variant="h6">{new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(cashFlowData.total_cash_flow)}</Typography>
              </Box>
            </Box>
            
            <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
              <b>Date Range:</b> {cashFlowData.date_range[0]} - {cashFlowData.date_range[1]}
            </Typography>
          </Box>
        </Paper>
      )}
    </Box>
  );
};

export default FileUploader;

======================================================================

DOSYA: src\components\Footer.js
==================================================
// frontend/src/components/Footer.js
import React from 'react';
import { 
  Box, 
  Typography, 
  Container, 
  Link, 
  Divider,
  useTheme,
  alpha
} from '@mui/material';
import BusinessIcon from '@mui/icons-material/Business';

const Footer = () => {
  const theme = useTheme();
  const currentYear = new Date().getFullYear();
  
  return (
    <Box
      component="footer"
      sx={{
        py: 4,
        mt: 'auto',
        borderTop: `1px solid ${alpha(theme.palette.primary.main, 0.15)}`,
        background: `linear-gradient(to right, ${theme.palette.background.default}, ${alpha(theme.palette.primary.dark, 0.1)}, ${theme.palette.background.default})`,
      }}
    >
      <Container maxWidth="lg">
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <BusinessIcon sx={{ fontSize: 24, color: theme.palette.primary.main, mr: 1 }} />
            <Typography variant="h6" color="primary.main" fontWeight="medium">
              Advanced ABS Design
            </Typography>
          </Box>
          
          <Divider sx={{ width: '40px', mb: 2, borderColor: alpha(theme.palette.primary.main, 0.3) }} />
          
          <Typography variant="body2" color="text.secondary" align="center">
            Â© {currentYear} Advanced ABS Design | All Rights Reserved
          </Typography>
          
          <Box sx={{ mt: 2, display: 'flex', gap: 3 }}>
            <Link href="#" color="text.secondary" sx={{ 
              textDecoration: 'none',
              '&:hover': { color: theme.palette.primary.main }
            }}>
              Terms of Service
            </Link>
            <Link href="#" color="text.secondary" sx={{ 
              textDecoration: 'none', 
              '&:hover': { color: theme.palette.primary.main }
            }}>
              Privacy Policy
            </Link>
            <Link href="#" color="text.secondary" sx={{ 
              textDecoration: 'none',
              '&:hover': { color: theme.palette.primary.main }
            }}>
              Contact Us
            </Link>
          </Box>
        </Box>
      </Container>
    </Box>
  );
};

export default Footer;

======================================================================

DOSYA: src\components\TopBar.js
==================================================
// frontend/src/components/TopBar.js
import React from 'react';
import { Link as RouterLink, useLocation } from 'react-router-dom';
import { 
  AppBar, 
  Toolbar, 
  Typography, 
  Button, 
  Box, 
  Container, 
  useTheme 
} from '@mui/material';
import CalculateIcon from '@mui/icons-material/Calculate';
import OptimizeIcon from '@mui/icons-material/Speed';
import HomeIcon from '@mui/icons-material/Home';
import CompareIcon from '@mui/icons-material/Compare';
import BusinessIcon from '@mui/icons-material/Business';
import AssessmentIcon from '@mui/icons-material/Assessment';
import { alpha } from '@mui/material/styles';

const TopBar = () => {
  const location = useLocation();
  const theme = useTheme();
  
  // Menu items with updated professional names
  const menuItems = [
    {
      path: '/',
      label: 'Dashboard',
      icon: <HomeIcon />
    },
    {
      path: '/calculation',
      label: 'Structure Analysis',
      icon: <CalculateIcon />
    },
    {
      path: '/optimization',
      label: 'Portfolio Optimizer',
      icon: <OptimizeIcon />
    },
    {
      path: '/comparison',
      label: 'Performance Metrics',
      icon: <CompareIcon />
    },
    {
      path: '/stress-testing',
      label: 'Stress Testing',
      icon: <AssessmentIcon />
    }
  ];
  
  return (
    <AppBar 
      position="static" 
      elevation={0}
      sx={{
        background: 'linear-gradient(90deg, #0f172a 0%, #1e293b 100%)',
        borderBottom: '1px solid rgba(78, 123, 234, 0.15)'
      }}
    >
      <Container maxWidth="lg">
        <Toolbar disableGutters>
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              flexGrow: 1,
            }}
          >
            <BusinessIcon 
              sx={{ 
                fontSize: 28, 
                color: theme.palette.primary.main,
                mr: 1.5 
              }} 
            />
            <Typography
              variant="h6"
              component={RouterLink}
              to="/"
              sx={{
                textDecoration: 'none',
                color: 'inherit',
                fontWeight: 600,
                letterSpacing: 0.5,
              }}
            >
              Advanced ABS Design
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', gap: 1 }}>
            {menuItems.map((item) => (
              <Button 
                key={item.path}
                color="inherit" 
                component={RouterLink} 
                to={item.path}
                startIcon={item.icon}
                sx={{
                  px: 2,
                  py: 1,
                  borderRadius: 1,
                  backgroundColor: location.pathname === item.path 
                    ? alpha(theme.palette.primary.main, 0.15) 
                    : 'transparent',
                  '&:hover': {
                    backgroundColor: location.pathname === item.path 
                      ? alpha(theme.palette.primary.main, 0.25) 
                      : alpha(theme.palette.primary.main, 0.1),
                  }
                }}
              >
                {item.label}
              </Button>
            ))}
          </Box>
        </Toolbar>
      </Container>
    </AppBar>
  );
};

export default TopBar;

======================================================================

DOSYA: src\components\calculation\CalculationResults.js
==================================================
// src/components/calculation/CalculationResults.js
import React from "react";
import { 
  Box, 
  Typography, 
  Paper,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Divider,
  Chip,
  alpha
} from "@mui/material";
import { useTheme } from "@mui/material/styles";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';

const CalculationResults = ({ results }) => {
  const theme = useTheme();
  
  if (!results) {
    return (
      <Paper sx={{ 
        p: 4, 
        textAlign: "center", 
        borderRadius: 2,
        backgroundColor: alpha(theme.palette.info.light, 0.08),
        border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
      }}>
        <Typography variant="h6" color="text.secondary" gutterBottom>
          Results Not Available
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Please start the calculation process to view results
        </Typography>
      </Paper>
    );
  }
  
  // Format currency values
  const formatCurrency = (value) => {
    if (value === undefined || value === null) return "â‚º0.00";
    return new Intl.NumberFormat("tr-TR", { style: "currency", currency: "TRY" }).format(value);
  };
  
  // Format percentage values with null check
  const formatPercent = (value) => {
    if (value === undefined || value === null) return "0.00%";
    return `${value.toFixed(2)}%`;
  };

  // Extract color values from theme
  const classAColor = theme.palette.primary.main;
  const classBColor = theme.palette.secondary.main;
  
  // Prepare data for tranche comparison chart
  const chartData = [
    {
      name: "Class A",
      principal: results.class_a_principal || 0,
      interest: results.class_a_interest || 0,
      total: results.class_a_total || 0,
    },
    {
      name: "Class B",
      principal: results.class_b_principal || 0,
      coupon: results.class_b_coupon || 0,
      total: results.class_b_total || 0,
    },
  ];

  // Calculate totals with null checks
  const totalClassA = results.class_a_total || 0;
  const totalClassB = results.class_b_total || 0;
  const totalAll = totalClassA + totalClassB;
  
  // Check if minimum buffer requirement is met
  const minBufferTarget = 5.0;
  const isBufferMet = (results.min_buffer_actual || 0) >= minBufferTarget;

  return (
    <Box>
      {/* Summary Section */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.primary.main, 0.03)
        }}
      >
        <Typography variant="h6" color="primary.main" gutterBottom fontWeight="medium">
          Calculation Results Summary
        </Typography>
        
        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 3, mt: 2 }}>
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary">
              Payment Totals
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Class A Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalClassA)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalClassA / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.primary.main, 0.1),
                          color: theme.palette.primary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Class B Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalClassB)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalClassB / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.secondary.main, 0.1),
                          color: theme.palette.secondary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Grand Total</TableCell>
                    <TableCell align="right">{formatCurrency(totalAll)}</TableCell>
                    <TableCell align="right">
                      <Chip 
                        size="small" 
                        label="100.00%"
                        sx={{ 
                          bgcolor: alpha(theme.palette.info.main, 0.1),
                          color: theme.palette.info.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
          
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary">
              Principal and Interest
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: classAColor,
                            mr: 1 
                          }} 
                        />
                        Class A
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_interest)}</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: classBColor,
                            mr: 1 
                          }} 
                        />
                        Class B
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_coupon)}</TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Total</TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_principal || 0) + (results.class_b_principal || 0))}
                    </TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_interest || 0) + (results.class_b_coupon || 0))}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </Box>
        
        <Divider sx={{ my: 3, opacity: 0.6 }} />
        
        <Box sx={{ 
          display: 'flex', 
          gap: 4, 
          flexWrap: 'wrap',
          backgroundColor: isBufferMet ? alpha(theme.palette.success.main, 0.08) : alpha(theme.palette.error.main, 0.08),
          p: 2,
          borderRadius: 1
        }}>
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Minimum Buffer Requirement
            </Typography>
            <Typography variant="h6" sx={{ mt: 0.5 }}>
              {formatPercent(minBufferTarget)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Actual Minimum Buffer (Class A)
            </Typography>
            <Typography variant="h6" color={isBufferMet ? "success.main" : "error.main"} sx={{ mt: 0.5 }}>
              {formatPercent(results.min_buffer_actual)}
            </Typography>
          </Box>
          
          <Box sx={{ ml: 'auto' }}>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Status
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
              {isBufferMet ? (
                <CheckCircleOutlineIcon color="success" sx={{ mr: 1 }} />
              ) : (
                <ErrorOutlineIcon color="error" sx={{ mr: 1 }} />
              )}
              <Typography 
                variant="h6" 
                color={isBufferMet ? "success.main" : "error.main"}
              >
                {isBufferMet ? "Requirement Met" : "Requirement Not Met"}
              </Typography>
            </Box>
          </Box>
        </Box>
      </Paper>
      
      {/* Financing Cost Analysis */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.info.main, 0.03)
        }}
      >
        <Typography variant="h6" color="info.main" gutterBottom fontWeight="medium">
          Financing Cost Analysis
        </Typography>
        
        <TableContainer sx={{ 
          mt: 2,
          bgcolor: 'background.paper', 
          borderRadius: 1,
          boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
        }}>
          <Table>
            <TableBody>
              <TableRow>
                <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Principal Paid to Bank:</TableCell>
                <TableCell align="right" sx={{ fontWeight: 600, pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                  {formatCurrency(results.total_principal_paid)}
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Loan Principal:</TableCell>
                <TableCell align="right" sx={{ pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                  {formatCurrency(results.total_loan_principal)}
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell sx={{ pl: 2, fontWeight: 600 }}>
                  Financing {(results.financing_cost || 0) > 0 ? "Profit" : "Loss"}:
                </TableCell>
                <TableCell 
                  align="right" 
                  sx={{ 
                    fontWeight: 600,
                    pr: 2,
                    color: (results.financing_cost || 0) > 0 ? "success.main" : "error.main"
                  }}
                >
                  {formatCurrency(Math.abs(results.financing_cost || 0))}
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      
      {/* Tranche Results Chart */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
          backgroundColor: 'background.paper'
        }}
      >
        <Typography variant="h6" gutterBottom fontWeight="medium">
          Tranche Comparison
        </Typography>
        
        <Box sx={{ height: 400, mt: 3 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={chartData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip 
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  borderRadius: 8,
                  border: 'none',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.15)'
                }}
              />
              <Legend />
              <Bar 
                dataKey="principal" 
                name="Principal" 
                stackId="a" 
                fill={theme.palette.primary.main}
                radius={[4, 4, 0, 0]}
              />
              <Bar 
                dataKey="interest" 
                name="Interest" 
                stackId="a" 
                fill={theme.palette.primary.light}
                radius={[4, 4, 0, 0]}
              />
              <Bar 
                dataKey="coupon" 
                name="Coupon" 
                stackId="a" 
                fill={theme.palette.secondary.main}
                radius={[4, 4, 0, 0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </Paper>
      
      {/* Detailed Results Table */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
          backgroundColor: 'background.paper'
        }}
      >
        <Typography variant="h6" gutterBottom fontWeight="medium">
          Detailed Tranche Results
        </Typography>
        
        {results.tranche_results && results.tranche_results.length > 0 ? (
          <TableContainer sx={{ 
            maxHeight: 440,
            mt: 2,
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Tranche</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Days</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Date</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Principal</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Interest / Coupon</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Total Payment</TableCell>
                  <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Buffer Ratio (%)</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {results.tranche_results.map((tranche, index) => (
                  <TableRow 
                    key={index}
                    sx={{ 
                      backgroundColor: tranche["Is Class A"] 
                        ? alpha(theme.palette.primary.main, 0.03)
                        : alpha(theme.palette.secondary.main, 0.03),
                      '&:hover': {
                        backgroundColor: tranche["Is Class A"] 
                          ? alpha(theme.palette.primary.main, 0.07)
                          : alpha(theme.palette.secondary.main, 0.07),
                      }
                    }}
                  >
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: tranche["Is Class A"] ? classAColor : classBColor,
                            mr: 1 
                          }} 
                        />
                        {tranche["Tranche"]}
                      </Box>
                    </TableCell>
                    <TableCell>{tranche["Maturity Days"]}</TableCell>
                    <TableCell>{tranche["Maturity Date"]}</TableCell>
                    <TableCell>{formatCurrency(tranche["Principal"])}</TableCell>
                    <TableCell>
                      {formatCurrency(
                        tranche["Is Class A"] ? tranche["Interest"] : tranche["Coupon Payment"]
                      )}
                    </TableCell>
                    <TableCell>{formatCurrency(tranche["Total Payment"])}</TableCell>
                    <TableCell>
                      <Chip 
                        size="small" 
                        label={formatPercent(tranche["Buffer Cash Flow Ratio (%)"])}
                        sx={{ 
                          bgcolor: 
                            tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                              ? alpha(theme.palette.success.main, 0.1)
                              : alpha(theme.palette.warning.main, 0.1),
                          color: 
                            tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                              ? theme.palette.success.main
                              : theme.palette.warning.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        ) : (
          <Typography variant="body2" color="text.secondary" sx={{ py: 3, textAlign: "center" }}>
            Detailed results are not available yet
          </Typography>
        )}
      </Paper>
    </Box>
  );
};

export default CalculationResults;

======================================================================

DOSYA: src\components\calculation\ClassBCouponAdjuster.js
==================================================
// src/components/calculation/ClassBCouponAdjuster.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  TextField, 
  Paper, 
  Button, 
  CircularProgress,
  Alert,
  Divider,
  Chip,
  useTheme,
  alpha,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody
} from '@mui/material';
import TargetIcon from '@mui/icons-material/TrackChanges';
import TuneIcon from '@mui/icons-material/Tune';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import { useData } from '../../contexts/DataContext';
import { calculateResults } from '../../services/apiService';

const ClassBCouponAdjuster = () => {
  const theme = useTheme();
  const { 
    trancheB, 
    setTrancheB, 
    calculationResults, 
    setCalculationResults, 
    createCalculationRequest, 
    isLoading, 
    setIsLoading, 
    setError
  } = useData();
  
  const [targetRate, setTargetRate] = useState(42.0);
  const [currentRate, setCurrentRate] = useState(0);
  const [currentDirectRate, setCurrentDirectRate] = useState(0);
  const [adjustmentHistory, setAdjustmentHistory] = useState([]);
  const [adjustmentMessage, setAdjustmentMessage] = useState('');
  const [adjustmentSuccess, setAdjustmentSuccess] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  
  // Initialize from calculation results
  useEffect(() => {
    if (calculationResults) {
      // Find Class B tranche in interest_rate_conversions
      const classBTranche = calculationResults.interest_rate_conversions?.find(
        rate => rate.Tranche.includes('Class B')
      );
      
      if (classBTranche) {
        const effectiveRate = 
          classBTranche['Effective Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Effective Coupon Rate (%)']);
            
        const directRate = 
          classBTranche['Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Coupon Rate (%)']);
        
        setCurrentRate(effectiveRate);
        setCurrentDirectRate(directRate);
        
        // Initialize target rate to 42.0 (or another default)
        if (targetRate === 0) {
          setTargetRate(42.0);
        }
      }
    }
  }, [calculationResults]);
  
  // Manual adjustment with 1M increments
  const adjustNominal = async (direction) => {
    // Get current nominal
    const currentNominal = trancheB.nominal || 0;
    
    // Determine adjustment amount - changed to 1 million
    const increaseAmount = 1000000; // 1 million increase
    
    // Calculate new nominal
    let newNominal;
    if (direction === 'increase') {
      // Increase nominal to decrease rate
      newNominal = currentNominal + increaseAmount;
    } else {
      // Decrease nominal to increase rate
      newNominal = Math.max(1000000, currentNominal - increaseAmount);
    }
    
    // Update state
    setAdjustmentMessage(`Adjusting nominal to ${newNominal.toLocaleString()}...`);
    
    // Create updated tranche
    const updatedTrancheB = {
      ...trancheB,
      nominal: newNominal
    };
    
    // Update tranche B
    setTrancheB(updatedTrancheB);
    
    // Recalculate
    try {
      setIsLoading(true);
      
      // Create request
      const request = createCalculationRequest();
      
      // Calculate results
      const result = await calculateResults(request);
      
      // Update results
      setCalculationResults(result);
      
      // Extract new rates
      const classBTranche = result.interest_rate_conversions?.find(
        rate => rate.Tranche.includes('Class B')
      );
      
      if (classBTranche) {
        const newEffectiveRate = 
          classBTranche['Effective Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Effective Coupon Rate (%)']);
            
        const newDirectRate = 
          classBTranche['Coupon Rate (%)'] === '-' 
            ? 0 
            : parseFloat(classBTranche['Coupon Rate (%)']);
        
        // Update state
        setCurrentRate(newEffectiveRate);
        setCurrentDirectRate(newDirectRate);
        
        // Check if we're close to target
        const diff = Math.abs(newEffectiveRate - targetRate);
        const isClose = diff <= 0.5; // Within 0.5%
        
        // Set message
        setAdjustmentMessage(
          isClose 
            ? `Target rate achieved! Current rate: ${newEffectiveRate.toFixed(2)}% (target: ${targetRate.toFixed(2)}%)`
            : `New effective rate: ${newEffectiveRate.toFixed(2)}% (target: ${targetRate.toFixed(2)}%). Continue adjusting.`
        );
        
        setAdjustmentSuccess(isClose);
        
        // Add to history
        setAdjustmentHistory(prev => [
          ...prev,
          {
            nominal: newNominal,
            effectiveRate: newEffectiveRate,
            directRate: newDirectRate,
            difference: diff
          }
        ]);
        
        // Give suggestion for next step
        if (newEffectiveRate > targetRate) {
          setAdjustmentMessage(prev => `${prev} Try increasing nominal to lower the rate.`);
        } else if (newEffectiveRate < targetRate) {
          setAdjustmentMessage(prev => `${prev} Try decreasing nominal to increase the rate.`);
        }
      }
    } catch (error) {
      console.error("Error calculating with new nominal:", error);
      setAdjustmentMessage(`Error: ${error.message}`);
      setError(`Calculation error: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  const formatNominal = (nominal) => {
    return new Intl.NumberFormat('tr-TR').format(nominal);
  };
  
  return (
    <Paper 
      sx={{ 
        p: 3, 
        mb: 3,
        border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
        backgroundColor: alpha(theme.palette.secondary.main, 0.03)
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <TargetIcon sx={{ color: theme.palette.secondary.main, mr: 1 }} />
        <Typography variant="h6" color="secondary.main" fontWeight="medium">
          Class B Coupon Rate Adjuster
        </Typography>
      </Box>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        Fine-tune the Class B nominal amount to achieve your target effective coupon rate.
        Use the buttons below to adjust in 1 million increments.
      </Typography>
      
      <Box sx={{ 
        display: 'flex', 
        flexWrap: 'wrap', 
        gap: 4, 
        alignItems: 'center',
        mb: 3
      }}>
        <Box sx={{ minWidth: 200 }}>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Current Effective Coupon Rate
          </Typography>
          <Typography variant="h5" color={
            Math.abs(currentRate - targetRate) <= 0.5 ? 'success.main' : 'text.primary'
          }>
            {currentRate.toFixed(2)}%
          </Typography>
          <Typography variant="caption" color="text.secondary">
            Direct Coupon Rate: {currentDirectRate.toFixed(2)}%
          </Typography>
        </Box>
        
        <Box sx={{ minWidth: 200 }}>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Target Effective Coupon Rate
          </Typography>
          <TextField
            size="small"
            value={targetRate}
            onChange={(e) => setTargetRate(parseFloat(e.target.value) || 0)}
            InputProps={{
              endAdornment: '%',
              inputProps: { min: 0, step: 0.1 }
            }}
            disabled={isLoading}
            type="number"
          />
        </Box>
        
        <Box sx={{ minWidth: 200 }}>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Current Class B Nominal
          </Typography>
          <Typography variant="h5">
            {formatNominal(trancheB.nominal || 0)}
          </Typography>
        </Box>
      </Box>
      
      {adjustmentMessage && (
        <Alert 
          severity={adjustmentSuccess ? "success" : "info"} 
          sx={{ mb: 3 }}
        >
          {adjustmentMessage}
        </Alert>
      )}
      
      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={() => adjustNominal('increase')}
          disabled={isLoading}
          startIcon={<ExpandMoreIcon />}
        >
          Increase Nominal (+1M) â†’ Lower Rate
        </Button>
        
        <Button
          variant="contained"
          color="error"
          onClick={() => adjustNominal('decrease')}
          disabled={isLoading}
          startIcon={<ExpandLessIcon />}
        >
          Decrease Nominal (-1M) â†’ Higher Rate
        </Button>
        
        <Button
          variant="outlined"
          color="secondary"
          onClick={() => setShowHistory(!showHistory)}
        >
          {showHistory ? 'Hide' : 'Show'} Adjustment History
        </Button>
      </Box>
      
      {/* Quick reference */}
      <Paper elevation={0} sx={{ p: 2, backgroundColor: alpha(theme.palette.info.main, 0.05), mb: 3, border: `1px solid ${alpha(theme.palette.info.main, 0.2)}` }}>
        <Typography variant="subtitle2" gutterBottom color="info.main">Quick Reference:</Typography>
        <Typography variant="body2">
          â€¢ To <strong>decrease</strong> the effective coupon rate: <strong>increase</strong> the nominal amount<br />
          â€¢ To <strong>increase</strong> the effective coupon rate: <strong>decrease</strong> the nominal amount
        </Typography>
      </Paper>
      
      {showHistory && adjustmentHistory.length > 0 && (
        <>
          <Divider sx={{ my: 3 }} />
          
          <Box>
            <Typography variant="subtitle1" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
              <TuneIcon sx={{ mr: 1, fontSize: 20 }} />
              Adjustment History
            </Typography>
            
            <TableContainer component={Paper} variant="outlined" sx={{ maxHeight: 300 }}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>#</TableCell>
                    <TableCell align="right">Nominal</TableCell>
                    <TableCell align="right">Effective Rate</TableCell>
                    <TableCell align="right">Direct Rate</TableCell>
                    <TableCell align="right">Difference</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {adjustmentHistory.map((entry, index) => (
                    <TableRow key={index}>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell align="right">{formatNominal(entry.nominal)}</TableCell>
                      <TableCell align="right">{entry.effectiveRate.toFixed(2)}%</TableCell>
                      <TableCell align="right">{entry.directRate.toFixed(2)}%</TableCell>
                      <TableCell align="right">
                        <Chip
                          size="small"
                          label={`${entry.difference.toFixed(2)}%`}
                          color={entry.difference <= 0.5 ? "success" : "default"}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </>
      )}
    </Paper>
  );
};

export default ClassBCouponAdjuster;

======================================================================

DOSYA: src\components\calculation\GeneralSettingsForm.js
==================================================
// frontend/src/components/calculation/GeneralSettingsForm.js
import React from 'react';
import { Box, Typography, TextField, Paper, Button } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { useData } from '../../contexts/DataContext';

const GeneralSettingsForm = () => {
  const { generalSettings, setGeneralSettings } = useData();

  const handleChange = (field, value) => {
    setGeneralSettings({
      ...generalSettings,
      [field]: value,
    });
  };

  return (
    <Paper sx={{ p: 3, mb: 3 }}>
      <Typography variant="h6" gutterBottom>
        General Settings
      </Typography>
      
      <Box sx={{ mt: 2 }}>
        <LocalizationProvider dateAdapter={AdapterDateFns}>
          <DatePicker
            label="Start Date"
            value={generalSettings.start_date}
            onChange={(newValue) => handleChange('start_date', newValue)}
            renderInput={(params) => <TextField {...params} fullWidth margin="normal" />}
          />
        </LocalizationProvider>
        
        <TextField
          fullWidth
          margin="normal"
          id="operational_expenses"
          label="Operational Expenses (â‚º)"
          type="number"
          value={generalSettings.operational_expenses}
          onChange={(e) => handleChange('operational_expenses', parseFloat(e.target.value))}
          InputProps={{
            inputProps: { min: 0, step: 1000 }
          }}
        />
        
        <TextField
          fullWidth
          margin="normal"
          id="min_buffer"
          label="Minimum Buffer (%)"
          type="number"
          value={generalSettings.min_buffer}
          onChange={(e) => handleChange('min_buffer', parseFloat(e.target.value))}
          InputProps={{
            inputProps: { min: 0, step: 0.5 }
          }}
        />
      </Box>
    </Paper>
  );
};

export default GeneralSettingsForm;

======================================================================

DOSYA: src\components\calculation\InterestRatesTable.js
==================================================
// frontend/src/components/calculation/InterestRatesTable.js
import React from 'react';
import { 
  Box, 
  Typography, 
  Paper,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  alpha,
  Chip
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const InterestRatesTable = ({ results }) => {
  const theme = useTheme();
  
  // Format value function (handles '-' or number)
  const formatValue = (value) => {
    if (value === '-') return value;
    return `${parseFloat(value).toFixed(2)}%`;
  };

  // Prepare data for rates chart
  const chartData = results.interest_rate_conversions
    .filter(rate => rate.Tranche.includes('Class A'))
    .map(rate => ({
      name: rate.Tranche,
      rate: rate['Simple Annual Interest (%)'] === '-' ? 0 : rate['Simple Annual Interest (%)'],
    }))
    .concat(
      results.interest_rate_conversions
        .filter(rate => rate.Tranche.includes('Class B'))
        .map(rate => ({
          name: rate.Tranche,
          rate: rate['Effective Coupon Rate (%)'] === '-' ? 0 : rate['Effective Coupon Rate (%)'],
        }))
    );

  return (
    <Box>
      {/* Class B Coupon Information */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.secondary.main, 0.05),
          borderRadius: 2
        }}
      >
        <Typography variant="h6" gutterBottom color="secondary.main" fontWeight="medium">
          Class B Coupon Information
        </Typography>
        
        <TableContainer sx={{ 
          backgroundColor: 'background.paper', 
          borderRadius: 1,
          boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
        }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Tranche</TableCell>
                <TableCell align="center" sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Direct Coupon Rate (%)</TableCell>
                <TableCell align="center" sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Effective Coupon Rate (%)</TableCell>
                <TableCell align="center" sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.secondary.main, 0.04) }}>Maturity Info</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {results.interest_rate_conversions
                .filter(rate => rate.Tranche.includes('Class B'))
                .map((rate, index) => (
                  <TableRow key={index}>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: theme.palette.secondary.main,
                            mr: 1 
                          }} 
                        />
                        {rate.Tranche}
                      </Box>
                    </TableCell>
                    <TableCell align="center">
                      <Chip 
                        size="small" 
                        label={formatValue(rate['Coupon Rate (%)'])}
                        sx={{ 
                          bgcolor: alpha(theme.palette.secondary.main, 0.1),
                          color: theme.palette.secondary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                    <TableCell align="center">
                      <Chip 
                        size="small" 
                        label={formatValue(rate['Effective Coupon Rate (%)'])}
                        sx={{ 
                          bgcolor: alpha(theme.palette.info.main, 0.1),
                          color: theme.palette.info.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                    <TableCell align="center" sx={{ fontSize: '0.75rem', color: 'text.secondary' }}>
                      {`Maturity: ${rate['Maturity Days']} days`}
                    </TableCell>
                  </TableRow>
                ))
              }
            </TableBody>
          </Table>
        </TableContainer>

        {/* Helper component to explain the rates */}
        <Box sx={{ mt: 3, p: 2, bgcolor: alpha(theme.palette.info.main, 0.05), borderRadius: 1 }}>
          <Typography variant="subtitle2" gutterBottom>
            About Coupon Rates
          </Typography>
          <Typography variant="body2">
            <strong>Direct Coupon Rate:</strong> The simple percentage of coupon payment relative to principal (non-annualized).
          </Typography>
          <Typography variant="body2">
            <strong>Effective Coupon Rate:</strong> The annualized coupon rate, calculated as direct rate Ã— (365 Ã· maturity days).
          </Typography>
        </Box>

        {/* Debug information in development mode */}
        {process.env.NODE_ENV === 'development' && (
          <Box sx={{ mt: 3, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
            <Typography variant="caption">Debug Information:</Typography>
            <pre style={{ fontSize: '0.7rem', overflowX: 'auto' }}>
              {JSON.stringify(results.interest_rate_conversions
                .filter(rate => rate.Tranche.includes('Class B')), null, 2)}
            </pre>
          </Box>
        )}
      </Paper>
      
      {/* Interest Rates Chart */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3,
          border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
          borderRadius: 2
        }}
      >
        <Typography variant="h6" gutterBottom fontWeight="medium">
          Interest Rates by Tranche
        </Typography>
        
        <Box sx={{ height: 400, mt: 3 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={chartData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
              <XAxis dataKey="name" />
              <YAxis unit="%" />
              <Tooltip 
                formatter={(value) => `${value.toFixed(2)}%`}
                contentStyle={{
                  borderRadius: 8,
                  border: 'none',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.15)'
                }}
              />
              <Legend />
              <Bar 
                dataKey="rate" 
                name="Rate" 
                fill={theme.palette.primary.main}
                radius={[4, 4, 0, 0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </Paper>
      
      {/* Interest Rate Conversions Table */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3,
          border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
          borderRadius: 2
        }}
      >
        <Typography variant="h6" gutterBottom fontWeight="medium">
          Interest Rate Conversions
        </Typography>
        
        <TableContainer sx={{ 
          maxHeight: 440, 
          mt: 2,
          borderRadius: 1,
          boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
        }}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Tranche</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Days</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Simple Annual Interest (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Compound Interest for Period (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Reinvest Simple Annual (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Reinvest O/N Compound (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Coupon Rate (%)</TableCell>
                <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Effective Coupon Rate (%)</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {results.interest_rate_conversions.map((rate, index) => (
                <TableRow 
                  key={index}
                  sx={{ 
                    backgroundColor: rate.Tranche.includes('Class A') 
                      ? alpha(theme.palette.primary.main, 0.03)
                      : alpha(theme.palette.secondary.main, 0.03),
                    '&:hover': {
                      backgroundColor: rate.Tranche.includes('Class A') 
                        ? alpha(theme.palette.primary.main, 0.07)
                        : alpha(theme.palette.secondary.main, 0.07),
                    }
                  }}
                >
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box 
                        component="span" 
                        sx={{ 
                          display: 'inline-block', 
                          width: 10, 
                          height: 10, 
                          borderRadius: '50%', 
                          bgcolor: rate.Tranche.includes('Class A') 
                            ? theme.palette.primary.main 
                            : theme.palette.secondary.main,
                          mr: 1 
                        }} 
                      />
                      {rate.Tranche}
                    </Box>
                  </TableCell>
                  <TableCell>{rate['Maturity Days']}</TableCell>
                  <TableCell>{formatValue(rate['Simple Annual Interest (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Compound Interest for Period (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Reinvest Simple Annual (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Reinvest O/N Compound (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Coupon Rate (%)'])}</TableCell>
                  <TableCell>{formatValue(rate['Effective Coupon Rate (%)'])}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
    </Box>
  );
};

export default InterestRatesTable;

======================================================================

DOSYA: src\components\calculation\TrancheAForm.js
==================================================
// frontend/src/components/calculation/TrancheAForm.js
import React from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  TextField,
  IconButton
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';
import { useData } from '../../contexts/DataContext';

const TrancheAForm = () => {
  const { tranchesA, setTranchesA } = useData();

  const handleChange = (index, field, value) => {
    const newTranches = [...tranchesA];
    newTranches[index][field] = value;
    setTranchesA(newTranches);
  };

  const handleAddTranche = () => {
    const newTranche = {
      maturity_days: 0,
      base_rate: 0.0,
      spread: 0.0,
      reinvest_rate: 0.0,
      nominal: 0
    };
    
    setTranchesA([...tranchesA, newTranche]);
  };

  const handleDeleteTranche = (index) => {
    const newTranches = tranchesA.filter((_, i) => i !== index);
    setTranchesA(newTranches);
  };

  return (
    <Paper sx={{ p: 3, mb: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6">
          Class A Tranches
        </Typography>
        <IconButton 
          color="primary" 
          onClick={handleAddTranche}
          disabled={tranchesA.length >= 10}
        >
          <AddIcon />
        </IconButton>
      </Box>
      
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Tranche</TableCell>
              <TableCell>Maturity Days</TableCell>
              <TableCell>Base Rate (%)</TableCell>
              <TableCell>Spread (bps)</TableCell>
              <TableCell>Reinvest Rate (%)</TableCell>
              <TableCell>Nominal (â‚º)</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {tranchesA.map((tranche, index) => (
              <TableRow key={index}>
                <TableCell>{`A${index + 1}`}</TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.maturity_days}
                    onChange={(e) => handleChange(index, 'maturity_days', parseInt(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.base_rate}
                    onChange={(e) => handleChange(index, 'base_rate', parseFloat(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 0.1 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.spread}
                    onChange={(e) => handleChange(index, 'spread', parseFloat(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 0.1 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.reinvest_rate}
                    onChange={(e) => handleChange(index, 'reinvest_rate', parseFloat(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 0.1 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    type="number"
                    variant="outlined"
                    size="small"
                    value={tranche.nominal}
                    onChange={(e) => handleChange(index, 'nominal', parseInt(e.target.value) || 0)}
                    InputProps={{
                      inputProps: { min: 0, step: 1000000 }
                    }}
                  />
                </TableCell>
                <TableCell>
                  <IconButton 
                    color="error" 
                    onClick={() => handleDeleteTranche(index)}
                    disabled={tranchesA.length <= 1}
                  >
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
};

export default TrancheAForm;

======================================================================

DOSYA: src\components\calculation\TrancheBForm.js
==================================================
// frontend/src/components/calculation/TrancheBForm.js
import React from 'react';
import { Box, Typography, TextField, Paper } from '@mui/material';
import { useData } from '../../contexts/DataContext';

const TrancheBForm = () => {
  const { trancheB, setTrancheB } = useData();

  const handleChange = (field, value) => {
    setTrancheB({
      ...trancheB,
      [field]: value,
    });
  };

  return (
    <Paper sx={{ p: 3, mb: 3 }}>
      <Typography variant="h6" gutterBottom>
        Class B Tranche
      </Typography>
      
      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 2 }}>
        <TextField
          label="Maturity Days"
          type="number"
          value={trancheB.maturity_days}
          onChange={(e) => handleChange('maturity_days', parseInt(e.target.value) || 0)}
          sx={{ flex: '1 0 200px' }}
          InputProps={{
            inputProps: { min: 0 }
          }}
        />
        
        <TextField
          label="Base Rate (%)"
          type="number"
          value={trancheB.base_rate}
          onChange={(e) => handleChange('base_rate', parseFloat(e.target.value) || 0)}
          sx={{ flex: '1 0 200px' }}
          InputProps={{
            inputProps: { min: 0, step: 0.1 }
          }}
        />
        
        <TextField
          label="Spread (bps)"
          type="number"
          value={trancheB.spread}
          onChange={(e) => handleChange('spread', parseFloat(e.target.value) || 0)}
          sx={{ flex: '1 0 200px' }}
          InputProps={{
            inputProps: { min: 0, step: 0.1 }
          }}
        />
        
        <TextField
          label="Reinvest Rate (%)"
          type="number"
          value={trancheB.reinvest_rate}
          onChange={(e) => handleChange('reinvest_rate', parseFloat(e.target.value) || 0)}
          sx={{ flex: '1 0 200px' }}
          InputProps={{
            inputProps: { min: 0, step: 0.1 }
          }}
        />
      </Box>
      
      <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
        Class B nominal amount will be automatically calculated as 10.17811704% of total.
      </Typography>
    </Paper>
  );
};

export default TrancheBForm;

======================================================================

DOSYA: src\components\optimization\OptimizationProgress.js
==================================================
// src/components/optimization/OptimizationProgress.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  LinearProgress, 
  Paper, 
  Divider,
  Chip,
  Button,
  alpha,
  useTheme
} from '@mui/material';
import RefreshIcon from '@mui/icons-material/Refresh';
import SpeedIcon from '@mui/icons-material/Speed';
import PendingIcon from '@mui/icons-material/Pending';
import SyncIcon from '@mui/icons-material/Sync';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

const OptimizationProgress = ({ isOptimizing, onComplete }) => {
  const theme = useTheme();
  const [progress, setProgress] = useState(0);
  const [phase, setPhase] = useState('Initializing');
  const [message, setMessage] = useState('Starting optimization...');
  const [pollingActive, setPollingActive] = useState(false);
  const [pollCount, setPollCount] = useState(0);
  const [stuckDetected, setStuckDetected] = useState(false);
  const [lastProgressUpdate, setLastProgressUpdate] = useState(Date.now());
  const [lastProgressValue, setLastProgressValue] = useState(0);
  const [errorOccurred, setErrorOccurred] = useState(false);
  
  // Start polling when optimization starts
  useEffect(() => {
    if (isOptimizing && !pollingActive) {
      console.log("Starting optimization progress polling");
      setPollingActive(true);
      setProgress(0);
      setPhase('Initializing');
      setMessage('Starting optimization...');
      setPollCount(0);
      setStuckDetected(false);
      setLastProgressUpdate(Date.now());
      setLastProgressValue(0);
      setErrorOccurred(false);
    } else if (!isOptimizing && pollingActive) {
      console.log("Stopping optimization progress polling");
      setPollingActive(false);
    }
  }, [isOptimizing, pollingActive]);
  
  // Handle refresh button click
  const handleRefresh = () => {
    console.log("Refreshing optimization progress");
    if (stuckDetected) {
      setStuckDetected(false);
      setPollCount(0);
      setLastProgressUpdate(Date.now());
    }
  };
  
  // Polling effect
  useEffect(() => {
    let intervalId;
    
    if (pollingActive) {
      // Poll every second
      intervalId = setInterval(async () => {
        try {
          console.log("Polling optimization progress...");
          const response = await axios.get(`${API_URL}/optimize/progress/`);
          const data = response.data;
          
          console.log("Progress data:", data);
          
          // Check for error flag from backend
          if (data.error) {
            console.error("Error in optimization progress:", data.message);
            setErrorOccurred(true);
            setMessage(data.message || "Error in optimization process");
            setPhase("Error");
            // Don't update progress to indicate the error visually
            return;
          }
          
          // Check if progress has changed or message has changed
          const hasProgressChanged = data.progress !== progress;
          const hasMessageChanged = data.message !== message;
          
          if (hasProgressChanged || hasMessageChanged) {
            setProgress(data.progress);
            setPhase(data.phase);
            setMessage(data.message);
            setLastProgressUpdate(Date.now());
            
            if (hasProgressChanged) {
              setLastProgressValue(data.progress);
            }
          } else {
            // If no progress update, increment counter
            setPollCount(prev => prev + 1);
          }
          
          // Check for stuck progress - if no change for 30 seconds
          const timeSinceUpdate = Date.now() - lastProgressUpdate;
          if (pollCount > 30 && timeSinceUpdate > 30000) {
            console.log("Progress appears to be stuck");
            setStuckDetected(true);
          }
          
          // If progress is 100%, notify parent component
          if (data.progress >= 100) {
            console.log("Optimization completed (progress 100%)");
            setPollingActive(false);
            if (onComplete) {
              onComplete();
            }
          }
        } catch (error) {
          console.error('Error fetching optimization progress:', error);
          setPollCount(prev => prev + 1);
          
          // If we've had many errors, consider it stuck
          if (pollCount > 15) {
            console.log("Multiple polling errors, considering progress stuck");
            setStuckDetected(true);
          }
        }
      }, 1000);
    }
    
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [pollingActive, onComplete, progress, message, pollCount, lastProgressUpdate, lastProgressValue]);
  
  // Auto-complete if we've been at 100% for a while
  useEffect(() => {
    if (progress >= 100 && pollingActive) {
      console.log("Progress is 100%, auto-completing after delay");
      const timeoutId = setTimeout(() => {
        setPollingActive(false);
        if (onComplete) {
          onComplete();
        }
      }, 2000);
      
      return () => clearTimeout(timeoutId);
    }
  }, [progress, pollingActive, onComplete]);
  
  if (!isOptimizing && progress === 0) {
    return null;
  }
  
  // Calculate progress color
  const getProgressColor = () => {
    if (errorOccurred) return theme.palette.error.main;
    if (stuckDetected) return theme.palette.warning.main;
    if (progress < 30) return theme.palette.info.main;
    if (progress < 70) return theme.palette.primary.main;
    return theme.palette.success.main;
  };
  
  // Progress icon
  const getProgressIcon = () => {
    if (errorOccurred) return <SyncIcon color="error" />;
    if (stuckDetected) return <SyncIcon color="warning" />;
    if (progress < 50) return <PendingIcon color="primary" />;
    return <SpeedIcon color="success" />;
  };
  
  return (
    <Paper 
      elevation={0} 
      sx={{ 
        p: 3, 
        mb: 3, 
        borderRadius: 2,
        border: errorOccurred 
          ? `1px solid ${alpha(theme.palette.error.main, 0.3)}`
          : stuckDetected 
            ? `1px solid ${alpha(theme.palette.warning.main, 0.3)}`
            : `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
        backgroundColor: errorOccurred
          ? alpha(theme.palette.error.main, 0.05)
          : stuckDetected
            ? alpha(theme.palette.warning.main, 0.05)
            : alpha(theme.palette.primary.main, 0.03)
      }}
    >
      <Box sx={{ mb: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            {getProgressIcon()}
            <Typography variant="h6" sx={{ ml: 1 }}>
              {errorOccurred 
                ? 'Optimization Error' 
                : stuckDetected 
                  ? 'Optimization Progress (Stuck)' 
                  : 'Optimization Progress'}
            </Typography>
          </Box>
          <Chip 
            label={phase} 
            color={errorOccurred ? "error" : stuckDetected ? "warning" : "primary"} 
            variant="outlined"
            size="small"
          />
        </Box>
        <LinearProgress 
          variant="determinate" 
          value={progress} 
          sx={{ 
            height: 10, 
            borderRadius: 5,
            '& .MuiLinearProgress-bar': {
              borderRadius: 5,
              backgroundColor: getProgressColor()
            }
          }} 
        />
        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
          <Typography variant="body2" color="text.secondary">
            {message}
          </Typography>
          <Typography variant="body2" fontWeight="medium">
            {progress}%
          </Typography>
        </Box>
      </Box>
      
      <Divider sx={{ my: 1 }} />
      
      <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography variant="body2" color="text.secondary">
          {errorOccurred 
            ? "An error occurred during optimization. Please try again with different parameters."
            : stuckDetected 
              ? "Optimization might be stuck. The server is still processing, but progress updates have stopped." 
              : progress === 100 
                ? "Optimization completed successfully." 
                : "Please wait while the optimization is in progress..."}
        </Typography>
        
        {(stuckDetected || errorOccurred) && (
          <Button 
            variant="outlined" 
            color={errorOccurred ? "error" : "warning"} 
            size="small" 
            startIcon={<RefreshIcon />}
            onClick={handleRefresh}
            sx={{ ml: 2 }}
          >
            Refresh
          </Button>
        )}
      </Box>
    </Paper>
  );
};

export default OptimizationProgress;

======================================================================

DOSYA: src\components\optimization\OptimizationResults.js
==================================================
// src/components/optimization/OptimizationResults.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Button,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Chip,
  useTheme,
  Snackbar,
  Alert,
  Dialog, 
  DialogActions, 
  DialogContent, 
  DialogContentText, 
  DialogTitle, 
  TextField,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  alpha
} from '@mui/material';
import { 
  BarChart, Bar, 
  PieChart, Pie, Cell, 
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  Scatter, ScatterChart, ZAxis
} from 'recharts';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ReplayIcon from '@mui/icons-material/Replay';
import SaveIcon from '@mui/icons-material/Save';
import { useData } from '../../contexts/DataContext';
import { useNavigate } from 'react-router-dom';
import { calculateResults } from '../../services/apiService';

// Convert numbers to Roman numerals
const toRoman = (num) => {
  if (isNaN(num) || num < 1 || num > 3999) {
    return num.toString(); // Return the number as string if not a valid input
  }
  
  const romanNumerals = {
    M: 1000, CM: 900, D: 500, CD: 400,
    C: 100, XC: 90, L: 50, XL: 40,
    X: 10, IX: 9, V: 5, IV: 4, I: 1
  };
  
  let result = '';
  
  for (let key in romanNumerals) {
    while (num >= romanNumerals[key]) {
      result += key;
      num -= romanNumerals[key];
    }
  }
  
  return result;
};

// Strategy name mapping
const strategyNames = {
  equal: "Equal Distribution",
  increasing: "Increasing by Maturity",
  decreasing: "Decreasing by Maturity",
  middle_weighted: "Middle-Weighted",
  classic: "Standard Optimization",
  genetic: "Evolutionary Algorithm"
};

const OptimizationResults = ({ results }) => {
  const theme = useTheme();
  const navigate = useNavigate();
  const { 
    setTranchesA, 
    setTrancheB, 
    calculationResults, 
    setPreviousCalculationResults, 
    originalTranchesA, 
    originalTrancheB,
    setIsLoading,
    setError,
    createCalculationRequest,
    setCalculationResults,
    saveResult,
    setMultipleComparisonResults,
    setShouldAutoCalculate
  } = useData();
  
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  
  // Add these new states for save functionality
  const [saveDialogOpen, setSaveDialogOpen] = useState(false);
  const [resultName, setResultName] = useState('');
  const [selectedMethodType, setSelectedMethodType] = useState('');
  
  // Define color palette for dark blue theme
  const darkBlueColors = {
    // Ana renkler
    primary: '#64B5F6', // AÃ§Ä±k mavi 
    primaryLight: '#90CAF9',
    primaryDark: '#42A5F5',
    secondary: '#FF9800', // Turuncu - mavi ile kontrast
    secondaryLight: '#FFB74D',
    secondaryDark: '#F57C00',
    
    // Ä°ÅŸlevsel renkler
    success: '#4CAF50',
    error: '#FF5252',
    info: '#29B6F6',
    warning: '#FFC107',
    
    // Arka plan ve metin
    paper: '#1A2035', // Koyu mavi-gri kaÄŸÄ±t arka planÄ±
    background: '#111827', // Ã‡ok koyu mavi arka plan
    textPrimary: '#FFFFFF', // Beyaz metin
    textSecondary: '#B0BEC5', // Soluk mavi-gri ikincil metin
    
    // Panel ve kart arka planlarÄ±
    cardBackground: '#1E293B', // Koyu mavi-gri kart arka planÄ±
    inputBackground: '#283147', // Biraz daha aÃ§Ä±k giriÅŸ alanÄ± arka planÄ±
    
    // SÄ±nÄ±r ve ayÄ±rÄ±cÄ±
    divider: '#2A3958', // Koyu mavi-gri ayÄ±rÄ±cÄ±
    border: '#3A486B',  // Daha aÃ§Ä±k sÄ±nÄ±r rengi
    
    // Grafik renk paleti
    chartColors: [
      '#64B5F6', // AÃ§Ä±k mavi
      '#FF9800', // Turuncu
      '#4CAF50', // YeÅŸil
      '#E91E63', // Pembe
      '#9C27B0', // Mor
      '#00BCD4', // CamgÃ¶beÄŸi
      '#FFEB3B', // SarÄ±
      '#FF5722', // Derin turuncu
      '#8BC34A', // AÃ§Ä±k yeÅŸil
      '#3F51B5'  // Indigo
    ]
  };
  
  // Update useEffect to set initial method type based on results
  useEffect(() => {
    if (results && results.best_strategy) {
      setSelectedMethodType(results.best_strategy === 'genetic' ? 'genetic' : 'standard');
    }
  }, [results]);
  
  // Format currency values
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'TRY' }).format(value);
  };
  
  // Format percentage values
  const formatPercent = (value) => {
    return `${value.toFixed(2)}%`;
  };
  
  // Helper function to get strategy display name
  const getStrategyDisplayName = (strategy) => {
    return strategyNames[strategy] || strategy.charAt(0).toUpperCase() + strategy.slice(1);
  };
  
  // Add these new functions for save functionality
  const handleSaveClick = () => {
    setSaveDialogOpen(true);
    // Default name based on the optimization method
    const defaultName = `${getStrategyDisplayName(results.best_strategy)} Optimization`;
    setResultName(defaultName);
    
    // Set default method type based on results
    setSelectedMethodType(results.best_strategy === 'genetic' ? 'genetic' : 'standard');
  };
  
  const handleSaveDialogClose = () => {
    setSaveDialogOpen(false);
  };
  
  const handleSaveConfirm = () => {
    // Create a result object with necessary properties
    const resultToSave = {
      ...results,
      is_optimized: true,
      optimization_method: selectedMethodType,
      // Add a label so we can identify this in the comparison
      label: resultName,
      method_type: selectedMethodType
    };
    
    const saved = saveResult(resultToSave, resultName, selectedMethodType);
    
    if (saved) {
      setSnackbarMessage(`Result saved as "${resultName}" (${selectedMethodType})`);
      setSnackbarSeverity('success');
      setSnackbarOpen(true);
      setSaveDialogOpen(false);
    } else {
      setSnackbarMessage('Failed to save result');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };
  
  // Prepare data for pie chart
  const pieData = [
    ...results.class_a_nominals.map((nominal, index) => ({
      name: `Class A${toRoman(index + 1)}`,
      value: nominal,
      color: darkBlueColors.chartColors[index % darkBlueColors.chartColors.length]
    })),
    { 
      name: `Class B${toRoman(1)}`, 
      value: results.class_b_nominal,
      color: darkBlueColors.secondary
    }
  ];
  
  // Prepare data for maturity distribution chart
  const maturityData = [
    ...results.class_a_maturities.map((maturity, index) => ({
      name: `Class A${toRoman(index + 1)}`,
      maturity,
      nominal: results.class_a_nominals[index],
      type: 'Class A'
    })),
    {
      name: `Class B${toRoman(1)}`,
      maturity: results.class_b_maturity,
      nominal: results.class_b_nominal,
      type: 'Class B'
    },
    {
      name: 'Last Cash Flow',
      maturity: results.last_cash_flow_day,
      nominal: Math.max(...results.class_a_nominals, results.class_b_nominal) / 20,
      type: 'Marker'
    }
  ];
  
  // Strategy comparison data
  const strategyResultsData = Object.entries(results.results_by_strategy).map(([strategy, data]) => ({
    name: getStrategyDisplayName(strategy),
    totalPrincipal: data.total_principal,
    directClassBCouponRate: data.direct_coupon_rate || 0,
    classBCouponRate: data.class_b_coupon_rate,
    minBufferActual: data.min_buffer_actual,
    isBest: strategy === results.best_strategy
  }));
  
  // Apply the best strategy configuration to the forms and automatically calculate
  const applyConfiguration = async () => {
    try {
      // Store the current calculation results for comparison before we change the configuration
      if (calculationResults) {
        setPreviousCalculationResults(calculationResults);
      }
      
      // Log all values for debugging
      console.log("Optimization results:", results);
      
      const a_tranches = results.class_a_maturities.map((maturity, index) => ({
        maturity_days: maturity,
        base_rate: results.class_a_rates[index],
        spread: 0.0, // Default value
        reinvest_rate: results.class_a_reinvest[index],
        nominal: results.class_a_nominals[index]
      }));
      
      const b_tranche = {
        maturity_days: results.class_b_maturity,
        base_rate: results.class_b_rate,
        spread: 0.0, // Default value
        reinvest_rate: results.class_b_reinvest,
        nominal: results.class_b_nominal  // Ensure Class B nominal value is transferred
      };
      
      // Enhanced logging with coupon rates and more debugging details
      console.log("Applying configuration with parameters:", {
        tranchesA: a_tranches,
        trancheB: b_tranche,
        class_b_nominal: results.class_b_nominal,
        class_b_coupon_rate: results.class_b_coupon_rate,
        direct_class_b_coupon_rate: results.direct_class_b_coupon_rate || 0,
        class_b_maturity: results.class_b_maturity
      });
      
      // Verify that the nominal values match the expected totals
      const totalClassANominal = a_tranches.reduce((sum, tranche) => sum + tranche.nominal, 0);
      const totalNominal = totalClassANominal + b_tranche.nominal;
      
      console.log("Nominal value verification:", {
        totalClassANominal,
        classBNominal: b_tranche.nominal,
        totalNominal,
        expectedTotal: results.total_principal
      });
      
      // Update form state
      setTranchesA(a_tranches);
      setTrancheB(b_tranche);
      
      // Show processing message
      setSnackbarMessage('Applying configuration and calculating results...');
      setSnackbarSeverity('info');
      setSnackbarOpen(true);
      
      // Create the calculation request directly
      const request = createCalculationRequest();
      
      // Add optimization metadata
      request.is_optimized = true;
      request.optimization_method = results.best_strategy;
      
      // Perform calculation directly instead of navigating
      setIsLoading(true);
      try {
        const calculationResult = await calculateResults(request);
        
        // Add metadata for tracking and display
        calculationResult.label = `${getStrategyDisplayName(results.best_strategy)} Optimization`;
        calculationResult.method_type = results.best_strategy === 'genetic' ? 'genetic' : 'standard';
        calculationResult.timestamp = new Date().toISOString();
        
        // Update results state
        setCalculationResults(calculationResult);
        
        // Show success message
        setSnackbarMessage('Configuration applied and results calculated successfully!');
        setSnackbarSeverity('success');
        setSnackbarOpen(true);
        
        // Add to comparison history
        setMultipleComparisonResults(prev => {
          const updatedResults = prev ? [...prev] : [];
          
          // Check if we already have a result of the same type
          const existingIndex = updatedResults.findIndex(r => 
            r.method_type === calculationResult.method_type
          );
          
          // If we have a result of this type, replace it
          if (existingIndex >= 0) {
            updatedResults[existingIndex] = { ...calculationResult };
          } else {
            // Otherwise add it to the array
            if (updatedResults.length >= 5) {
              updatedResults.shift(); // Remove the oldest result
            }
            updatedResults.push({ ...calculationResult });
          }
          
          return updatedResults;
        });
        
        // Navigate to results page to show the new calculation
        navigate('/calculation');
        
      } catch (err) {
        console.error('Error calculating results:', err);
        setSnackbarMessage('Error calculating results. Please try again.');
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
      } finally {
        setIsLoading(false);
      }
      
    } catch (error) {
      console.error('Error applying configuration:', error);
      
      // Show error message
      setSnackbarMessage('Error applying configuration. Please try again.');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };
  
  // Reset to original values
  const resetToOriginal = () => {
    try {
      if (originalTranchesA && originalTrancheB) {
        setTranchesA(JSON.parse(JSON.stringify(originalTranchesA)));
        setTrancheB(JSON.parse(JSON.stringify(originalTrancheB)));
        
        // Show success message
        setSnackbarMessage('Reset to original values successfully.');
        setSnackbarSeverity('success');
        setSnackbarOpen(true);
        
        // Navigate to calculation page
        navigate('/calculation');
      } else {
        // Show error message
        setSnackbarMessage('Original configuration not available.');
        setSnackbarSeverity('warning');
        setSnackbarOpen(true);
      }
    } catch (error) {
      console.error('Error resetting to original:', error);
      
      // Show error message
      setSnackbarMessage('Error resetting to original values.');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };
  
  // Handle snackbar close
  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setSnackbarOpen(false);
  };

  return (
    <Box>
      {/* Add Save Button to the top of the optimization results */}
      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
        <Button
          variant="contained"
          color="success"
          startIcon={<SaveIcon />}
          onClick={handleSaveClick}
          sx={{ ml: 2 }}
        >
          Save Optimization
        </Button>
      </Box>
      
      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleSnackbarClose} 
          severity={snackbarSeverity} 
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
      
      {/* Summary Banner */}
      <Paper 
        elevation={3}
        sx={{ 
          p: 3, 
          mb: 3, 
          borderLeft: `4px solid ${darkBlueColors.secondary}`,
          backgroundColor: alpha(darkBlueColors.success, 0.1),
          border: `1px solid ${alpha(darkBlueColors.success, 0.2)}`,
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
          <Typography 
            variant="h5" 
            sx={{ 
              color: darkBlueColors.secondary,
              textShadow: '0 1px 2px rgba(0,0,0,0.2)'
            }}
          >
            Optimal Structure Found
          </Typography>
          <Chip 
            icon={<CheckCircleIcon />} 
            label={getStrategyDisplayName(results.best_strategy)} 
            color="secondary" 
            sx={{
              backgroundColor: alpha(darkBlueColors.secondary, 0.9),
              color: '#fff',
              '& .MuiChip-icon': {
                color: '#fff'
              }
            }}
          />
        </Box>
        
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 4, mb: 3 }}>
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Class A Tranches
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.textPrimary }}>
              {results.class_a_maturities.length}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Direct Coupon Rate
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.secondary }}>
              {formatPercent(results.direct_class_b_coupon_rate || 0)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Effective Coupon Rate
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.secondary }}>
              {formatPercent(results.class_b_coupon_rate)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Minimum Buffer
            </Typography>
            <Typography variant="h6" sx={{ color: results.min_buffer_actual >= 5.0 ? darkBlueColors.success : darkBlueColors.error }}>
              {formatPercent(results.min_buffer_actual)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Class B Maturity
            </Typography>
            <Typography variant="h6" sx={{ color: darkBlueColors.textPrimary }}>
              {results.class_b_maturity} days
            </Typography>
          </Box>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button 
            variant="contained" 
            sx={{ 
              bgcolor: darkBlueColors.secondary,
              '&:hover': {
                bgcolor: alpha(darkBlueColors.secondary, 0.8)
              }
            }}
            size="large"
            onClick={applyConfiguration}
          >
            Apply This Configuration
          </Button>
          
          <Button 
            variant="outlined" 
            sx={{ 
              color: darkBlueColors.primary,
              borderColor: darkBlueColors.primary,
              '&:hover': {
                borderColor: darkBlueColors.primaryLight,
                bgcolor: alpha(darkBlueColors.primary, 0.1)
              }
            }}
            size="large"
            startIcon={<ReplayIcon />}
            onClick={resetToOriginal}
          >
            Reset to Original Values
          </Button>
        </Box>
      </Paper>
      
      {/* Class B Maturity Calculation */}
      <Paper 
        elevation={3} 
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Class B Maturity Calculation
        </Typography>
        
        <Box sx={{ 
          display: 'flex', 
          flexWrap: 'wrap', 
          alignItems: 'center', 
          justifyContent: 'center',
          gap: 2, 
          my: 3 
        }}>
          <Paper sx={{ 
            p: 2, 
            bgcolor: darkBlueColors.inputBackground, 
            textAlign: 'center', 
            minWidth: 180,
            borderRadius: 1,
            border: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
          }}>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Last Cash Flow
            </Typography>
            <Typography variant="h5" sx={{ color: darkBlueColors.textPrimary }}>
              {results.last_cash_flow_day} days
            </Typography>
          </Paper>
          
          <Typography variant="h4" sx={{ color: darkBlueColors.textSecondary }}>+</Typography>
          
          <Paper sx={{ 
            p: 2, 
            bgcolor: darkBlueColors.inputBackground, 
            textAlign: 'center', 
            minWidth: 180,
            borderRadius: 1,
            border: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
          }}>
            <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
              Additional Days
            </Typography>
            <Typography variant="h5" sx={{ color: darkBlueColors.textPrimary }}>
              {results.additional_days} days
            </Typography>
          </Paper>
          
          <Typography variant="h4" sx={{ color: darkBlueColors.textSecondary }}>=</Typography>
          
          <Paper sx={{ 
            p: 2, 
            bgcolor: darkBlueColors.secondary,
            color: '#fff',
            textAlign: 'center', 
            minWidth: 180,
            borderRadius: 1,
            boxShadow: `0 2px 10px ${alpha(darkBlueColors.secondary, 0.3)}`
          }}>
            <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.9)' }}>
              Class B Maturity
            </Typography>
            <Typography variant="h5" sx={{ color: '#fff' }}>
              {results.class_b_maturity} days
            </Typography>
          </Paper>
        </Box>
        
        <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, fontStyle: "italic" }}>
          Note: Class B maturity is calculated as Last Cash Flow Day + Additional Days.
          Maximum maturity is capped at 365 days.
        </Typography>
      </Paper>
      
      {/* Strategy Comparison */}
      <Paper 
        elevation={3} 
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Strategy Comparison
        </Typography>
        
        <TableContainer sx={{ mb: 3 }}>
          <Table>
            <TableHead>
              <TableRow sx={{ 
                '& th': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                  fontWeight: 'bold'
                } 
              }}>
                <TableCell>Strategy</TableCell>
                <TableCell align="right">Total Principal</TableCell>
                <TableCell align="right">Direct Coupon Rate</TableCell>
                <TableCell align="right">Effective Coupon Rate</TableCell>
                <TableCell align="right">Min Buffer</TableCell>
                <TableCell align="right">Class A Tranches</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {strategyResultsData.map((row, index) => (
                <TableRow 
                  key={index}
                  sx={{ 
                    bgcolor: row.isBest ? alpha(darkBlueColors.success, 0.1) : 'transparent',
                    '&:hover': { bgcolor: alpha(darkBlueColors.primary, 0.05) },
                    '& td': { 
                      color: darkBlueColors.textPrimary,
                      borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                    },
                    fontWeight: row.isBest ? 'bold' : 'normal'
                  }}
                >
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      {row.isBest && <CheckCircleIcon sx={{ color: darkBlueColors.secondary }} fontSize="small" />}
                      {row.name}
                    </Box>
                  </TableCell>
                  <TableCell align="right">{formatCurrency(row.totalPrincipal)}</TableCell>
                  <TableCell align="right">{formatPercent(row.directClassBCouponRate)}</TableCell>
                  <TableCell align="right">{formatPercent(row.classBCouponRate)}</TableCell>
                  <TableCell align="right">{formatPercent(row.minBufferActual)}</TableCell>
                  <TableCell align="right">
                    {results.results_by_strategy[Object.keys(results.results_by_strategy).find(key => (getStrategyDisplayName(key)) === row.name)]?.num_a_tranches || '-'}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        
        {/* Strategy comparison charts */}
        <Box sx={{ height: 400, mb: 3 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={strategyResultsData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha(darkBlueColors.divider, 0.4)} />
              <XAxis 
                dataKey="name" 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <YAxis 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <Tooltip 
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                labelStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Bar 
                dataKey="totalPrincipal" 
                name="Total Principal" 
                fill={darkBlueColors.chartColors[0]} 
              />
            </BarChart>
          </ResponsiveContainer>
        </Box>
        
        <Box sx={{ height: 400 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={strategyResultsData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha(darkBlueColors.divider, 0.4)} />
              <XAxis 
                dataKey="name" 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <YAxis 
                unit="%" 
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <Tooltip 
                formatter={(value) => `${value.toFixed(2)}%`}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                labelStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Bar 
                dataKey="directClassBCouponRate" 
                name="Direct Coupon Rate" 
                fill={darkBlueColors.chartColors[1]} 
              />
              <Bar 
                dataKey="classBCouponRate" 
                name="Effective Coupon Rate" 
                fill={darkBlueColors.chartColors[2]} 
              />
              <Bar 
                dataKey="minBufferActual" 
                name="Min Buffer" 
                fill={darkBlueColors.chartColors[3]} 
              />
            </BarChart>
          </ResponsiveContainer>
        </Box>
      </Paper>
      
      {/* Tranche Details */}
      <Paper 
        elevation={3}
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Tranche Details
        </Typography>
        
        <Typography 
          variant="subtitle1" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.primary, 
            mt: 3,
            fontWeight: 500
          }}
        >
          Class A Tranches
        </Typography>
        
        <TableContainer sx={{ mb: 3 }}>
          <Table>
            <TableHead>
              <TableRow sx={{ 
                '& th': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                  fontWeight: 'bold'
                } 
              }}>
                <TableCell>Tranche</TableCell>
                <TableCell align="right">Maturity (days)</TableCell>
                <TableCell align="right">Base Rate (%)</TableCell>
                <TableCell align="right">Reinvest Rate (%)</TableCell>
                <TableCell align="right">Nominal</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {results.class_a_maturities.map((maturity, index) => (
                <TableRow key={index} sx={{ 
                  '& td': { 
                    color: darkBlueColors.textPrimary,
                    borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                  },
                  '&:hover': { 
                    bgcolor: alpha(darkBlueColors.primary, 0.05) 
                  }
                }}>
                  <TableCell>Class A{toRoman(index + 1)}</TableCell>
                  <TableCell align="right">{maturity}</TableCell>
                  <TableCell align="right">{results.class_a_rates[index].toFixed(2)}</TableCell>
                  <TableCell align="right">{results.class_a_reinvest[index].toFixed(2)}</TableCell>
                  <TableCell align="right">{formatCurrency(results.class_a_nominals[index])}</TableCell>
                </TableRow>
              ))}
              <TableRow sx={{ 
                bgcolor: alpha(darkBlueColors.primary, 0.1),
                '& td': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                }
              }}>
                <TableCell sx={{ fontWeight: 'bold' }}>Total</TableCell>
                <TableCell></TableCell>
                <TableCell></TableCell>
                <TableCell></TableCell>
                <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                  {formatCurrency(results.class_a_nominals.reduce((sum, nominal) => sum + nominal, 0))}
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
        
        <Typography 
          variant="subtitle1" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.secondary, 
            mt: 3,
            fontWeight: 500 
          }}
        >
          Class B Tranche
        </Typography>
        
        <TableContainer>
          <Table>
            <TableHead>
              <TableRow sx={{ 
                '& th': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                  fontWeight: 'bold'
                } 
              }}>
                <TableCell>Tranche</TableCell>
                <TableCell align="right">Maturity (days)</TableCell>
                <TableCell align="right">Base Rate (%)</TableCell>
                <TableCell align="right">Reinvest Rate (%)</TableCell>
                <TableCell align="right">Nominal</TableCell>
                <TableCell align="right">Direct Coupon Rate (%)</TableCell>
                <TableCell align="right">Effective Coupon Rate (%)</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow sx={{ 
                '& td': { 
                  color: darkBlueColors.textPrimary,
                  borderBottom: `1px solid ${alpha(darkBlueColors.border, 0.3)}`
                },
                '&:hover': { 
                  bgcolor: alpha(darkBlueColors.secondary, 0.05) 
                }
              }}>
                <TableCell>Class B{toRoman(1)}</TableCell>
                <TableCell align="right">{results.class_b_maturity}</TableCell>
                <TableCell align="right">{results.class_b_rate.toFixed(2)}</TableCell>
                <TableCell align="right">{results.class_b_reinvest.toFixed(2)}</TableCell>
                <TableCell align="right">{formatCurrency(results.class_b_nominal)}</TableCell>
                <TableCell align="right" sx={{ fontWeight: 'bold', color: darkBlueColors.secondary }}>
                  {formatPercent(results.direct_class_b_coupon_rate || 0)}
                </TableCell>
                <TableCell align="right" sx={{ fontWeight: 'bold', color: darkBlueColors.secondary }}>
                  {formatPercent(results.class_b_coupon_rate)}
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
      
      {/* Visualizations */}
      <Paper 
        elevation={3}
        sx={{ 
          p: 3, 
          mb: 3, 
          bgcolor: darkBlueColors.cardBackground,
          border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`
        }}
      >
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: darkBlueColors.textPrimary,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          Visualizations
        </Typography>
        
        <Typography variant="subtitle1" gutterBottom sx={{ mt: 3, color: darkBlueColors.textPrimary }}>
          Nominal Amount Distribution
        </Typography>
        
        <Box sx={{ height: 400, mb: 4 }}>
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={pieData}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius={120}
                innerRadius={60}
                label={({ name, percent }) => `${name} (${(percent * 100).toFixed(1)}%)`}
              >
                {pieData.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={entry.name.includes('Class A') 
                      ? darkBlueColors.chartColors[index % darkBlueColors.chartColors.length]
                      : darkBlueColors.secondary
                    } 
                  />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                labelStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
            </PieChart>
          </ResponsiveContainer>
        </Box>
        
        <Typography variant="subtitle1" gutterBottom sx={{ mt: 3, color: darkBlueColors.textPrimary }}>
          Maturity Distribution
        </Typography>
        
        <Box sx={{ height: 400 }}>
          <ResponsiveContainer width="100%" height="100%">
            <ScatterChart
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke={alpha(darkBlueColors.divider, 0.4)} />
              <XAxis 
                type="number" 
                dataKey="maturity" 
                name="Maturity" 
                unit=" days" 
                domain={[0, 'dataMax + 30']}
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <YAxis 
                type="number" 
                dataKey="nominal" 
                name="Nominal" 
                tickFormatter={(value) => `${(value / 1000000).toFixed(0)}M`}
                stroke={darkBlueColors.textSecondary}
                tick={{ fill: darkBlueColors.textSecondary }}
              />
              <ZAxis range={[100, 600]} />
              <Tooltip 
                formatter={(value, name, props) => {
                  if (name === 'Nominal') return formatCurrency(value);
                  return `${value} days`;
                }}
                contentStyle={{
                  backgroundColor: darkBlueColors.paper,
                  borderColor: darkBlueColors.border,
                  color: darkBlueColors.textPrimary
                }}
                content={({ active, payload }) => {
                  if (active && payload && payload.length) {
                    const data = payload[0].payload;
                    return (
                      <Box sx={{ 
                        bgcolor: darkBlueColors.paper, 
                        p: 1, 
                        border: `1px solid ${alpha(darkBlueColors.border, 0.7)}`,
                        borderRadius: 1,
                        boxShadow: `0 2px 8px ${alpha('#000', 0.2)}`
                      }}>
                        <Typography variant="body2" fontWeight="bold" sx={{ color: darkBlueColors.textPrimary }}>
                          {data.name}
                        </Typography>
                        <Typography variant="body2" sx={{ color: darkBlueColors.textPrimary }}>
                          Maturity: {data.maturity} days
                        </Typography>
                        {data.type !== 'Marker' && (
                          <Typography variant="body2" sx={{ color: darkBlueColors.textPrimary }}>
                            Nominal: {formatCurrency(data.nominal)}
                          </Typography>
                        )}
                      </Box>
                    );
                  }
                  return null;
                }}
              />
              <Legend 
                wrapperStyle={{ color: darkBlueColors.textPrimary }}
              />
              <Scatter 
                name="Class A" 
                data={maturityData.filter(d => d.type === 'Class A')}
                fill={darkBlueColors.primary}
              />
              <Scatter 
                name="Class B" 
                data={maturityData.filter(d => d.type === 'Class B')}
                fill={darkBlueColors.secondary}
              />
              <Scatter 
                name="Last Cash Flow" 
                data={maturityData.filter(d => d.type === 'Marker')}
                fill={darkBlueColors.error}
                shape="star"
              />
            </ScatterChart>
          </ResponsiveContainer>
        </Box>
      </Paper>
      
      {/* Save Dialog with Method Type Selection */}
      <Dialog 
        open={saveDialogOpen} 
        onClose={handleSaveDialogClose}
        PaperProps={{
          style: {
            backgroundColor: darkBlueColors.paper,
            border: `1px solid ${alpha(darkBlueColors.border, 0.5)}`,
            boxShadow: `0 4px 20px ${alpha('#000', 0.5)}`
          }
        }}
      >
        <DialogTitle sx={{ color: darkBlueColors.textPrimary, borderBottom: `1px solid ${alpha(darkBlueColors.divider, 0.7)}` }}>
          Save Optimization Result
        </DialogTitle>
        <DialogContent>
          <DialogContentText sx={{ color: darkBlueColors.textSecondary, my: 2 }}>
            Enter a name for this result and confirm its type for comparison.
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            id="name"
            label="Result Name"
            type="text"
            fullWidth
            variant="outlined"
            value={resultName}
            onChange={(e) => setResultName(e.target.value)}
            sx={{
              mb: 2,
              '& .MuiOutlinedInput-root': {
                backgroundColor: darkBlueColors.inputBackground,
                color: darkBlueColors.textPrimary,
                '& fieldset': {
                  borderColor: alpha(darkBlueColors.border, 0.5),
                },
                '&:hover fieldset': {
                  borderColor: darkBlueColors.primary,
                },
                '&.Mui-focused fieldset': {
                  borderColor: darkBlueColors.primary,
                },
              },
              '& .MuiInputBase-input': {
                color: darkBlueColors.textPrimary,
              },
              '& .MuiInputLabel-root': {
                color: darkBlueColors.textSecondary,
              },
              '& .MuiInputLabel-root.Mui-focused': {
                color: darkBlueColors.primary,
              },
            }}
          />
          <FormControl fullWidth sx={{ mt: 2 }}>
            <FormLabel id="method-type-label" sx={{ color: darkBlueColors.textPrimary }}>
              Result Type
            </FormLabel>
            <RadioGroup
              row
              value={selectedMethodType}
              onChange={(e) => setSelectedMethodType(e.target.value)}
            >
              <FormControlLabel 
                value="standard" 
                control={
                  <Radio 
                    sx={{
                      color: alpha(darkBlueColors.textSecondary, 0.7),
                      '&.Mui-checked': {
                        color: darkBlueColors.primary,
                      },
                    }}
                  />
                } 
                label="Standard Optimization" 
                sx={{ color: darkBlueColors.textPrimary }}
              />
              <FormControlLabel 
                value="genetic" 
                control={
                  <Radio 
                    sx={{
                      color: alpha(darkBlueColors.textSecondary, 0.7),
                      '&.Mui-checked': {
                        color: darkBlueColors.secondary,
                      },
                    }}
                  />
                } 
                label="Genetic Optimization"
                sx={{ color: darkBlueColors.textPrimary }}
              />
            </RadioGroup>
          </FormControl>
        </DialogContent>
        <DialogActions sx={{ borderTop: `1px solid ${alpha(darkBlueColors.divider, 0.7)}`, p: 2 }}>
          <Button 
            onClick={handleSaveDialogClose}
            sx={{ 
              color: darkBlueColors.textSecondary,
              '&:hover': {
                backgroundColor: alpha(darkBlueColors.divider, 0.2),
              }
            }}
          >
            Cancel
          </Button>
          <Button 
            onClick={handleSaveConfirm} 
            disabled={!resultName.trim()}
            sx={{ 
              color: darkBlueColors.primary,
              '&:hover': {
                backgroundColor: alpha(darkBlueColors.primary, 0.1),
              },
              '&.Mui-disabled': {
                color: alpha(darkBlueColors.textSecondary, 0.5),
              }
            }}
          >
            Save
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default OptimizationResults;

======================================================================

DOSYA: src\components\optimization\OptimizationSettingsForm.js
==================================================
// src/components/optimization/OptimizationSettingsForm.js
import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Slider, 
  TextField, 
  InputAdornment,
  FormControl,
  FormLabel,
  RadioGroup,
  Radio,
  FormControlLabel,
  ToggleButton,
  ToggleButtonGroup,
  Tooltip,
  IconButton,
  alpha,
  useTheme,
  Divider,
  Grid,
  Card,
  CardContent,
  Switch,
  FormGroup,
  Checkbox
} from '@mui/material';
import InfoIcon from '@mui/icons-material/Info';
import TuneIcon from '@mui/icons-material/Tune';
import AccountTreeIcon from '@mui/icons-material/AccountTree';
import BalanceIcon from '@mui/icons-material/Balance';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import TrendingDownIcon from '@mui/icons-material/TrendingDown';
import EqualizerIcon from '@mui/icons-material/Equalizer';
import SpeedIcon from '@mui/icons-material/Speed';
import GridOnIcon from '@mui/icons-material/GridOn';

const OptimizationSettingsForm = ({ values, onChange }) => {
  const theme = useTheme();
  const [optimizationMethod, setOptimizationMethod] = useState(values.optimization_method || 'classic');
  const [selectedStrategies, setSelectedStrategies] = useState(values.selected_strategies || ['equal', 'increasing', 'decreasing', 'middle_weighted']);

  // Koyu mavi tema iÃ§in renkler
  const darkBlueColors = {
    // Ana renkler - koyu mavi tema iÃ§in daha parlak ve canlÄ±
    primary: '#64B5F6', // Daha aÃ§Ä±k mavi
    primaryLight: '#90CAF9',
    primaryDark: '#42A5F5',
    secondary: '#FF9800', // Turuncu - mavi ile kontrast
    secondaryLight: '#FFB74D',
    secondaryDark: '#F57C00',
    
    // Ä°ÅŸlevsel renkler - daha canlÄ±
    success: '#4CAF50',
    error: '#FF5252',
    info: '#29B6F6',
    warning: '#FFC107',
    
    // Arka plan ve metin renkleri
    paper: '#1A2035', // Daha koyu mavi-gri kaÄŸÄ±t rengi
    background: '#111827', // Ã‡ok koyu mavi arka plan
    textPrimary: '#FFFFFF', // Beyaz metin
    textSecondary: '#B0BEC5', // Soluk mavi-gri ikincil metin
    
    // Panel ve kart arka planlarÄ±
    cardBackground: '#1E293B', // Koyu mavi-gri kart arka planÄ±
    inputBackground: '#283147', // Biraz daha aÃ§Ä±k giriÅŸ alanÄ± arka planÄ±
    
    // SÄ±nÄ±r ve ayÄ±rÄ±cÄ±
    divider: '#2A3958', // Koyu mavi-gri ayÄ±rÄ±cÄ±
    border: '#3A486B'  // Daha aÃ§Ä±k sÄ±nÄ±r rengi
  };

  useEffect(() => {
    // Initialize selected strategies from props if available
    if (values.selected_strategies && values.selected_strategies.length > 0) {
      setSelectedStrategies(values.selected_strategies);
    }
  }, [values.selected_strategies]);

  const handleOptimizationMethodChange = (event) => {
    const newMethod = event.target.value;
    setOptimizationMethod(newMethod);
    onChange({ 
      ...values, 
      optimization_method: newMethod 
    });
  };

  const handleStrategiesChange = (event, newStrategies) => {
    // Ensure at least one strategy is selected
    if (newStrategies.length === 0) return;
    
    setSelectedStrategies(newStrategies);
    onChange({ 
      ...values, 
      selected_strategies: newStrategies 
    });
  };

  const handleSliderChange = (field) => (event, newValue) => {
    onChange({ ...values, [field]: newValue });
  };

  const handleInputChange = (field) => (event) => {
    const value = event.target.type === 'number' 
      ? parseFloat(event.target.value) 
      : event.target.value;
    onChange({ ...values, [field]: value });
  };

  // Method info details
  const methodInfo = {
    classic: {
      title: "Grid Algorithm",
      icon: <GridOnIcon sx={{ fontSize: 36, color: darkBlueColors.primary }} />,
      description: "Systematically evaluates various parameter combinations using a grid search approach",
      color: darkBlueColors.primary
    },
    genetic: {
      title: "Evolutionary Algorithm",
      icon: <AccountTreeIcon sx={{ fontSize: 36, color: darkBlueColors.secondary }} />,
      description: "Uses advanced genetic algorithms to intelligently search for optimal structures",
      color: darkBlueColors.secondary
    }
  };

  // Strategy info
  const strategyInfo = {
    equal: {
      title: "Equal Distribution",
      icon: <BalanceIcon />,
      description: "Allocates equal nominal amounts across all tranches",
      color: darkBlueColors.primary
    },
    increasing: {
      title: "Increasing by Maturity",
      icon: <TrendingUpIcon />,
      description: "Higher allocations for longer maturity tranches",
      color: darkBlueColors.success
    },
    decreasing: {
      title: "Decreasing by Maturity",
      icon: <TrendingDownIcon />,
      description: "Higher allocations for shorter maturity tranches",
      color: darkBlueColors.error
    },
    middle_weighted: {
      title: "Middle-Weighted",
      icon: <EqualizerIcon />,
      description: "Higher allocations for middle maturity tranches",
      color: darkBlueColors.info
    }
  };

  return (
    <Box>
      <Typography 
        variant="subtitle1" 
        gutterBottom 
        fontWeight="medium" 
        sx={{ 
          mb: 3, 
          color: darkBlueColors.textPrimary,
          textShadow: '0 1px 2px rgba(0,0,0,0.3)'
        }}
      >
        Select an optimization method and configure parameters to find the optimal structure for your asset-backed securities
      </Typography>
      
      {/* Method Selection */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {Object.keys(methodInfo).map((method) => (
          <Grid item xs={12} sm={6} key={method}>
            <Card 
              elevation={3}
              sx={{ 
                borderRadius: 2,
                border: `1px solid ${optimizationMethod === method 
                  ? alpha(methodInfo[method].color, 0.7) 
                  : alpha(darkBlueColors.border, 0.5)}`,
                backgroundColor: optimizationMethod === method 
                  ? alpha(methodInfo[method].color, 0.15)
                  : darkBlueColors.cardBackground,
                transition: 'all 0.2s ease-in-out',
                cursor: 'pointer',
                height: '100%',
                '&:hover': {
                  borderColor: alpha(methodInfo[method].color, 0.8),
                  backgroundColor: alpha(methodInfo[method].color, 0.1),
                  boxShadow: `0 0 10px ${alpha(methodInfo[method].color, 0.3)}`
                }
              }}
              onClick={() => {
                setOptimizationMethod(method);
                onChange({ ...values, optimization_method: method });
              }}
            >
              <CardContent sx={{ p: 2.5 }}>
                <FormControlLabel
                  value={method}
                  control={
                    <Radio 
                      checked={optimizationMethod === method}
                      onChange={() => {}}
                      sx={{
                        color: alpha(darkBlueColors.textSecondary, 0.7),
                        '&.Mui-checked': {
                          color: methodInfo[method].color,
                        },
                      }}
                    />
                  }
                  label={
                    <Box sx={{ ml: 0.5 }}>
                      {methodInfo[method].icon}
                      <Typography 
                        variant="subtitle1" 
                        sx={{ 
                          mt: 1.5, 
                          fontWeight: 500, 
                          color: optimizationMethod === method 
                            ? methodInfo[method].color 
                            : darkBlueColors.textPrimary
                        }}
                      >
                        {methodInfo[method].title}
                      </Typography>
                      <Typography variant="body2" sx={{ mt: 0.5, minHeight: 60, color: darkBlueColors.textSecondary }}>
                        {methodInfo[method].description}
                      </Typography>
                    </Box>
                  }
                  sx={{ 
                    mx: 0, 
                    alignItems: 'flex-start', 
                    '& .MuiFormControlLabel-label': { width: '100%' } 
                  }}
                />
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Strategy Selection for Classic Method */}
      {optimizationMethod === 'classic' && (
        <Box sx={{ 
          mb: 4, 
          p: 3, 
          backgroundColor: alpha(darkBlueColors.primary, 0.08), 
          borderRadius: 2, 
          border: `1px solid ${alpha(darkBlueColors.primary, 0.3)}`,
          boxShadow: `0 2px 8px ${alpha(darkBlueColors.background, 0.5)}`
        }}>
          <Typography 
            variant="h6" 
            gutterBottom 
            sx={{ 
              display: 'flex', 
              alignItems: 'center', 
              mb: 2, 
              color: darkBlueColors.primary,
              textShadow: '0 1px 2px rgba(0,0,0,0.2)'
            }}
          >
            <GridOnIcon sx={{ mr: 1 }} /> Select Distribution Strategies
            <Tooltip title="Select one or more strategies to include in the grid search process. The system will determine which strategy produces the best results." sx={{ ml: 1 }}>
              <IconButton size="small" sx={{ color: alpha(darkBlueColors.textPrimary, 0.7) }}>
                <InfoIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          </Typography>
          
          <Typography variant="body2" sx={{ mb: 2, color: darkBlueColors.textSecondary }}>
            Select the strategies you want to include in the grid search. The system will evaluate all selected strategies across the parameter space and identify the combination that produces the best results.
          </Typography>
          
          <Grid container spacing={2}>
            {Object.keys(strategyInfo).map((strategy) => (
              <Grid item xs={12} sm={6} md={3} key={strategy}>
                <Paper 
                  elevation={2}
                  sx={{
                    p: 2,
                    border: `1px solid ${selectedStrategies.includes(strategy) 
                      ? alpha(strategyInfo[strategy].color, 0.7) 
                      : alpha(darkBlueColors.border, 0.3)}`,
                    backgroundColor: selectedStrategies.includes(strategy) 
                      ? alpha(strategyInfo[strategy].color, 0.15)
                      : darkBlueColors.cardBackground,
                    borderRadius: 2,
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                    display: 'flex',
                    flexDirection: 'column',
                    height: '100%',
                    '&:hover': {
                      borderColor: alpha(strategyInfo[strategy].color, 0.8),
                      backgroundColor: alpha(strategyInfo[strategy].color, 0.1),
                      boxShadow: `0 0 8px ${alpha(strategyInfo[strategy].color, 0.2)}`
                    }
                  }}
                  onClick={() => {
                    const newSelection = selectedStrategies.includes(strategy)
                      ? selectedStrategies.filter(s => s !== strategy)
                      : [...selectedStrategies, strategy];
                    
                    if (newSelection.length > 0) {
                      handleStrategiesChange(null, newSelection);
                    }
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Checkbox 
                      checked={selectedStrategies.includes(strategy)}
                      size="small"
                      sx={{ 
                        p: 0.5, 
                        mr: 1,
                        color: alpha(darkBlueColors.textSecondary, 0.5),
                        '&.Mui-checked': {
                          color: strategyInfo[strategy].color,
                        }, 
                      }}
                    />
                    <Box sx={{ 
                      display: 'flex',
                      alignItems: 'center',
                      color: selectedStrategies.includes(strategy) 
                        ? strategyInfo[strategy].color 
                        : darkBlueColors.textPrimary
                    }}>
                      {React.cloneElement(strategyInfo[strategy].icon, { 
                        sx: { 
                          mr: 1,
                          color: selectedStrategies.includes(strategy) 
                            ? strategyInfo[strategy].color 
                            : alpha(darkBlueColors.textSecondary, 0.7)
                        } 
                      })}
                      <Typography 
                        variant="subtitle2" 
                        fontWeight={500}
                        sx={{ 
                          color: selectedStrategies.includes(strategy) 
                            ? strategyInfo[strategy].color 
                            : darkBlueColors.textPrimary
                        }}
                      >
                        {strategyInfo[strategy].title}
                      </Typography>
                    </Box>
                  </Box>
                  <Typography variant="body2" sx={{ mt: 1, fontSize: '0.8rem', color: darkBlueColors.textSecondary }}>
                    {strategyInfo[strategy].description}
                  </Typography>
                </Paper>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      <Divider sx={{ my: 3, borderColor: alpha(darkBlueColors.divider, 0.7) }} />
      
      <Box sx={{ 
        backgroundColor: darkBlueColors.cardBackground, 
        p: 3, 
        borderRadius: 2,
        border: `1px solid ${alpha(darkBlueColors.border, 0.3)}`,
        boxShadow: `0 2px 10px ${alpha(darkBlueColors.background, 0.8)}`
      }}>
        <Typography 
          variant="h6" 
          gutterBottom 
          sx={{ 
            color: methodInfo[optimizationMethod].color,
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}
        >
          {methodInfo[optimizationMethod].title} Configuration
        </Typography>
        
        {/* Method-specific settings */}
        {optimizationMethod === 'classic' && (
          <Box sx={{ mt: 3 }}>
            <Typography 
              variant="subtitle2" 
              gutterBottom 
              fontWeight="medium" 
              sx={{ color: darkBlueColors.textPrimary }}
            >
              Grid Search Parameters
            </Typography>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Class A Tranches Range</FormLabel>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.a_tranches_range[0]}</Typography>
                <Slider
                  value={values.a_tranches_range}
                  onChange={handleSliderChange('a_tranches_range')}
                  min={1}
                  max={10}
                  step={1}
                  valueLabelDisplay="auto"
                  aria-labelledby="a-tranches-range-slider"
                  sx={{ 
                    mx: 2,
                    color: darkBlueColors.primary,
                    '& .MuiSlider-thumb': {
                      boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.primary, 0.8)}`,
                    },
                    '& .MuiSlider-rail': {
                      backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                    },
                    '& .MuiSlider-track': {
                      backgroundColor: darkBlueColors.primary,
                    },
                    '& .MuiSlider-valueLabel': {
                      backgroundColor: darkBlueColors.primary,
                    },
                  }}
                />
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.a_tranches_range[1]}</Typography>
              </Box>
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Number of Class A tranches to consider in the grid search
              </Typography>
            </FormControl>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Maturity Range (days)</FormLabel>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.maturity_range[0]}</Typography>
                <Slider
                  value={values.maturity_range}
                  onChange={handleSliderChange('maturity_range')}
                  min={30}
                  max={365}
                  step={5}
                  valueLabelDisplay="auto"
                  aria-labelledby="maturity-range-slider"
                  sx={{ 
                    mx: 2,
                    color: darkBlueColors.primary,
                    '& .MuiSlider-thumb': {
                      boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.primary, 0.8)}`,
                    },
                    '& .MuiSlider-rail': {
                      backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                    },
                    '& .MuiSlider-track': {
                      backgroundColor: darkBlueColors.primary,
                    },
                    '& .MuiSlider-valueLabel': {
                      backgroundColor: darkBlueColors.primary,
                    },
                  }}
                />
                <Typography sx={{ color: darkBlueColors.textPrimary }}>{values.maturity_range[1]}</Typography>
              </Box>
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Range of maturity periods to evaluate in the grid (in days)
              </Typography>
            </FormControl>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Maturity Step</FormLabel>
              <Slider
                value={values.maturity_step}
                onChange={handleSliderChange('maturity_step')}
                min={5}
                max={30}
                step={5}
                valueLabelDisplay="auto"
                aria-labelledby="maturity-step-slider"
                marks={[
                  { value: 5, label: '5' },
                  { value: 10, label: '10' },
                  { value: 15, label: '15' },
                  { value: 20, label: '20' },
                  { value: 25, label: '25' },
                  { value: 30, label: '30' },
                ]}
                sx={{ 
                  color: darkBlueColors.primary,
                  '& .MuiSlider-markLabel': {
                    color: darkBlueColors.textSecondary,
                  },
                  '& .MuiSlider-thumb': {
                    boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.primary, 0.8)}`,
                  },
                  '& .MuiSlider-rail': {
                    backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                  },
                  '& .MuiSlider-track': {
                    backgroundColor: darkBlueColors.primary,
                  },
                  '& .MuiSlider-valueLabel': {
                    backgroundColor: darkBlueColors.primary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Grid resolution for maturity values (smaller steps = more thorough search)
              </Typography>
            </FormControl>
          </Box>
        )}
        
        {optimizationMethod === 'genetic' && (
          <Box sx={{ mt: 3 }}>
            <Typography 
              variant="subtitle2" 
              gutterBottom 
              fontWeight="medium" 
              sx={{ color: darkBlueColors.textPrimary }}
            >
              Evolutionary Algorithm Settings
            </Typography>
            
            <FormControl fullWidth sx={{ mb: 2 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Population Size</FormLabel>
              <Slider
                value={values.population_size || 50}
                onChange={(e, newValue) => onChange({ ...values, population_size: newValue })}
                min={10}
                max={100}
                step={5}
                valueLabelDisplay="auto"
                marks={[
                  { value: 10, label: '10' },
                  { value: 50, label: '50' },
                  { value: 100, label: '100' },
                ]}
                sx={{ 
                  color: darkBlueColors.secondary,
                  '& .MuiSlider-markLabel': {
                    color: darkBlueColors.textSecondary,
                  },
                  '& .MuiSlider-thumb': {
                    boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.secondary, 0.8)}`,
                  },
                  '& .MuiSlider-rail': {
                    backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                  },
                  '& .MuiSlider-track': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                  '& .MuiSlider-valueLabel': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Number of individuals in each generation - larger populations can find better solutions but take longer
              </Typography>
            </FormControl>
            
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Number of Generations</FormLabel>
              <Slider
                value={values.num_generations || 40}
                onChange={(e, newValue) => onChange({ ...values, num_generations: newValue })}
                min={10}
                max={100}
                step={5}
                valueLabelDisplay="auto"
                marks={[
                  { value: 10, label: '10' },
                  { value: 40, label: '40' },
                  { value: 100, label: '100' },
                ]}
                sx={{ 
                  color: darkBlueColors.secondary,
                  '& .MuiSlider-markLabel': {
                    color: darkBlueColors.textSecondary,
                  },
                  '& .MuiSlider-thumb': {
                    boxShadow: `0 0 0 2px ${darkBlueColors.cardBackground}, 0 0 0 4px ${alpha(darkBlueColors.secondary, 0.8)}`,
                  },
                  '& .MuiSlider-rail': {
                    backgroundColor: alpha(darkBlueColors.textSecondary, 0.3),
                  },
                  '& .MuiSlider-track': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                  '& .MuiSlider-valueLabel': {
                    backgroundColor: darkBlueColors.secondary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary }}>
                Number of evolutionary cycles to run - more generations improve results but take longer
              </Typography>
            </FormControl>
          </Box>
        )}
        
        <Divider sx={{ my: 3, borderColor: alpha(darkBlueColors.divider, 0.7) }} />
        
        {/* Common settings for all optimization methods - Ä°steÄŸe gÃ¶re metin deÄŸiÅŸiklikleri burada yapÄ±ldÄ± */}
        <Typography 
          variant="subtitle2" 
          gutterBottom 
          fontWeight="medium" 
          sx={{ color: darkBlueColors.textPrimary }}
        >
          Common Optimization Parameters
        </Typography>
        
        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Class B OranÄ±</FormLabel>
              <TextField
                value={values.min_class_b_percent}
                onChange={handleInputChange('min_class_b_percent')}
                type="number"
                InputProps={{
                  endAdornment: <InputAdornment position="end" sx={{ color: darkBlueColors.textSecondary }}>%</InputAdornment>,
                  inputProps: { min: 5, max: 30, step: 0.5 },
                }}
                sx={{
                  mt: 1,
                  '& .MuiOutlinedInput-root': {
                    backgroundColor: darkBlueColors.inputBackground,
                    color: darkBlueColors.textPrimary,
                    '& fieldset': {
                      borderColor: alpha(darkBlueColors.border, 0.5),
                    },
                    '&:hover fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                    '&.Mui-focused fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                  },
                  '& .MuiInputBase-input': {
                    color: darkBlueColors.textPrimary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, mt: 1 }}>
                Minimum percentage of total nominal to allocate to Class B
              </Typography>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Effective Coupon Rate</FormLabel>
              <TextField
                value={values.target_class_b_coupon_rate}
                onChange={handleInputChange('target_class_b_coupon_rate')}
                type="number"
                InputProps={{
                  endAdornment: <InputAdornment position="end" sx={{ color: darkBlueColors.textSecondary }}>%</InputAdornment>,
                  inputProps: { min: 10, max: 100, step: 0.5 },
                }}
                sx={{
                  mt: 1,
                  '& .MuiOutlinedInput-root': {
                    backgroundColor: darkBlueColors.inputBackground,
                    color: darkBlueColors.textPrimary,
                    '& fieldset': {
                      borderColor: alpha(darkBlueColors.border, 0.5),
                    },
                    '&:hover fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                    '&.Mui-focused fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                  },
                  '& .MuiInputBase-input': {
                    color: darkBlueColors.textPrimary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, mt: 1 }}>
                Target annual coupon rate for Class B tranche
              </Typography>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <FormControl fullWidth sx={{ mb: 4 }}>
              <FormLabel sx={{ color: darkBlueColors.textPrimary }}>Additional Days for Class B</FormLabel>
              <TextField
                value={values.additional_days_for_class_b}
                onChange={handleInputChange('additional_days_for_class_b')}
                type="number"
                InputProps={{
                  endAdornment: <InputAdornment position="end" sx={{ color: darkBlueColors.textSecondary }}>days</InputAdornment>,
                  inputProps: { min: 1, max: 180, step: 1 },
                }}
                sx={{
                  mt: 1,
                  '& .MuiOutlinedInput-root': {
                    backgroundColor: darkBlueColors.inputBackground,
                    color: darkBlueColors.textPrimary,
                    '& fieldset': {
                      borderColor: alpha(darkBlueColors.border, 0.5),
                    },
                    '&:hover fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                    '&.Mui-focused fieldset': {
                      borderColor: darkBlueColors.primary,
                    },
                  },
                  '& .MuiInputBase-input': {
                    color: darkBlueColors.textPrimary,
                  },
                }}
              />
              <Typography variant="body2" sx={{ color: darkBlueColors.textSecondary, mt: 1 }}>
                Additional days to add to the last cash flow date for Class B maturity
              </Typography>
            </FormControl>
          </Grid>
        </Grid>
      </Box>
    </Box>
  );
};

export default OptimizationSettingsForm;

======================================================================

DOSYA: src\contexts\DataContext.js
==================================================
/* -----------------------------------------------------------
 *  GlobalÂ state & helpers (ReactÂ Context)
 * --------------------------------------------------------- */

import React, {
  createContext,
  useContext,
  useEffect,
  useState,
} from 'react';

const DataContext = createContext();
export const useData = () => useContext(DataContext);

/* localStorage parse â€“Â "undefined" vb. hatalarÄ± engeller */
const safeParse = (key, fallback) => {
  try {
    const raw = localStorage.getItem(key);
    return raw ? JSON.parse(raw) : fallback;
  } catch {
    localStorage.removeItem(key);
    return fallback;
  }
};

/* -----------------------------------------------------------
 *              <DataProvider>
 * --------------------------------------------------------- */
export const DataProvider = ({ children }) => {
  /* ------------------- CoreÂ flags ------------------ */
  const [cashFlowData, setCashFlowData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  /* ---------------- FormÂ defaults ------------------ */
  const [generalSettings, setGeneralSettings] = useState({
    start_date: new Date(2025, 1, 13),
    operational_expenses: 7_928_640,
    min_buffer: 5,
  });

  const [tranchesA, setTranchesA] = useState([
    { maturity_days: 61, base_rate: 45.6, spread: 0, reinvest_rate: 40, nominal: 480_000_000 },
    { maturity_days: 120, base_rate: 44.5, spread: 0, reinvest_rate: 37.25, nominal: 460_000_000 },
    { maturity_days: 182, base_rate: 43.3, spread: 0, reinvest_rate: 32.5, nominal: 425_000_000 },
    { maturity_days: 274, base_rate: 42.5, spread: 0, reinvest_rate: 30, nominal: 400_000_000 },
  ]);

  const [trancheB, setTrancheB] = useState({
    maturity_days: 300,
    base_rate: 0,
    spread: 0,
    reinvest_rate: 25.5,
    /* nominal boÅŸ â€“Â optimizasyon gelince dolacak */
  });

  const [npvSettings, setNpvSettings] = useState({
    method: 'weighted_avg_rate',
    custom_rate: 40,
  });

  /* --------------- Optimization defaults ------------ */
  const [optimizationSettings, setOptimizationSettings] = useState({
    optimization_method: 'classic',
    a_tranches_range: [2, 6],
    maturity_range: [32, 365],
    maturity_step: 10,
    min_class_b_percent: 10,
    target_class_b_coupon_rate: 30,
    additional_days_for_class_b: 10,
    population_size: 50,
    num_generations: 40,
  });

  /* -------------- originals for <Reset> -------------- */
  const [origA, setOrigA] = useState(null);
  const [origB, setOrigB] = useState(null);
  useEffect(() => {
    if (!origA) setOrigA(JSON.parse(JSON.stringify(tranchesA)));
    if (!origB) setOrigB(JSON.parse(JSON.stringify(trancheB)));
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  /* ------------------ StoredÂ results ---------------- */
  const [calculationResults, setCalculationResults] = useState(() =>
    safeParse('calculationResults', null),
  );
  const [optimizationResults, setOptimizationResults] = useState(() =>
    safeParse('optimizationResults', null),
  );
  const [previousCalculationResults, setPreviousCalc] = useState(() =>
    safeParse('previousCalculationResults', null),
  );
  const [savedResults, setSavedResults] = useState(() =>
    safeParse('savedResults', []),
  );
  const [multipleComparisonResults, setMultiResults] = useState(() =>
    safeParse('multipleComparisonResults', []),
  );

  /* -------------- localStorageÂ wrappers -------------- */
  const wrapLocal = (setter, key) => (val) => {
    setter(val);
    if (val && (Array.isArray(val) ? val.length : true))
      localStorage.setItem(key, JSON.stringify(val));
    else localStorage.removeItem(key);
  };

  const setCalcResLS   = wrapLocal(setCalculationResults, 'calculationResults');
  const setOptResLS    = wrapLocal(setOptimizationResults, 'optimizationResults');
  const setPrevCalcLS  = wrapLocal(setPreviousCalc, 'previousCalculationResults');
  const setSavedResLS  = wrapLocal(setSavedResults, 'savedResults');
  const setMultiResLS  = wrapLocal(setMultiResults, 'multipleComparisonResults');

  /* ---------------------- helpers -------------------- */
  const saveResult = (result, name, methodType) => {
    if (!result) return false;
    const stamped = {
      ...result,
      id: Date.now().toString(),
      savedName: name,
      timestamp: new Date().toISOString(),
      methodType: methodType || result.method_type || 'manual',
    };
    setSavedResLS([...savedResults, stamped]);
    return true;
  };
  const deleteSavedResult  = (id) => setSavedResLS(savedResults.filter(r => r.id !== id));
  const clearSavedResults  = () => setSavedResLS([]);
  const clearComparisonData = () => setMultiResLS([]);

  const resetToDefaults = () => {
    if (origA && origB) {
      setTranchesA(JSON.parse(JSON.stringify(origA)));
      setTrancheB(JSON.parse(JSON.stringify(origB)));
      return true;
    }
    return false;
  };

  const clearData = () => {
    setCashFlowData(null);
    setCalcResLS(null);
    setOptResLS(null);
    setError(null);
  };

  /* ---------- request constructors ---------- */
  const createCalculationRequest = () => ({
    general_settings: {
      start_date: generalSettings.start_date.toISOString().split('T')[0],
      operational_expenses: generalSettings.operational_expenses,
      min_buffer: generalSettings.min_buffer,
    },
    tranches_a: tranchesA,
    tranche_b: trancheB,
    npv_settings: npvSettings,
  });

  const createOptimizationRequest = () => ({
    optimization_settings: optimizationSettings,
    general_settings: {
      start_date: generalSettings.start_date.toISOString().split('T')[0],
      operational_expenses: generalSettings.operational_expenses,
      min_buffer: generalSettings.min_buffer,
    },
  });

  /* ---------------- contextÂ value ------------------- */
  const value = {
    /* raw data */
    cashFlowData,
    setCashFlowData,
    isLoading,
    setIsLoading,
    error,
    setError,

    /* form state */
    generalSettings,
    setGeneralSettings,
    tranchesA,
    setTranchesA,
    trancheB,
    setTrancheB,
    npvSettings,
    setNpvSettings,

    /* optimization settings */
    optimizationSettings,
    setOptimizationSettings,

    /* results */
    calculationResults,
    setCalculationResults: setCalcResLS,
    optimizationResults,
    setOptimizationResults: setOptResLS,
    previousCalculationResults,
    setPreviousCalculationResults: setPrevCalcLS,

    /* saved / comparison */
    savedResults,
    setSavedResults: setSavedResLS,
    saveResult,
    deleteSavedResult,
    clearSavedResults,
    multipleComparisonResults,
    setMultipleComparisonResults: setMultiResLS,
    clearComparisonData,

    /* misc helpers */
    resetToDefaults,
    clearData,
    createCalculationRequest,
    createOptimizationRequest,
  };

  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;
};


======================================================================

DOSYA: src\pages\CalculationPage.js
==================================================
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Tabs,
  Tab,
  Button,
  Alert,
  CircularProgress,
  Snackbar,
  IconButton,
  Tooltip,
  Divider,
} from '@mui/material';
import CalculateIcon from '@mui/icons-material/Calculate';
import CompareIcon from '@mui/icons-material/Compare';
import ReplayIcon from '@mui/icons-material/Replay';

import { useData } from '../contexts/DataContext';
import { calculateResults } from '../services/apiService';

import GeneralSettingsForm from '../components/calculation/GeneralSettingsForm';
import TrancheAForm from '../components/calculation/TrancheAForm';
import TrancheBForm from '../components/calculation/TrancheBForm';
import ClassBCouponAdjuster from '../components/calculation/ClassBCouponAdjuster';
import CalculationResults from './CalculationResults';
import InterestRatesTable from '../components/calculation/InterestRatesTable';

import { useNavigate } from 'react-router-dom';

const CalculationPage = () => {
  const navigate = useNavigate();
  const {
    cashFlowData,
    calculationResults,
    setCalculationResults,
    isLoading,
    setIsLoading,
    error,
    setError,
    createCalculationRequest,
    previousCalculationResults,
    resetToDefaults,
    multipleComparisonResults,
    setMultipleComparisonResults,
  } = useData();

  const [tabValue, setTabValue] = useState(0);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success',
  });
  const [optimizationData, setOptimizationData] = useState(null);

  /* ------------- Autoâ€‘calculate after optimization ------------- */
  useEffect(() => {
    const stored = sessionStorage.getItem('optimizationData');
    if (stored) {
      try {
        const parsed = JSON.parse(stored);
        setOptimizationData(parsed);
        handleCalculate(parsed); // pass optimization data
      } catch (e) {
        console.error('Cannot parse optimizationData:', e);
      } finally {
        sessionStorage.removeItem('optimizationData');
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  /* ---------------------- Handlers ---------------------- */
  const handleTabChange = (_, nv) => setTabValue(nv);

  const handleCalculate = async (optData = optimizationData) => {
    try {
      setIsLoading(true);
      setError(null);

      const req = createCalculationRequest();

      /* pass optimization meta (optional) */
      if (optData) {
        req.is_optimized = true;
        req.optimization_method = optData.optimization_method;
      }

      console.log('Calculation request:', req);

      const res = await calculateResults(req, optData); // 2. parametre opsiyonel!
      console.log('Calculation response:', res);

      /* label & metadata */
      if (!res.is_optimized) {
        res.label = 'Manual Calculation';
        res.method_type = 'manual';
      } else {
        const map = {
          classic: 'Standard Optimization',
          genetic: 'Evolutionary Algorithm',
          equal: 'Equal Distribution',
          increasing: 'Increasing by Maturity',
          decreasing: 'Decreasing by Maturity',
          middle_weighted: 'Middle Weighted',
        };
        const mName = res.optimization_method || 'optimized';
        res.label = `${map[mName] || mName} Optimization`;
        res.method_type = mName === 'genetic' ? 'genetic' : 'standard';
      }
      res.timestamp = new Date().toISOString();

      setCalculationResults(res);
      setTabValue(1);

      /* comparison buffer (max 5) */
      setMultipleComparisonResults((prev) => {
        const up = prev ? [...prev] : [];
        const idx = up.findIndex((r) => r.method_type === res.method_type);
        if (idx >= 0) up[idx] = { ...res };
        else {
          if (up.length >= 5) up.shift();
          up.push({ ...res });
        }
        return up;
      });

      setSnackbar({
        open: true,
        message: 'Calculation completed successfully!',
        severity: 'success',
      });
    } catch (e) {
      setError('Calculation failed. Please check parameters and try again.');
      console.error(e);
      setSnackbar({
        open: true,
        message: 'Calculation failed. Please try again.',
        severity: 'error',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const goToComparison = () => navigate('/comparison');

  const handleReset = () => {
    if (resetToDefaults()) {
      setSnackbar({
        open: true,
        message: 'Reset to original values.',
        severity: 'success',
      });
    }
  };

  const handleSnackClose = (_, r) => {
    if (r === 'clickaway') return;
    setSnackbar((s) => ({ ...s, open: false }));
  };

  /* -------------------- RENDER -------------------- */
  if (!cashFlowData) {
    return (
      <Container>
        <Box sx={{ mt: 4, textAlign: 'center' }}>
          <Typography variant="h5" color="error">
            Please upload cashâ€‘flow data first
          </Typography>
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleSnackClose}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>

      {/* Header */}
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          mb: 3,
        }}
      >
        <Typography variant="h4">ABS Calculation</Typography>

        <Box sx={{ display: 'flex', gap: 2 }}>
          {calculationResults && previousCalculationResults && (
            <Button
              variant="outlined"
              color="primary"
              onClick={goToComparison}
              startIcon={<CompareIcon />}
            >
              View Comparisons
            </Button>
          )}

          <Tooltip title="Reset to original values">
            <IconButton color="primary" onClick={handleReset} size="small">
              <ReplayIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {error && <Alert severity="error">{error}</Alert>}

      {/* Tabs */}
      <Paper sx={{ mb: 4 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={handleTabChange}>
            <Tab label="Input Parameters" />
            <Tab label="Results" disabled={!calculationResults} />
            <Tab label="Interest Rates" disabled={!calculationResults} />
          </Tabs>
        </Box>

        <Box sx={{ p: 3 }}>
          {tabValue === 0 && (
            <>
              <GeneralSettingsForm />
              <TrancheAForm />
              <TrancheBForm />
              
              {/* Add the new ClassBCouponAdjuster component */}
              {calculationResults && <ClassBCouponAdjuster />}

              <Divider sx={{ my: 3 }} />

              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'center', gap: 2 }}>
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  onClick={() => handleCalculate()}
                  disabled={isLoading}
                  startIcon={
                    isLoading ? <CircularProgress size={24} /> : <CalculateIcon />
                  }
                >
                  {isLoading ? 'Calculatingâ€¦' : 'Calculate Results'}
                </Button>

                {calculationResults && previousCalculationResults && (
                  <Button
                    variant="outlined"
                    color="primary"
                    size="large"
                    onClick={goToComparison}
                    startIcon={<CompareIcon />}
                  >
                    Compare Results
                  </Button>
                )}
              </Box>
            </>
          )}

          {tabValue === 1 && calculationResults && (
            <CalculationResults results={calculationResults} />
          )}

          {tabValue === 2 && calculationResults && (
            <InterestRatesTable results={calculationResults} />
          )}
        </Box>
      </Paper>
    </Container>
  );
};

export default CalculationPage;

======================================================================

DOSYA: src\pages\CalculationResults.js
==================================================
// src/components/calculation/CalculationResults.js
import React, { useState } from "react";
import { 
  Box, 
  Typography, 
  Paper,
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Divider,
  Chip,
  alpha,
  Tabs,
  Tab,
  Grid,
  Card,
  CardContent,
  useTheme,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  TextField,
  Snackbar,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio
} from "@mui/material";
import { BarChart, Bar, PieChart, Pie, Cell, LineChart, Line, ScatterChart, Scatter, ZAxis,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, AreaChart, Area, ReferenceLine } from "recharts";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import TimelineIcon from '@mui/icons-material/Timeline';
import PieChartIcon from '@mui/icons-material/PieChart';
import BarChartIcon from '@mui/icons-material/BarChart';
import AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';
import TableChartIcon from '@mui/icons-material/TableChart';
import ShowChartIcon from '@mui/icons-material/ShowChart';
import SaveIcon from '@mui/icons-material/Save';
import { useData } from '../contexts/DataContext';

// Custom tooltip component for charts
const CustomTooltip = ({ active, payload, label, formatter }) => {
  const theme = useTheme();
  if (active && payload && payload.length) {
    return (
      <Paper
        sx={{
          p: 1.5,
          boxShadow: "0 2px 12px rgba(0,0,0,0.15)",
          borderRadius: 1,
          border: "none",
          minWidth: 180,
        }}
      >
        <Typography variant="subtitle2" sx={{ mb: 0.5 }}>{label}</Typography>
        {payload.map((entry, index) => (
          <Box key={`item-${index}`} sx={{ color: entry.color, display: 'flex', justifyContent: 'space-between', my: 0.5 }}>
            <Typography variant="body2" sx={{ mr: 2 }}>
              {entry.name}:
            </Typography>
            <Typography variant="body2" fontWeight="medium">
              {formatter ? formatter(entry.value) : entry.value}
            </Typography>
          </Box>
        ))}
      </Paper>
    );
  }
  return null;
};

const CalculationResults = ({ results }) => {
  const theme = useTheme();
  const [tabValue, setTabValue] = useState(0);
  
  // Add states for save functionality
  const [saveDialogOpen, setSaveDialogOpen] = useState(false);
  const [resultName, setResultName] = useState('');
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [selectedMethodType, setSelectedMethodType] = useState('manual');
  
  // Get saveResult function from context
  const { saveResult } = useData();
  
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Add these new functions for save functionality
  const handleSaveClick = () => {
    setSaveDialogOpen(true);
    // Default name based on calculation type
    let defaultName = 'Manual Calculation';
    if (results.is_optimized) {
      defaultName = results.optimization_method ? 
        `${results.optimization_method.charAt(0).toUpperCase() + results.optimization_method.slice(1)} Optimization` : 
        'Optimized Calculation';
    }
    setResultName(defaultName);
    
    // Set default method type based on results
    let methodType = 'manual';
    if (results.is_optimized) {
      methodType = results.optimization_method === 'genetic' ? 'genetic' : 'standard';
    }
    setSelectedMethodType(methodType);
  };
  
  const handleSaveDialogClose = () => {
    setSaveDialogOpen(false);
  };
  
  const handleSaveConfirm = () => {
    const saved = saveResult(results, resultName, selectedMethodType);
    
    if (saved) {
      setSnackbarMessage(`Result saved as "${resultName}" (${selectedMethodType})`);
      setSnackbarOpen(true);
      setSaveDialogOpen(false);
    } else {
      setSnackbarMessage('Failed to save result');
      setSnackbarOpen(true);
    }
  };
  
  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };
  
  if (!results) {
    return (
      <Paper sx={{ 
        p: 4, 
        textAlign: "center", 
        borderRadius: 2,
        backgroundColor: alpha(theme.palette.info.light, 0.08),
        border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
      }}>
        <Typography variant="h6" color="text.secondary" gutterBottom>
          Results Not Available
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Please start the calculation process to view results
        </Typography>
      </Paper>
    );
  }
  
  // Format currency values
  const formatCurrency = (value) => {
    if (value === undefined || value === null) return "â‚º0.00";
    return new Intl.NumberFormat("tr-TR", { style: "currency", currency: "TRY" }).format(value);
  };
  
  // Format percentage values with null check
  const formatPercent = (value) => {
    if (value === undefined || value === null) return "0.00%";
    return `${value.toFixed(2)}%`;
  };

  // Extract color values from theme
  const classAColor = theme.palette.primary.main;
  const classBColor = theme.palette.secondary.main;
  
  // Calculate totals with null checks
  const totalClassA = results.class_a_total || 0;
  const totalClassB = results.class_b_total || 0;
  const totalAll = totalClassA + totalClassB;
  
  // Check if minimum buffer requirement is met
  const minBufferTarget = 5.0;
  const isBufferMet = (results.min_buffer_actual || 0) >= minBufferTarget;
  
  // Prepare data for tranche comparison chart
  const classComparisonData = [
    {
      name: "Class A",
      principal: results.class_a_principal || 0,
      interest: results.class_a_interest || 0,
      total: results.class_a_total || 0,
      color: classAColor
    },
    {
      name: "Class B",
      principal: results.class_b_principal || 0,
      coupon: results.class_b_coupon || 0,
      total: results.class_b_total || 0,
      color: classBColor
    },
  ];
  
  // Prepare data for pie chart
  const pieData = [
    { name: 'Class A', value: totalClassA, color: classAColor },
    { name: 'Class B', value: totalClassB, color: classBColor }
  ];
  
  // Prepare data for tranche-level charts
  const trancheDetails = results.tranche_results ? results.tranche_results.map(t => ({
    name: t["Tranche"],
    principal: t["Principal"],
    interest: t["Is Class A"] ? t["Interest"] : t["Coupon Payment"],
    total: t["Total Payment"],
    buffer: t["Buffer Cash Flow Ratio (%)"],
    maturity: t["Maturity Days"],
    isClassA: t["Is Class A"],
    bufferIn: t["Buffer In"],
    cashFlow: t["Cash Flow Total"],
    reinvestment: t["Reinvestment Return"],
    bufferReinvestment: t["Buffer Reinvestment"],
    totalAvailable: t["Total Available"],
  })) : [];
  
  // Prepare data for timeline/maturity chart
  const maturityData = trancheDetails.map(t => ({
    ...t,
    x: t.maturity,
    y: t.total,
    z: t.isClassA ? 30 : 60, // Size for scatter plot
  }));
  
  // Prepare buffer ratio chart data
  const bufferData = trancheDetails
    .filter(t => t.isClassA)
    .map(t => ({
      name: t.name,
      buffer: t.buffer,
      minimum: minBufferTarget
    }));
    
  // Cash flow components data
  const cashFlowComponentsData = trancheDetails.map(t => ({
    name: t.name,
    cashFlow: t.cashFlow,
    reinvestment: t.reinvestment,
    bufferIn: t.bufferIn,
    bufferReinvestment: t.bufferReinvestment,
  }));
  
  // Financing cost analysis data for visualization
  const financingData = [
    { name: 'Total Loan Principal', value: results.total_loan_principal },
    { name: 'Total Principal Paid', value: results.total_principal_paid },
  ];
  
  // Color palette for multiple tranches
  const getTrancheColor = (index, isClassA) => {
    if (isClassA) {
      const colors = [
        theme.palette.primary.main,
        theme.palette.primary.light,
        alpha(theme.palette.primary.main, 0.8),
        alpha(theme.palette.primary.main, 0.6),
        alpha(theme.palette.primary.main, 0.4),
      ];
      return colors[index % colors.length];
    } else {
      const colors = [
        theme.palette.secondary.main,
        theme.palette.secondary.light,
        alpha(theme.palette.secondary.main, 0.8),
        alpha(theme.palette.secondary.main, 0.6),
        alpha(theme.palette.secondary.main, 0.4),
      ];
      return colors[index % colors.length];
    }
  };
  
  // Chart configuration
  const chartConfig = {
    height: 350,
    margin: { top: 20, right: 30, left: 20, bottom: 20 },
  };

  return (
    <Box>
      {/* Add Save Button at the top of the component */}
      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
        <Button
          variant="contained"
          color="success"
          startIcon={<SaveIcon />}
          onClick={handleSaveClick}
        >
          Save Result
        </Button>
      </Box>
      
      {/* Summary Section */}
      <Paper 
        elevation={0}
        sx={{ 
          p: 3, 
          mb: 3, 
          border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
          backgroundColor: alpha(theme.palette.primary.main, 0.03),
          borderRadius: 2
        }}
      >
        <Typography variant="h6" color="primary.main" fontWeight="medium" gutterBottom>
          Calculation Results Summary
        </Typography>
        
        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 3, mt: 2 }}>
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary" fontWeight="medium">
              Payment Totals
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Class A Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalClassA)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalClassA / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.primary.main, 0.1),
                          color: theme.palette.primary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Class B Total</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(totalClassB)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Chip 
                        size="small" 
                        label={formatPercent(totalAll > 0 ? (totalClassB / totalAll * 100) : 0)}
                        sx={{ 
                          bgcolor: alpha(theme.palette.secondary.main, 0.1),
                          color: theme.palette.secondary.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Grand Total</TableCell>
                    <TableCell align="right">{formatCurrency(totalAll)}</TableCell>
                    <TableCell align="right">
                      <Chip 
                        size="small" 
                        label="100.00%"
                        sx={{ 
                          bgcolor: alpha(theme.palette.info.main, 0.1),
                          color: theme.palette.info.main,
                          fontWeight: 500,
                          fontSize: '0.75rem'
                        }}
                      />
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
          
          <Box sx={{ 
            flex: "1 0 300px", 
            bgcolor: 'background.paper', 
            p: 2, 
            borderRadius: 1,
            boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
          }}>
            <Typography variant="subtitle1" gutterBottom color="text.secondary" fontWeight="medium">
              Principal and Interest
            </Typography>
            <TableContainer sx={{ mt: 1 }}>
              <Table size="small">
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: classAColor,
                            mr: 1 
                          }} 
                        />
                        Class A
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_a_interest)}</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ pl: 0, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box 
                          component="span" 
                          sx={{ 
                            display: 'inline-block', 
                            width: 10, 
                            height: 10, 
                            borderRadius: '50%', 
                            bgcolor: classBColor,
                            mr: 1 
                          }} 
                        />
                        Class B
                      </Box>
                    </TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_principal)}</TableCell>
                    <TableCell align="right" sx={{ borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>{formatCurrency(results.class_b_coupon)}</TableCell>
                  </TableRow>
                  <TableRow sx={{ "& td": { fontWeight: 600 } }}>
                    <TableCell sx={{ pl: 0 }}>Total</TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_principal || 0) + (results.class_b_principal || 0))}
                    </TableCell>
                    <TableCell align="right">
                      {formatCurrency((results.class_a_interest || 0) + (results.class_b_coupon || 0))}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </Box>
        
        <Divider sx={{ my: 3, opacity: 0.6 }} />
        
        <Box sx={{ 
          display: 'flex', 
          gap: 4, 
          flexWrap: 'wrap',
          backgroundColor: isBufferMet ? alpha(theme.palette.success.main, 0.08) : alpha(theme.palette.error.main, 0.08),
          p: 2,
          borderRadius: 1
        }}>
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Minimum Buffer Requirement
            </Typography>
            <Typography variant="h6" sx={{ mt: 0.5 }}>
              {formatPercent(minBufferTarget)}
            </Typography>
          </Box>
          
          <Box>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Actual Minimum Buffer (Class A)
            </Typography>
            <Typography variant="h6" color={isBufferMet ? "success.main" : "error.main"} sx={{ mt: 0.5 }}>
              {formatPercent(results.min_buffer_actual)}
            </Typography>
          </Box>
          
          <Box sx={{ ml: 'auto' }}>
            <Typography variant="body2" color="text.secondary" fontWeight={500}>
              Status
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
              {isBufferMet ? (
                <CheckCircleOutlineIcon color="success" sx={{ mr: 1 }} />
              ) : (
                <ErrorOutlineIcon color="error" sx={{ mr: 1 }} />
              )}
              <Typography 
                variant="h6" 
                color={isBufferMet ? "success.main" : "error.main"}
              >
                {isBufferMet ? "Requirement Met" : "Requirement Not Met"}
              </Typography>
            </Box>
          </Box>
        </Box>
      </Paper>
      
      {/* Chart and Table Tabs */}
      <Box sx={{ mb: 4 }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          sx={{
            mb: 2,
            '& .MuiTab-root': {
              minWidth: 'auto',
              px: 3
            }
          }}
        >
          <Tab icon={<PieChartIcon />} label="Overview" iconPosition="start" />
          <Tab icon={<BarChartIcon />} label="Tranche Details" iconPosition="start" />
          <Tab icon={<TimelineIcon />} label="Maturity Analysis" iconPosition="start" />
          <Tab icon={<ShowChartIcon />} label="Cash Flow Analysis" iconPosition="start" />
          <Tab icon={<AccountBalanceWalletIcon />} label="Financing" iconPosition="start" />
          <Tab icon={<TableChartIcon />} label="Detailed Table" iconPosition="start" />
        </Tabs>
        
        {/* Tab 1: Overview Charts */}
        {tabValue === 0 && (
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  height: '100%',
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Distribution by Class
                </Typography>
                <Box sx={{ height: chartConfig.height, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart margin={chartConfig.margin}>
                      <Pie
                        data={pieData}
                        dataKey="value"
                        nameKey="name"
                        cx="50%"
                        cy="50%"
                        outerRadius={100}
                        innerRadius={60}
                        labelLine={false}
                        label={({ name, percent }) => `${name} (${(percent * 100).toFixed(1)}%)`}
                      >
                        {pieData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  height: '100%',
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Principal vs Interest/Coupon
                </Typography>
                <Box sx={{ height: chartConfig.height, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={classComparisonData}
                      margin={chartConfig.margin}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis dataKey="name" />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="principal" 
                        name="Principal" 
                        stackId="a" 
                        fill={theme.palette.primary.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="interest" 
                        name="Interest" 
                        stackId="a" 
                        fill={theme.palette.info.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="coupon" 
                        name="Coupon" 
                        stackId="a" 
                        fill={theme.palette.secondary.main}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                  backgroundColor: alpha(theme.palette.info.main, 0.03),
                  borderRadius: 2
                }}
              >
                <Typography variant="h6" color="info.main" gutterBottom fontWeight="medium">
                  Financing Cost Analysis
                </Typography>
                
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Box sx={{ 
                      mt: 2,
                      p: 2,
                      bgcolor: 'background.paper', 
                      borderRadius: 1,
                      boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
                    }}>
                      <TableContainer>
                        <Table>
                          <TableBody>
                            <TableRow>
                              <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Principal Paid to Bank:</TableCell>
                              <TableCell align="right" sx={{ fontWeight: 600, pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                                {formatCurrency(results.total_principal_paid)}
                              </TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell sx={{ pl: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>Total Loan Principal:</TableCell>
                              <TableCell align="right" sx={{ pr: 2, borderBottom: `1px solid ${alpha('#000', 0.08)}` }}>
                                {formatCurrency(results.total_loan_principal)}
                              </TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell sx={{ pl: 2, fontWeight: 600 }}>
                                Financing {(results.financing_cost || 0) > 0 ? "Profit" : "Loss"}:
                              </TableCell>
                              <TableCell 
                                align="right" 
                                sx={{ 
                                  fontWeight: 600,
                                  pr: 2,
                                  color: (results.financing_cost || 0) > 0 ? "success.main" : "error.main"
                                }}
                              >
                                {formatCurrency(Math.abs(results.financing_cost || 0))}
                              </TableCell>
                            </TableRow>
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Box sx={{ height: 250 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                          layout="vertical"
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                          <XAxis type="number" tickFormatter={(value) => `â‚º${value/1000000}M`} />
                          <YAxis type="category" dataKey="name" />
                          <Tooltip 
                            content={<CustomTooltip formatter={(value) => formatCurrency(value)} />} 
                          />
                          <Bar 
                            dataKey="value" 
                            fill={(results.financing_cost || 0) > 0 ? theme.palette.success.light : theme.palette.error.light}
                            radius={4}
                            barSize={30}
                          />
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 2: Tranche Details */}
        {tabValue === 1 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Tranche Payments Breakdown
                </Typography>
                <Box sx={{ height: 400, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trancheDetails}
                      margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name" 
                        angle={-45}
                        textAnchor="end"
                        height={60}
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="principal" 
                        name="Principal" 
                        fill={theme.palette.primary.dark}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="interest" 
                        name="Interest/Coupon" 
                        fill={theme.palette.secondary.light}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Individual Tranche Amounts
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trancheDetails}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Bar 
                        dataKey="total" 
                        name="Total Payment" 
                        radius={[4, 4, 0, 0]}
                      >
                        {trancheDetails.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={getTrancheColor(index, entry.isClassA)} 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Buffer Analysis (Class A)
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={bufferData}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `${value}%`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => `${value.toFixed(2)}%`} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="buffer" 
                        name="Buffer Ratio" 
                        fill={theme.palette.success.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="minimum" 
                        name="Minimum Requirement" 
                        fill={theme.palette.error.light}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 3: Maturity Analysis */}
        {tabValue === 2 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Maturity Distribution
                </Typography>
                <Box sx={{ height: 400, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <ScatterChart
                      margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        type="number" 
                        dataKey="maturity" 
                        name="Maturity" 
                        unit=" days" 
                        domain={[0, 'dataMax + 30']}
                      />
                      <YAxis 
                        type="number" 
                        dataKey="total" 
                        name="Total Payment" 
                        tickFormatter={(value) => `â‚º${value/1000000}M`}
                      />
                      <ZAxis range={[60, 200]} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value, name) => 
                          name === "Maturity" ? `${value} days` : formatCurrency(value)
                        } />}
                        cursor={{ strokeDasharray: '3 3' }}
                      />
                      <Legend />
                      <Scatter 
                        name="Tranche Payments" 
                        data={maturityData}
                        fill={theme.palette.primary.main}
                      >
                        {maturityData.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={getTrancheColor(index, entry.isClassA)} 
                          />
                        ))}
                      </Scatter>
                    </ScatterChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Payment Timeline
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={trancheDetails}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="maturity"
                        type="number"
                        domain={['dataMin', 'dataMax']}
                        label={{ 
                          value: 'Maturity (days)', 
                          position: 'insideBottomRight', 
                          offset: -10 
                        }}
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value, name) => 
                          name === "maturity" ? `${value} days` : formatCurrency(value)
                        } />}
                      />
                      <Legend />
                      <Line 
                        type="monotone" 
                        dataKey="total" 
                        name="Total Payment" 
                        stroke={theme.palette.primary.main}
                        strokeWidth={2}
                        dot={{ r: 6 }}
                        activeDot={{ r: 8 }}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Maturity vs. Buffer Ratio
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <ScatterChart
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        type="number"
                        dataKey="maturity"
                        name="Maturity"
                        unit=" days"
                        label={{ 
                          value: 'Maturity (days)', 
                          position: 'insideBottomRight', 
                          offset: -10 
                        }}
                      />
                      <YAxis 
                        type="number"
                        dataKey="buffer"
                        name="Buffer Ratio"
                        unit="%"
                      />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value, name) => 
                          name === "Maturity" ? `${value} days` : `${value.toFixed(2)}%`
                        } />}
                      />
                      <ReferenceLine 
                        y={minBufferTarget}
                        stroke={theme.palette.error.main}
                        strokeDasharray="3 3"
                        label={{ 
                          value: 'Minimum Requirement', 
                          position: 'insideTopRight',
                          fill: theme.palette.error.main,
                          fontSize: 12
                        }}
                      />
                      <Scatter 
                        name="Class A Tranches" 
                        data={trancheDetails.filter(t => t.isClassA)}
                        fill={theme.palette.primary.main}
                      >
                        {trancheDetails
                          .filter(t => t.isClassA)
                          .map((entry, index) => (
                            <Cell 
                              key={`cell-${index}`} 
                              fill={entry.buffer >= minBufferTarget 
                                ? theme.palette.success.main
                                : theme.palette.error.main
                              } 
                            />
                        ))}
                      </Scatter>
                    </ScatterChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 4: Cash Flow Analysis */}
        {tabValue === 3 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Cash Flow Components by Tranche
                </Typography>
                <Box sx={{ height: 400, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={cashFlowComponentsData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name" 
                        angle={-45}
                        textAnchor="end"
                        height={60}
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="cashFlow" 
                        name="Cash Flow" 
                        fill={theme.palette.primary.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="reinvestment" 
                        name="Reinvestment Return" 
                        fill={theme.palette.secondary.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="bufferIn" 
                        name="Buffer In" 
                        fill={theme.palette.info.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="bufferReinvestment" 
                        name="Buffer Reinvestment" 
                        fill={theme.palette.warning.main}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Available vs Payment
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trancheDetails}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Bar 
                        dataKey="totalAvailable" 
                        name="Total Available" 
                        fill={theme.palette.success.main}
                        radius={[4, 4, 0, 0]}
                      />
                      <Bar 
                        dataKey="total" 
                        name="Total Payment" 
                        fill={theme.palette.primary.main}
                        radius={[4, 4, 0, 0]}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 2, 
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
                  borderRadius: 2
                }}
              >
                <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                  Cash Flow Components
                </Typography>
                <Box sx={{ height: 350, mt: 1 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart
                      data={cashFlowComponentsData}
                      margin={{ top: 5, right: 30, left: 5, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                      <XAxis 
                        dataKey="name"
                        angle={-45}
                        textAnchor="end"
                        height={60}  
                      />
                      <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                      <Tooltip 
                        content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                      />
                      <Legend />
                      <Area 
                        type="monotone" 
                        dataKey="cashFlow" 
                        name="Cash Flow" 
                        stackId="1"
                        stroke={theme.palette.primary.main}
                        fill={alpha(theme.palette.primary.main, 0.6)}
                      />
                      <Area 
                        type="monotone" 
                        dataKey="reinvestment" 
                        name="Reinvestment" 
                        stackId="1"
                        stroke={theme.palette.secondary.main}
                        fill={alpha(theme.palette.secondary.main, 0.6)}
                      />
                      <Area 
                        type="monotone" 
                        dataKey="bufferIn" 
                        name="Buffer In" 
                        stackId="1"
                        stroke={theme.palette.info.main}
                        fill={alpha(theme.palette.info.main, 0.6)}
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                </Box>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 5: Financing Analysis */}
        {tabValue === 4 && (
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 3, 
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                  backgroundColor: alpha(theme.palette.info.main, 0.03),
                  borderRadius: 2
                }}
              >
                <Typography variant="h6" color="info.main" gutterBottom fontWeight="medium">
                  Financing Cost Analysis
                </Typography>
                
                <Grid container spacing={4}>
                  <Grid item xs={12} md={6}>
                    <Box sx={{ 
                      p: 3,
                      bgcolor: 'background.paper', 
                      borderRadius: 2,
                      boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
                    }}>
                      <Typography variant="subtitle1" gutterBottom color="text.secondary" fontWeight="medium">
                        Key Metrics
                      </Typography>
                      
                      <Box sx={{ mt: 2 }}>
                        <Grid container spacing={2}>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Total Loan Principal</Typography>
                            <Typography variant="h6" fontWeight="medium">{formatCurrency(results.total_loan_principal)}</Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Principal Paid to Bank</Typography>
                            <Typography variant="h6" fontWeight="medium">{formatCurrency(results.total_principal_paid)}</Typography>
                          </Grid>
                          <Grid item xs={12}>
                            <Divider sx={{ my: 2 }} />
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Financing Result</Typography>
                            <Typography 
                              variant="h5" 
                              fontWeight="medium"
                              color={(results.financing_cost || 0) > 0 ? "success.main" : "error.main"}
                            >
                              {(results.financing_cost || 0) > 0 ? "PROFIT" : "LOSS"}
                            </Typography>
                          </Grid>
                          <Grid item xs={6}>
                            <Typography variant="body2" color="text.secondary">Amount</Typography>
                            <Typography 
                              variant="h5" 
                              fontWeight="medium"
                              color={(results.financing_cost || 0) > 0 ? "success.main" : "error.main"}
                            >
                              {formatCurrency(Math.abs(results.financing_cost || 0))}
                            </Typography>
                          </Grid>
                        </Grid>
                      </Box>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12} md={6}>
                    <Box sx={{ height: 300 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={alpha('#000', 0.07)} />
                          <XAxis dataKey="name" />
                          <YAxis tickFormatter={(value) => `â‚º${value/1000000}M`} />
                          <Tooltip 
                            content={<CustomTooltip formatter={(value) => formatCurrency(value)} />}
                          />
                          <Legend />
                          <Bar 
                            dataKey="value" 
                            name="Amount" 
                            radius={[4, 4, 0, 0]}
                          >
                            {financingData.map((entry, index) => (
                              <Cell 
                                key={`cell-${index}`} 
                                fill={index === 0 
                                  ? theme.palette.info.main 
                                  : theme.palette.primary.main
                                } 
                              />
                            ))}
                          </Bar>
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12}>
                    <Box sx={{ 
                      p: 3,
                      bgcolor: 'background.paper', 
                      borderRadius: 2,
                      boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
                    }}>
                      <Typography variant="subtitle1" gutterBottom fontWeight="medium">
                        Financing Analysis
                      </Typography>
                      
                      <Typography variant="body1" paragraph>
                        The total principal paid to the bank is {formatCurrency(results.total_principal_paid)}, while the total loan principal is {formatCurrency(results.total_loan_principal)}.
                      </Typography>
                      
                      {(results.financing_cost || 0) > 0 ? (
                        <Typography variant="body1" paragraph>
                          This results in a <strong>financing profit of {formatCurrency(Math.abs(results.financing_cost || 0))}</strong>, representing a positive return on the securitization structure.
                        </Typography>
                      ) : (
                        <Typography variant="body1" paragraph>
                          This results in a <strong>financing loss of {formatCurrency(Math.abs(results.financing_cost || 0))}</strong>, indicating a cost of the securitization structure.
                        </Typography>
                      )}
                      
                      <Typography variant="body1">
                        The total principal of the ABS structure (Class A + Class B) is {formatCurrency((results.class_a_principal || 0) + (results.class_b_principal || 0))}, with total interest and coupon payments of {formatCurrency((results.class_a_interest || 0) + (results.class_b_coupon || 0))}.
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        )}
        
        {/* Tab 6: Detailed Table */}
        {tabValue === 5 && (
          <Box>
            <Paper 
              elevation={0}
              sx={{ 
                p: 3, 
                border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`,
                backgroundColor: 'background.paper',
                borderRadius: 2
              }}
            >
              <Typography variant="h6" gutterBottom fontWeight="medium">
                Detailed Tranche Results
              </Typography>
              
              {results.tranche_results && results.tranche_results.length > 0 ? (
                <TableContainer sx={{ 
                  maxHeight: 440,
                  mt: 2,
                  borderRadius: 1,
                  boxShadow: `0 1px 3px ${alpha('#000', 0.08)}`
                }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Tranche</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Days</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Maturity Date</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Principal</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Interest / Coupon</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Total Payment</TableCell>
                        <TableCell sx={{ fontWeight: 600, backgroundColor: alpha(theme.palette.primary.main, 0.04) }}>Buffer Ratio (%)</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {results.tranche_results.map((tranche, index) => (
                        <TableRow 
                          key={index}
                          sx={{ 
                            backgroundColor: tranche["Is Class A"] 
                              ? alpha(theme.palette.primary.main, 0.03)
                              : alpha(theme.palette.secondary.main, 0.03),
                            '&:hover': {
                              backgroundColor: tranche["Is Class A"] 
                                ? alpha(theme.palette.primary.main, 0.07)
                                : alpha(theme.palette.secondary.main, 0.07),
                            }
                          }}
                        >
                          <TableCell>
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <Box 
                                component="span" 
                                sx={{ 
                                  display: 'inline-block', 
                                  width: 10, 
                                  height: 10, 
                                  borderRadius: '50%', 
                                  bgcolor: tranche["Is Class A"] ? classAColor : classBColor,
                                  mr: 1 
                                }} 
                              />
                              {tranche["Tranche"]}
                            </Box>
                          </TableCell>
                          <TableCell>{tranche["Maturity Days"]}</TableCell>
                          <TableCell>{tranche["Maturity Date"]}</TableCell>
                          <TableCell>{formatCurrency(tranche["Principal"])}</TableCell>
                          <TableCell>
                            {formatCurrency(
                              tranche["Is Class A"] ? tranche["Interest"] : tranche["Coupon Payment"]
                            )}
                          </TableCell>
                          <TableCell>{formatCurrency(tranche["Total Payment"])}</TableCell>
                          <TableCell>
                            <Chip 
                              size="small" 
                              label={formatPercent(tranche["Buffer Cash Flow Ratio (%)"])}
                              sx={{ 
                                bgcolor: 
                                  tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                                    ? alpha(theme.palette.success.main, 0.1)
                                    : alpha(theme.palette.warning.main, 0.1),
                                color: 
                                  tranche["Buffer Cash Flow Ratio (%)"] >= minBufferTarget
                                    ? theme.palette.success.main
                                    : theme.palette.warning.main,
                                fontWeight: 500,
                                fontSize: '0.75rem'
                              }}
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              ) : (
                <Typography variant="body2" color="text.secondary" sx={{ py: 3, textAlign: "center" }}>
                  Detailed results are not available yet
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Box>
      
      {/* Save Dialog with Method Type Selection */}
      <Dialog open={saveDialogOpen} onClose={handleSaveDialogClose}>
        <DialogTitle>Save Calculation Result</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Enter a name for this result and select its type for comparison.
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            id="name"
            label="Result Name"
            type="text"
            fullWidth
            variant="outlined"
            value={resultName}
            onChange={(e) => setResultName(e.target.value)}
          />
          <FormControl fullWidth sx={{ mt: 2 }}>
            <FormLabel id="method-type-label">Result Type</FormLabel>
            <RadioGroup
              row
              value={selectedMethodType}
              onChange={(e) => setSelectedMethodType(e.target.value)}
            >
              <FormControlLabel value="manual" control={<Radio />} label="Manual Configuration" />
              <FormControlLabel value="standard" control={<Radio />} label="Standard Optimization" />
              <FormControlLabel value="genetic" control={<Radio />} label="Genetic Optimization" />
            </RadioGroup>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleSaveDialogClose}>Cancel</Button>
          <Button onClick={handleSaveConfirm} color="primary" disabled={!resultName.trim()}>
            Save
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={4000}
        onClose={handleSnackbarClose}
        message={snackbarMessage}
      />
    </Box>
  );
};

export default CalculationResults;

======================================================================

DOSYA: src\pages\ComparisonPage.js
==================================================
import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Tabs, 
  Tab, 
  Grid, 
  Card, 
  CardContent, 
  Table,
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Chip,
  Divider,
  alpha,
  useTheme,
  Button,
  IconButton,
  Tooltip,
  Alert,
  CircularProgress,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Checkbox,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  ThemeProvider,
  createTheme,
  CssBaseline
} from '@mui/material';
import { useData } from '../contexts/DataContext';
import CompareIcon from '@mui/icons-material/Compare';
import AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';
import BarChartIcon from '@mui/icons-material/BarChart';
import PieChartIcon from '@mui/icons-material/PieChart';
import TimelineIcon from '@mui/icons-material/Timeline';
import DownloadIcon from '@mui/icons-material/Download';
import ScienceIcon from '@mui/icons-material/Science';
import SettingsIcon from '@mui/icons-material/Settings';
import TuneIcon from '@mui/icons-material/Tune';
import DeleteIcon from '@mui/icons-material/Delete';
import RefreshIcon from '@mui/icons-material/Refresh';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import { 
  BarChart, Bar, PieChart, Pie, Cell, 
  XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer, 
  ReferenceLine
} from "recharts";

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#4dabf5',
    },
    secondary: {
      main: '#ce93d8',
    },
    success: {
      main: '#66bb6a',
    },
    error: {
      main: '#f44336',
    },
    warning: {
      main: '#ffa726',
    },
    info: {
      main: '#29b6f6',
    },
    background: {
      default: '#0a1929',
      paper: '#132f4c',
    },
    text: {
      primary: '#ffffff',
      secondary: 'rgba(255, 255, 255, 0.7)',
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    grid: 'rgba(255, 255, 255, 0.15)',
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 500,
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          '&:last-child': {
            paddingBottom: 16,
          },
        },
      },
    },
  },
});

// TabPanel component
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`tabpanel-${index}`}
      aria-labelledby={`tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ pt: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const ComparisonPage = () => {
  const theme = darkTheme;
  const { 
    savedResults,
    clearSavedResults,
    deleteSavedResult
  } = useData();
  
  // State variables
  const [tabValue, setTabValue] = useState(0);
  const [loading, setLoading] = useState(true);
  const [selectedResults, setSelectedResults] = useState([]);
  const [selectDialogOpen, setSelectDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [resultToDelete, setResultToDelete] = useState(null);
  const [comparisonData, setComparisonData] = useState({
    manualResults: null,
    geneticResults: null,
    standardResults: null
  });

  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Format currency values
  const formatCurrency = (value) => {
    if (value === undefined || value === null) return "â‚º0,00";
    
    try {
      return new Intl.NumberFormat("tr-TR", { 
        style: "currency", 
        currency: "TRY",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }).format(value);
    } catch (error) {
      console.error('Error formatting currency:', error);
      return `â‚º${value.toFixed(2).replace('.', ',')}`;
    }
  };
  
  // Format percentage values
  const formatPercent = (value) => {
    if (value === undefined || value === null) return "0,00%";
    return `${value.toFixed(2).replace('.', ',')}%`;
  };

  // Calculate percentage difference
  const calculateDifference = (current, reference) => {
    if (!current || !reference || reference === 0) return null;
    return ((current - reference) / reference) * 100;
  };

  // Format difference with color and sign
  const formatDifference = (diff) => {
    if (diff === null) return "-";
    const isPositive = diff > 0;
    return (
      <Typography 
        variant="body2" 
        sx={{ 
          color: isPositive ? 'success.main' : 'error.main',
          fontWeight: 'medium',
          display: 'flex',
          alignItems: 'center'
        }}
      >
        {isPositive ? '+' : ''}{diff.toFixed(2).replace('.', ',')}%
      </Typography>
    );
  };

  // Dialog handlers
  const handleOpenSelectDialog = () => setSelectDialogOpen(true);
  const handleCloseSelectDialog = () => setSelectDialogOpen(false);
  const handleDeleteDialogOpen = (resultId) => {
    setResultToDelete(resultId);
    setDeleteDialogOpen(true);
  };
  const handleDeleteDialogClose = () => {
    setDeleteDialogOpen(false);
    setResultToDelete(null);
  };

  // Handle result selection
  const handleSelectResult = (resultId) => {
    setSelectedResults(prev => {
      if (prev.includes(resultId)) {
        return prev.filter(id => id !== resultId);
      } else {
        // Limit to 3 selections
        if (prev.length >= 3) {
          return [...prev.slice(1), resultId];
        }
        return [...prev, resultId];
      }
    });
  };

  // Confirm result selection
  const handleConfirmSelection = () => {
    setSelectDialogOpen(false);
    processSelectedResults();
  };

  // Process the selected results
  const processSelectedResults = () => {
    if (selectedResults.length === 0) return;
    
    setLoading(true);
    
    // Filter the saved results based on selection
    const selectedResultsData = savedResults.filter(result => 
      selectedResults.includes(result.id)
    );
    
    // Create an empty result object structure
    const processedData = {
      manualResults: null,
      geneticResults: null,
      standardResults: null
    };
    
    // Process each selected result and assign to the appropriate category
    selectedResultsData.forEach(result => {      
      if (result.methodType === 'manual') {
        processedData.manualResults = {...result};
      } else if (result.methodType === 'genetic') {
        processedData.geneticResults = {...result};
      } else if (result.methodType === 'standard') {
        processedData.standardResults = {...result};
      }
    });
    
    // Update the comparison data state
    setComparisonData(processedData);
    setLoading(false);
  };

  // Handle delete confirmation
  const handleDeleteConfirm = () => {
    if (resultToDelete) {
      deleteSavedResult(resultToDelete);
      
      // Remove from selected results if present
      if (selectedResults.includes(resultToDelete)) {
        setSelectedResults(prev => prev.filter(id => id !== resultToDelete));
      }
      
      setDeleteDialogOpen(false);
      setResultToDelete(null);
    }
  };

  // Reset all comparison data
  const handleResetComparison = () => {
    clearSavedResults();
    setSelectedResults([]);
    setComparisonData({
      manualResults: null,
      geneticResults: null,
      standardResults: null
    });
  };
  
  // Initialize selected results when component mounts
  useEffect(() => {
    setLoading(true);
    
    if (savedResults && savedResults.length > 0) {
      // Auto-select one of each type (manual, genetic, grid) initially
      const initialSelectedIds = [];
      
      // Try to find one of each type
      const manualResult = savedResults.find(r => r.methodType === 'manual');
      const geneticResult = savedResults.find(r => r.methodType === 'genetic');
      const standardResult = savedResults.find(r => r.methodType === 'standard');
      
      // Add each result's ID to our initial selection if found
      if (manualResult) initialSelectedIds.push(manualResult.id);
      if (geneticResult) initialSelectedIds.push(geneticResult.id);
      if (standardResult) initialSelectedIds.push(standardResult.id);
      
      // If we haven't selected anything yet, just take the first result
      if (initialSelectedIds.length === 0 && savedResults.length > 0) {
        initialSelectedIds.push(savedResults[0].id);
      }
      
      // Process these initial selections
      const initialSelectedData = savedResults.filter(result => 
        initialSelectedIds.includes(result.id)
      );
      
      // Set the selected results state
      setSelectedResults(initialSelectedIds);
      
      // Explicitly create a new object for each result type to avoid reference issues
      const processedData = {
        manualResults: null,
        geneticResults: null,
        standardResults: null
      };
      
      // Assign each result type manually with spread operator to create a copy
      const manualResultData = initialSelectedData.find(r => r.methodType === 'manual');
      const geneticResultData = initialSelectedData.find(r => r.methodType === 'genetic');
      const standardResultData = initialSelectedData.find(r => r.methodType === 'standard');
      
      if (manualResultData) processedData.manualResults = {...manualResultData};
      if (geneticResultData) processedData.geneticResults = {...geneticResultData};
      if (standardResultData) processedData.standardResults = {...standardResultData};
      
      setComparisonData(processedData);
    }
    
    setLoading(false);
  }, [savedResults]);

  // Get all valid results as an array
  const getComparisonResults = () => {
    const results = [];
    
    if (comparisonData.manualResults) {
      results.push({
        id: comparisonData.manualResults.id,
        label: 'Manual Calculation',
        result: comparisonData.manualResults,
        isOptimized: false,
        method: 'manual',
        color: theme.palette.error.main,
        icon: <TuneIcon />
      });
    }
    
    if (comparisonData.geneticResults) {
      results.push({
        id: comparisonData.geneticResults.id,
        label: 'Genetic Algorithm',
        result: comparisonData.geneticResults,
        isOptimized: true,
        method: 'genetic',
        color: theme.palette.success.main,
        icon: <ScienceIcon />
      });
    }
    
    if (comparisonData.standardResults) {
      results.push({
        id: comparisonData.standardResults.id,
        label: 'Grid Algorithm',
        result: comparisonData.standardResults,
        isOptimized: true,
        method: 'standard',
        color: theme.palette.primary.main,
        icon: <SettingsIcon />
      });
    }
    
    return results;
  };

  // Check if we have at least two results to compare
  const hasEnoughData = () => {
    const results = getComparisonResults();
    return results.length >= 2;
  };

  // Add the header with buttons
  const ComparisonHeader = () => {
    return (
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <CompareIcon sx={{ fontSize: 28, color: theme.palette.primary.main, mr: 2 }} />
          <Typography variant="h4" component="h1" gutterBottom>
            Comparison Analysis
          </Typography>
        </Box>
        
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button
            variant="outlined"
            color="primary"
            onClick={handleOpenSelectDialog}
            sx={{ borderRadius: 2 }}
          >
            Select Results
          </Button>
          
          <Button
            variant="outlined"
            color="error"
            startIcon={<RefreshIcon />}
            onClick={handleResetComparison}
            sx={{ borderRadius: 2 }}
          >
            Clear All Results
          </Button>
          
          <Button
            variant="outlined"
            startIcon={<DownloadIcon />}
            size="medium"
            sx={{ borderRadius: 2 }}
          >
            Export Comparison
          </Button>
        </Box>
      </Box>
    );
  };

  // Custom tooltip for charts
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <Paper sx={{ p: 1.5, borderRadius: 1, boxShadow: 2, bgcolor: 'background.paper' }}>
          <Typography variant="body2" fontWeight="medium" sx={{ mb: 1 }}>{label}</Typography>
          {payload.map((entry, index) => (
            <Box key={`tooltip-${index}`} sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.5 }}>
              <Typography variant="body2" sx={{ mr: 2, color: entry.color }}>
                {entry.name}:
              </Typography>
              <Typography variant="body2" fontWeight="medium">
                {entry.name.includes('Buffer') || entry.name.includes('Rate')
                  ? `${entry.value.toFixed(2)}%` 
                  : formatCurrency(entry.value)}
              </Typography>
            </Box>
          ))}
        </Paper>
      );
    }
    return null;
  };

  // Identify which results we have
  const hasManual = comparisonData.manualResults !== null;
  const hasGenetic = comparisonData.geneticResults !== null;
  const hasStandard = comparisonData.standardResults !== null;
  
  // Get active comparison results
  const comparisonResults = getComparisonResults();
  
  // Prepare chart data
  const barChartData = comparisonResults.map(item => ({
    name: item.label,
    classA: item.result.class_a_total || 0,
    classB: item.result.class_b_total || 0,
    total: (item.result.class_a_total || 0) + (item.result.class_b_total || 0),
    color: item.color
  }));
  
  // Prepare principal interest breakdown data
  const breakdownData = comparisonResults.map(item => ({
    name: item.label,
    classAPrincipal: item.result.class_a_principal || 0,
    classAInterest: item.result.class_a_interest || 0,
    classBPrincipal: item.result.class_b_principal || 0,
    classBCoupon: item.result.class_b_coupon || 0,
    color: item.color
  }));
  
  // Prepare buffer data
  const bufferData = comparisonResults.map(item => ({
    name: item.label,
    minBuffer: item.result.min_buffer_actual || 0,
    color: item.color
  }));
  
  // Prepare financing data
  const financingData = comparisonResults.map(item => ({
    name: item.label,
    financingCost: Math.abs(item.result.financing_cost || 0),
    isProfit: (item.result.financing_cost || 0) > 0,
    principalPaid: item.result.total_principal_paid || 0,
    loanPrincipal: item.result.total_loan_principal || 0,
    color: item.color
  }));

  // Loading state
  if (loading) {
    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4, textAlign: 'center', py: 10 }}>
          <CircularProgress size={60} color="primary" />
          <Typography variant="h6" sx={{ mt: 3 }}>
            Loading comparison data...
          </Typography>
        </Container>
      </ThemeProvider>
    );
  }

  // No saved results state
  if (!savedResults || savedResults.length === 0) {
    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <ComparisonHeader />
          
          <Paper 
            elevation={2}
            sx={{ 
              p: 4, 
              textAlign: 'center',
              borderRadius: 2,
              backgroundColor: alpha(theme.palette.info.main, 0.05),
              border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
            }}
          >
            <CompareIcon sx={{ fontSize: 60, color: theme.palette.info.main, opacity: 0.8, mb: 2 }} />
            <Typography variant="h5" gutterBottom>
              No Saved Results
            </Typography>
            <Typography variant="body1" color="text.secondary">
              You need to save calculation results first before comparing them.
            </Typography>
            <Box sx={{ mt: 4 }}>
              <Grid container spacing={3} justifyContent="center">
                <Grid item xs={12} md={6}>
                  <Card variant="outlined" sx={{ height: '100%', bgcolor: alpha(theme.palette.background.paper, 0.6) }}>
                    <CardContent>
                      <Typography variant="subtitle1" gutterBottom color="primary" fontWeight="medium">
                        How to Compare Results
                      </Typography>
                      <ol>
                        <li>Go to the Calculation page and set your manual parameters</li>
                        <li>Calculate your manual configuration results and save them</li>
                        <li>Go to the Optimization page and run genetic algorithm optimization</li>
                        <li>Save the optimization results</li>
                        <li>Go to the Optimization page and run grid algorithm</li>
                        <li>Save the grid algorithm results</li>
                        <li>Return to this page to compare all saved results</li>
                      </ol>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </Box>
          </Paper>
        </Container>
      </ThemeProvider>
    );
  }

  // Not enough data to compare
  if (!hasEnoughData()) {
    return (
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <ComparisonHeader />
          
          <Paper 
            elevation={2}
            sx={{ 
              p: 4, 
              textAlign: 'center',
              borderRadius: 2,
              backgroundColor: alpha(theme.palette.warning.main, 0.05),
              border: `1px solid ${alpha(theme.palette.warning.main, 0.2)}`
            }}
          >
            <CompareIcon sx={{ fontSize: 60, color: theme.palette.warning.main, opacity: 0.8, mb: 2 }} />
            <Typography variant="h5" gutterBottom>
              Select at Least Two Results
            </Typography>
            <Typography variant="body1" color="text.secondary">
              You need to select at least two results to compare them.
            </Typography>
            <Button
              variant="contained"
              color="primary"
              onClick={handleOpenSelectDialog}
              sx={{ mt: 3, borderRadius: 2 }}
            >
              Select Results
            </Button>
            
            <Box sx={{ mt: 4 }}>
              <TableContainer component={Paper} elevation={1} sx={{ bgcolor: alpha(theme.palette.background.paper, 0.6) }}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Name</TableCell>
                      <TableCell>Type</TableCell>
                      <TableCell>Date Saved</TableCell>
                      <TableCell>Actions</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {savedResults.map((result) => (
                      <TableRow key={result.id}>
                        <TableCell>{result.savedName}</TableCell>
                        <TableCell>
                          <Chip 
                            label={result.methodType === 'manual' ? 'Manual' : 
                                   result.methodType === 'genetic' ? 'Genetic' : 'Grid Algorithm'} 
                            color={result.methodType === 'manual' ? 'error' :
                                   result.methodType === 'genetic' ? 'success' : 'primary'}
                            size="small"
                            sx={{ fontWeight: 500 }}
                          />
                        </TableCell>
                        <TableCell>
                          {new Date(result.timestamp).toLocaleString()}
                        </TableCell>
                        <TableCell>
                          <IconButton 
                            color="error" 
                            size="small"
                            onClick={() => handleDeleteDialogOpen(result.id)}
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </Box>
          </Paper>
        </Container>
      </ThemeProvider>
    );
  }

  // Main comparison view with enough data
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        <ComparisonHeader />
        
        {/* Summary Cards */}
        <Paper 
          elevation={3}
          sx={{ 
            p: 3, 
            mb: 4, 
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
            backgroundColor: alpha(theme.palette.background.paper, 0.8)
          }}
        >
          <Typography variant="h5" color="primary.main" gutterBottom fontWeight="medium" sx={{ mb: 3 }}>
            Comparison Summary
          </Typography>
          
          <Grid container spacing={3}>
            {comparisonResults.map((item, index) => (
              <Grid item xs={12} md={4} key={index}>
                <Card elevation={2} sx={{ 
                  height: '100%', 
                  backgroundColor: alpha(item.color, 0.1), 
                  border: `1px solid ${alpha(item.color, 0.2)}`,
                  borderRadius: 2
                }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <Box sx={{ mr: 1, color: item.color }}>
                        {item.icon}
                      </Box>
                      <Typography variant="h6" fontWeight="medium" sx={{ color: item.color }}>
                        {item.label}
                      </Typography>
                    </Box>
                    
                    <Divider sx={{ mb: 2, opacity: 0.2 }} />
                    
                    <Box>
                      <Typography variant="body2" color="text.secondary">Total Structure Size</Typography>
                      <Typography variant="h6" sx={{ my: 0.5 }}>
                        {formatCurrency((item.result.class_a_total || 0) + (item.result.class_b_total || 0))}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        Class A: {formatCurrency(item.result.class_a_total || 0)}, 
                        Class B: {formatCurrency(item.result.class_b_total || 0)}
                      </Typography>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="body2" color="text.secondary">Minimum Buffer</Typography>
                      <Typography variant="h6" color={
                        (item.result.min_buffer_actual || 0) >= 5.0 ? 'success.main' : 'error.main'
                      } sx={{ my: 0.5 }}>
                        {formatPercent(item.result.min_buffer_actual || 0)}
                      </Typography>
                    </Box>
                    
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="body2" color="text.secondary">Financing Result</Typography>
                      <Typography variant="h6" color={
                        (item.result.financing_cost || 0) > 0 ? 'success.main' : 'error.main'
                      } sx={{ my: 0.5 }}>
                        {(item.result.financing_cost || 0) > 0 ? "Profit: " : "Loss: "}
                        {formatCurrency(Math.abs(item.result.financing_cost || 0))}
                      </Typography>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Paper>
        
        {/* Tabs for different comparison views */}
        <Box sx={{ 
          mb: 3, 
          borderRadius: 2, 
          overflow: 'hidden', 
          backgroundColor: alpha(theme.palette.background.paper, 0.4)
        }}>
          <Tabs 
            value={tabValue} 
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{
              '& .MuiTab-root': {
                minWidth: 'auto',
                px: 3,
                py: 2
              },
              '& .MuiTabs-indicator': {
                height: 3,
                borderTopLeftRadius: 3,
                borderTopRightRadius: 3
              }
            }}
          >
            <Tab icon={<PieChartIcon />} label="Portfolio Overview" iconPosition="start" />
            <Tab icon={<BarChartIcon />} label="Cashflow Distribution" iconPosition="start" />
            <Tab icon={<AccountBalanceWalletIcon />} label="Financing Comparison" iconPosition="start" />
            <Tab icon={<TimelineIcon />} label="Tranche Breakdown" iconPosition="start" />
          </Tabs>
        </Box>
        
        {/* Tab 1: Portfolio Overview */}
        <TabPanel value={tabValue} index={0}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" fontWeight="medium">
                    Total Structure Comparison
                  </Typography>
                  <Tooltip title="Shows the distribution of Class A and Class B in each calculation approach">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Box sx={{ height: 400, mt: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={barChartData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                      <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                      <YAxis 
                        tickFormatter={(value) => `â‚º${value/1000000}M`} 
                        tick={{ fill: theme.palette.text.secondary }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Legend 
                        wrapperStyle={{ paddingTop: 20 }}
                        formatter={(value) => (
                          <span style={{ color: theme.palette.text.primary }}>{value}</span>
                        )}
                      />
                      <Bar 
                        dataKey="classA" 
                        name="Class A" 
                        stackId="a"
                      >
                        {barChartData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={alpha(entry.color, 0.8)} />
                        ))}
                      </Bar>
                      <Bar 
                        dataKey="classB" 
                        name="Class B" 
                        stackId="a"
                        opacity={0.5}
                      >
                        {barChartData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
                
                <Divider sx={{ my: 4 }} />
                
                <Typography variant="h6" gutterBottom fontWeight="medium">
                  Class Distribution
                </Typography>
                
                <Grid container spacing={4}>
                  {comparisonResults.map((item, index) => (
                    <Grid item xs={12} md={4} key={index}>
                      <Box sx={{ textAlign: 'center' }}>
                        <Typography variant="subtitle1" align="center" gutterBottom sx={{ color: item.color, fontWeight: 'medium' }}>
                          {item.label}
                        </Typography>
                        <Box sx={{ height: 280 }}>
                          <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                              <Pie
                                data={[
                                  { name: 'Class A', value: item.result.class_a_total || 0 },
                                  { name: 'Class B', value: item.result.class_b_total || 0 }
                                ]}
                                cx="50%"
                                cy="50%"
                                outerRadius={100}
                                dataKey="value"
                                label={({ name, percent }) => `${name} (${(percent * 100).toFixed(1)}%)`}
                                labelLine={{ stroke: theme.palette.text.secondary }}
                              >
                                <Cell fill={alpha(item.color, 0.8)} />
                                <Cell fill={alpha(item.color, 0.4)} />
                              </Pie>
                              <RechartsTooltip formatter={(value) => formatCurrency(value)} />
                            </PieChart>
                          </ResponsiveContainer>
                        </Box>
                        <Box sx={{ mt: 1 }}>
                          <Typography variant="body2" color="text.secondary">
                            Total: {formatCurrency((item.result.class_a_total || 0) + (item.result.class_b_total || 0))}
                          </Typography>
                        </Box>
                      </Box>
                    </Grid>
                  ))}
                </Grid>
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Tab 2: Cashflow Distribution */}
        <TabPanel value={tabValue} index={1}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.text.primary, 0.1)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" fontWeight="medium">
                    Principal and Interest Distribution
                  </Typography>
                  <Tooltip title="Detailed breakdown of principal and interest components for each class">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Box sx={{ height: 400, mt: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={breakdownData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                      <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                      <YAxis 
                        tickFormatter={(value) => `â‚º${value/1000000}M`} 
                        tick={{ fill: theme.palette.text.secondary }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Legend 
                        wrapperStyle={{ paddingTop: 20 }}
                        formatter={(value) => (
                          <span style={{ color: theme.palette.text.primary }}>{value}</span>
                        )}
                      />
                      <Bar 
                        dataKey="classAPrincipal" 
                        name="Class A Principal" 
                        fill={alpha(theme.palette.primary.main, 0.8)}
                      />
                      <Bar 
                        dataKey="classAInterest" 
                        name="Class A Interest" 
                        fill={alpha(theme.palette.primary.main, 0.5)}
                      />
                      <Bar 
                        dataKey="classBPrincipal" 
                        name="Class B Principal" 
                        fill={alpha(theme.palette.secondary.main, 0.8)}
                      />
                      <Bar 
                        dataKey="classBCoupon" 
                        name="Class B Coupon" 
                        fill={alpha(theme.palette.secondary.main, 0.5)}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
                
                <Divider sx={{ my: 4 }} />
                
                <TableContainer sx={{ maxHeight: 500 }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                        <TableCell>Metric</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell 
                            key={index} 
                            align="right"
                            sx={{
                              color: item.color,
                              fontWeight: 'medium'
                            }}
                          >
                            {item.label}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            Manual vs. Genetic
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            Manual vs. Grid Algorithm
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            Genetic vs. Grid Algorithm
                          </TableCell>
                        )}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow hover>
                        <TableCell>Class A Principal</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_a_principal || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_a_principal,
                              comparisonData.manualResults.class_a_principal
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_principal,
                              comparisonData.manualResults.class_a_principal
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_principal,
                              comparisonData.geneticResults.class_a_principal
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Class A Interest</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_a_interest || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_a_interest,
                              comparisonData.manualResults.class_a_interest
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_interest,
                              comparisonData.manualResults.class_a_interest
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_a_interest,
                              comparisonData.geneticResults.class_a_interest
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Class B Principal</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_b_principal || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_b_principal,
                              comparisonData.manualResults.class_b_principal
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_principal,
                              comparisonData.manualResults.class_b_principal
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_principal,
                              comparisonData.geneticResults.class_b_principal
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Class B Coupon</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.class_b_coupon || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.class_b_coupon,
                              comparisonData.manualResults.class_b_coupon
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_coupon,
                              comparisonData.manualResults.class_b_coupon
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.class_b_coupon,
                              comparisonData.geneticResults.class_b_coupon
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow sx={{ "& td": { fontWeight: 'medium', backgroundColor: alpha(theme.palette.primary.main, 0.1) } }}>
                        <TableCell>Total</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(
                              (item.result.class_a_total || 0) + (item.result.class_b_total || 0)
                            )}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              (comparisonData.geneticResults.class_a_total || 0) + (comparisonData.geneticResults.class_b_total || 0),
                              (comparisonData.manualResults.class_a_total || 0) + (comparisonData.manualResults.class_b_total || 0)
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              (comparisonData.standardResults.class_a_total || 0) + (comparisonData.standardResults.class_b_total || 0),
                              (comparisonData.manualResults.class_a_total || 0) + (comparisonData.manualResults.class_b_total || 0)
                            ))}
                          </TableCell>
                        )}
                        {hasGenetic && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              (comparisonData.standardResults.class_a_total || 0) + (comparisonData.standardResults.class_b_total || 0),
                              (comparisonData.geneticResults.class_a_total || 0) + (comparisonData.geneticResults.class_b_total || 0)
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Tab 3: Financing Comparison */}
        <TabPanel value={tabValue} index={2}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" color="info.main" fontWeight="medium">
                    Financing Comparison
                  </Typography>
                  <Tooltip title="Compares principal and interest payments alongside financing outcomes">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Grid container spacing={4}>
                  <Grid item xs={12} md={7}>
                    <Box sx={{ height: 350, pr: 2 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                          layout="vertical"
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                          <XAxis 
                            type="number" 
                            tickFormatter={(value) => `â‚º${value/1000000}M`} 
                            tick={{ fill: theme.palette.text.secondary }}
                          />
                          <YAxis 
                            type="category" 
                            dataKey="name" 
                            tick={{ fill: theme.palette.text.secondary }}
                          />
                          <RechartsTooltip content={<CustomTooltip />} />
                          <Legend 
                            wrapperStyle={{ paddingTop: 20 }}
                            formatter={(value) => (
                              <span style={{ color: theme.palette.text.primary }}>{value}</span>
                            )}
                          />
                          <Bar 
                            dataKey="principalPaid" 
                            name="Total Principal Paid" 
                            fill={theme.palette.primary.main} 
                            radius={[0, 4, 4, 0]}
                          />
                          <Bar 
                            dataKey="loanPrincipal" 
                            name="Total Loan Principal" 
                            fill={theme.palette.info.main}
                            radius={[0, 4, 4, 0]}
                          />
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                  
                  <Grid item xs={12} md={5}>
                    <Box sx={{ height: 350 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={financingData}
                          margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                          <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                          <YAxis 
                            tickFormatter={(value) => `â‚º${value/1000000}M`} 
                            tick={{ fill: theme.palette.text.secondary }}
                          />
                          <RechartsTooltip content={<CustomTooltip />} />
                          <Legend 
                            wrapperStyle={{ paddingTop: 20 }}
                            formatter={(value) => (
                              <span style={{ color: theme.palette.text.primary }}>{value}</span>
                            )}
                          />
                          <Bar 
                            dataKey="financingCost" 
                            name="Financing Result" 
                            radius={[4, 4, 0, 0]}
                          >
                            {financingData.map((entry, index) => (
                              <Cell 
                                key={`cell-${index}`} 
                                fill={entry.isProfit ? theme.palette.success.main : theme.palette.error.main}
                              />
                            ))}
                          </Bar>
                        </BarChart>
                      </ResponsiveContainer>
                    </Box>
                  </Grid>
                </Grid>
                
                <Divider sx={{ my: 4 }} />
                
                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>Metric</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell 
                            key={index} 
                            align="right"
                            sx={{
                              color: item.color,
                              fontWeight: 'medium'
                            }}
                          >
                            {item.label}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            Genetic Gain
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            Grid Algorithm Gain
                          </TableCell>
                        )}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow hover>
                        <TableCell>Total Principal Paid</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.total_principal_paid || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.total_principal_paid,
                              comparisonData.manualResults.total_principal_paid
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.total_principal_paid,
                              comparisonData.manualResults.total_principal_paid
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow hover>
                        <TableCell>Total Loan Principal</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell key={index} align="right">
                            {formatCurrency(item.result.total_loan_principal || 0)}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.geneticResults.total_loan_principal,
                              comparisonData.manualResults.total_loan_principal
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right">
                            {formatDifference(calculateDifference(
                              comparisonData.standardResults.total_loan_principal,
                              comparisonData.manualResults.total_loan_principal
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                      <TableRow sx={{ 
                        "& td": { 
                          fontWeight: 'medium', 
                          backgroundColor: alpha(theme.palette.info.main, 0.1) 
                        } 
                      }}>
                        <TableCell>Financing Result</TableCell>
                        {comparisonResults.map((item, index) => (
                          <TableCell 
                            key={index} 
                            align="right"
                            sx={{ 
                              color: (item.result.financing_cost || 0) > 0 
                                ? 'success.main' 
                                : 'error.main' 
                            }}
                          >
                            {(item.result.financing_cost || 0) > 0 ? "Profit: " : "Loss: "}
                            {formatCurrency(Math.abs(item.result.financing_cost || 0))}
                          </TableCell>
                        ))}
                        {hasManual && hasGenetic && (
                          <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                            {formatCurrency(Math.abs(
                              (comparisonData.geneticResults.financing_cost || 0) - 
                              (comparisonData.manualResults.financing_cost || 0)
                            ))}
                          </TableCell>
                        )}
                        {hasManual && hasStandard && (
                          <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                            {formatCurrency(Math.abs(
                              (comparisonData.standardResults.financing_cost || 0) - 
                              (comparisonData.manualResults.financing_cost || 0)
                            ))}
                          </TableCell>
                        )}
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Tab 4: Tranche Breakdown */}
        <TabPanel value={tabValue} index={3}>
          <Grid container spacing={4}>
            <Grid item xs={12}>
              <Paper 
                elevation={3}
                sx={{ 
                  p: 3, 
                  mb: 3, 
                  borderRadius: 2,
                  backgroundColor: alpha(theme.palette.background.paper, 0.8),
                  border: `1px solid ${alpha(theme.palette.success.main, 0.2)}`
                }}
              >
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Typography variant="h6" color="success.main" fontWeight="medium">
                    Buffer Analysis
                  </Typography>
                  <Tooltip title="Analyzes the minimum buffer values across tranches">
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" color="info" />
                    </IconButton>
                  </Tooltip>
                </Box>
                
                <Box sx={{ mb: 3 }}>
                  <Alert 
                    severity="info" 
                    sx={{ mb: 2, bgcolor: alpha(theme.palette.info.main, 0.1) }}
                  >
                    Minimum buffer requirement is 5.0%. Values below this threshold may cause cash flow issues.
                  </Alert>
                </Box>
                
                <Box sx={{ height: 400, mt: 2 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={bufferData}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                      <XAxis dataKey="name" tick={{ fill: theme.palette.text.secondary }} />
                      <YAxis 
                        tickFormatter={(value) => `${value}%`} 
                        domain={[0, 'dataMax + 2']} 
                        tick={{ fill: theme.palette.text.secondary }}
                      />
                      <RechartsTooltip formatter={(value) => `${value.toFixed(2)}%`} />
                      <Legend 
                        wrapperStyle={{ paddingTop: 20 }}
                        formatter={(value) => (
                          <span style={{ color: theme.palette.text.primary }}>{value}</span>
                        )}
                      />
                      <ReferenceLine 
                        y={5} 
                        label={{ value: "Min Requirement", fill: theme.palette.text.secondary }}
                        stroke={theme.palette.error.main} 
                        strokeDasharray="3 3" 
                      />
                      <Bar dataKey="minBuffer" name="Minimum Buffer" radius={[4, 4, 0, 0]}>
                        {bufferData.map((entry, index) => (
                          <Cell 
                            key={`cell-${index}`} 
                            fill={entry.minBuffer >= 5.0 ? theme.palette.success.main : theme.palette.error.main} 
                          />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                </Box>
                
                <Divider sx={{ my: 4 }} />
                
                <Typography variant="h6" gutterBottom fontWeight="medium">
                  Tranche-Level Buffer Details
                </Typography>
                
                {comparisonResults.map((resultItem, resultIndex) => (
                  <Box key={resultIndex} sx={{ mb: 4 }}>
                    <Typography variant="subtitle1" gutterBottom sx={{ 
                      display: 'flex',
                      alignItems: 'center',
                      color: resultItem.color,
                      fontWeight: 'medium',
                      mt: 3
                    }}>
                      <Box 
                        sx={{ 
                          width: 12, 
                          height: 12, 
                          borderRadius: '50%', 
                          backgroundColor: resultItem.color,
                          mr: 1 
                        }} 
                      />
                      {resultItem.label}
                    </Typography>
                    
                    {resultItem.result.tranche_results ? (
                      <TableContainer sx={{ mb: 2 }}>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>Tranche</TableCell>
                              <TableCell align="right">Maturity (Days)</TableCell>
                              <TableCell align="right">Total Payment</TableCell>
                              <TableCell align="right">Buffer Ratio (%)</TableCell>
                              <TableCell align="right">Status</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {resultItem.result.tranche_results
                              .filter(tranche => tranche["Is Class A"])
                              .map((tranche, index) => (
                                <TableRow key={index} hover>
                                  <TableCell>{tranche["Tranche"]}</TableCell>
                                  <TableCell align="right">{tranche["Maturity Days"]}</TableCell>
                                  <TableCell align="right">{formatCurrency(tranche["Total Payment"])}</TableCell>
                                  <TableCell align="right">{formatPercent(tranche["Buffer Cash Flow Ratio (%)"])}</TableCell>
                                  <TableCell align="right">
                                    <Chip 
                                      size="small" 
                                      label={tranche["Buffer Cash Flow Ratio (%)"] >= 5.0 ? "Valid" : "Low"} 
                                      color={tranche["Buffer Cash Flow Ratio (%)"] >= 5.0 ? "success" : "error"} 
                                      sx={{ fontWeight: 500 }}
                                    />
                                  </TableCell>
                                </TableRow>
                              ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    ) : (
                      <Typography variant="body2" color="text.secondary">
                        Detailed tranche data not available for this result.
                      </Typography>
                    )}
                  </Box>
                ))}
              </Paper>
            </Grid>
          </Grid>
        </TabPanel>
        
        {/* Select Results Dialog */}
        <Dialog 
          open={selectDialogOpen} 
          onClose={handleCloseSelectDialog} 
          maxWidth="sm" 
          fullWidth
          PaperProps={{
            sx: {
              bgcolor: 'background.paper',
              borderRadius: 2
            }
          }}
        >
          <DialogTitle>Select Results to Compare</DialogTitle>
          <DialogContent>
            <DialogContentText>
              Select up to 3 results to compare. Choose results of different types (Manual, Genetic, and Grid Algorithm) for the best comparison.
            </DialogContentText>
            <List sx={{ mt: 2 }}>
              {savedResults.map((result) => (
                <ListItem 
                  key={result.id} 
                  dense
                  onClick={() => handleSelectResult(result.id)}
                  sx={{ 
                    cursor: 'pointer',
                    p: 1,
                    mb: 1,
                    '&:hover': {
                      backgroundColor: alpha(theme.palette.primary.main, 0.05)
                    },
                    backgroundColor: selectedResults.includes(result.id) 
                    ? alpha(theme.palette.primary.main, 0.1) 
                    : 'transparent',
                  borderRadius: 1
                }}
              >
                <Checkbox
                  edge="start"
                  checked={selectedResults.includes(result.id)}
                  tabIndex={-1}
                  disableRipple
                  color={
                    result.methodType === 'manual' ? 'error' :
                    result.methodType === 'genetic' ? 'success' : 'primary'
                  }
                />
                <ListItemText 
                  primary={
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Typography variant="body1">{result.savedName}</Typography>
                      <Chip 
                        label={
                          result.methodType === 'manual' ? 'Manual' : 
                          result.methodType === 'genetic' ? 'Genetic' : 'Grid Algorithm'
                        }
                        size="small"
                        color={
                          result.methodType === 'manual' ? 'error' :
                          result.methodType === 'genetic' ? 'success' : 'primary'
                        }
                        sx={{ ml: 2, fontWeight: 500 }}
                      />
                    </Box>
                  }
                  secondary={new Date(result.timestamp).toLocaleString()}
                />
                <ListItemSecondaryAction>
                  <IconButton 
                    edge="end" 
                    aria-label="delete"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteDialogOpen(result.id);
                    }}
                  >
                    <DeleteIcon />
                  </IconButton>
                </ListItemSecondaryAction>
              </ListItem>
            ))}
          </List>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 3 }}>
          <Button onClick={handleCloseSelectDialog} variant="outlined" sx={{ borderRadius: 2 }}>Cancel</Button>
          <Button 
            onClick={handleConfirmSelection} 
            color="primary"
            variant="contained"
            disabled={selectedResults.length === 0}
            sx={{ borderRadius: 2 }}
          >
            Compare Selected ({selectedResults.length})
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Delete Confirmation Dialog */}
      <Dialog
        open={deleteDialogOpen}
        onClose={handleDeleteDialogClose}
        PaperProps={{
          sx: {
            bgcolor: 'background.paper',
            borderRadius: 2
          }
        }}
      >
        <DialogTitle>Delete Saved Result</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this saved result? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 3 }}>
          <Button onClick={handleDeleteDialogClose} variant="outlined" sx={{ borderRadius: 2 }}>Cancel</Button>
          <Button 
            onClick={handleDeleteConfirm} 
            color="error" 
            variant="contained"
            sx={{ borderRadius: 2 }}
          >
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  </ThemeProvider>
);
};

export default ComparisonPage;

======================================================================

DOSYA: src\pages\HomePage.js
==================================================
// frontend/src/pages/HomePage.js
import React from 'react';
import { Link } from 'react-router-dom';
import { 
  Container, 
  Typography, 
  Box, 
  Button, 
  Grid, 
  Paper, 
  alpha,
  Divider,
  useTheme
} from '@mui/material';
import CalculateIcon from '@mui/icons-material/Calculate';
import OptimizeIcon from '@mui/icons-material/Speed';
import UploadFileIcon from '@mui/icons-material/UploadFile';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import BusinessIcon from '@mui/icons-material/Business';
import CompareIcon from '@mui/icons-material/Compare';
import { useData } from '../contexts/DataContext';
import FileUploader from '../components/FileUploader';

const HomePage = () => {
  const { cashFlowData } = useData();
  const theme = useTheme();

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Box
        sx={{
          py: 7,
          px: { xs: 3, md: 6 },
          mb: 5,
          textAlign: 'center',
          background: `linear-gradient(135deg, ${alpha(theme.palette.primary.dark, 0.9)}, ${alpha(theme.palette.secondary.dark, 0.8)})`,
          borderRadius: 3,
          color: 'white',
          boxShadow: `0 8px 24px ${alpha(theme.palette.primary.dark, 0.4)}`,
        }}
      >
        <BusinessIcon sx={{ fontSize: 56, mb: 2, color: alpha('#fff', 0.9) }} />
        <Typography variant="h3" component="h1" gutterBottom fontWeight="500">
          Advanced ABS Design
        </Typography>
        <Typography variant="h6" sx={{ mb: 3, fontWeight: 400, opacity: 0.9 }}>
          Professional cash flow analysis and optimization for asset-backed securities
        </Typography>
        <Divider sx={{ 
          width: '100px', 
          mx: 'auto', 
          mb: 3, 
          borderColor: 'rgba(255,255,255,0.25)' 
        }} />
        <Typography variant="body1" sx={{ maxWidth: '800px', mx: 'auto', opacity: 0.9 }}>
          Upload your Excel data file to begin analyzing your cash flows, 
          calculate securitization structures, and optimize your tranches for maximum returns.
        </Typography>
      </Box>

      <Grid container spacing={4}>
        <Grid item xs={12}>
          <Paper
            elevation={2}
            sx={{
              p: 4,
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              borderRadius: 2,
              border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              background: `linear-gradient(to right, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
              boxShadow: `0 4px 16px ${alpha(theme.palette.common.black, 0.3)}`,
            }}
          >
            <Typography variant="h5" gutterBottom fontWeight="medium" sx={{ mb: 3 }}>
              Upload Your Cash Flow Data
            </Typography>
            <FileUploader />
          </Paper>
        </Grid>

        {cashFlowData && (
          <>
            <Grid item xs={12} md={6}>
              <Paper
                elevation={2}
                sx={{
                  p: 4,
                  display: 'flex',
                  flexDirection: 'column',
                  height: '100%',
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
                  transition: 'all 0.3s',
                  background: `linear-gradient(145deg, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: `0 8px 20px ${alpha(theme.palette.primary.main, 0.25)}`,
                    borderColor: alpha(theme.palette.primary.main, 0.3),
                  },
                }}
              >
                <Box sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  mb: 2.5
                }}>
                  <Box sx={{ 
                    background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${alpha(theme.palette.primary.light, 0.8)})`,
                    borderRadius: '50%', 
                    p: 1.5, 
                    mr: 2,
                    boxShadow: `0 4px 8px ${alpha(theme.palette.primary.main, 0.4)}`
                  }}>
                    <CalculateIcon sx={{ fontSize: 30, color: theme.palette.common.white }} />
                  </Box>
                  <Typography variant="h5" fontWeight="medium" color="primary.main">
                    Calculate Results
                  </Typography>
                </Box>
                
                <Typography paragraph sx={{ color: 'text.secondary', mb: 3 }}>
                  Configure tranche parameters and calculate detailed results for your
                  ABS structure. Analyze cash flows, interest rates, and buffer ratios to
                  ensure your securitization meets all requirements.
                </Typography>
                
                <Box sx={{ mt: 'auto', textAlign: 'center' }}>
                  <Button
                    variant="contained"
                    color="primary"
                    component={Link}
                    to="/calculation"
                    size="large"
                    endIcon={<ArrowForwardIcon />}
                    sx={{ 
                      mt: 2, 
                      py: 1.2, 
                      px: 3.5,
                      fontWeight: 500,
                      borderRadius: 2,
                      boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                      background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,
                      '&:hover': {
                        boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                        background: `linear-gradient(45deg, ${theme.palette.primary.light}, ${theme.palette.primary.main})`
                      }
                    }}
                  >
                    Start Calculation
                  </Button>
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12} md={6}>
              <Paper
                elevation={2}
                sx={{
                  p: 4,
                  display: 'flex',
                  flexDirection: 'column',
                  height: '100%',
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,
                  transition: 'all 0.3s',
                  background: `linear-gradient(145deg, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: `0 8px 20px ${alpha(theme.palette.secondary.main, 0.25)}`,
                    borderColor: alpha(theme.palette.secondary.main, 0.3),
                  },
                }}
              >
                <Box sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  mb: 2.5
                }}>
                  <Box sx={{ 
                    background: `linear-gradient(45deg, ${theme.palette.secondary.main}, ${alpha(theme.palette.secondary.light, 0.8)})`,
                    borderRadius: '50%', 
                    p: 1.5, 
                    mr: 2,
                    boxShadow: `0 4px 8px ${alpha(theme.palette.secondary.main, 0.4)}`
                  }}>
                    <OptimizeIcon sx={{ fontSize: 30, color: theme.palette.common.white }} />
                  </Box>
                  <Typography variant="h5" fontWeight="medium" color="secondary.main">
                    Optimize Structure
                  </Typography>
                </Box>
                
                <Typography paragraph sx={{ color: 'text.secondary', mb: 3 }}>
                  Find the optimal ABS structure to maximize total principal
                  while maintaining minimum buffer requirements. Our advanced optimization
                  algorithms explore multiple strategies to find the best tranche configuration.
                </Typography>
                
                <Box sx={{ mt: 'auto', textAlign: 'center' }}>
                  <Button
                    variant="contained"
                    color="secondary"
                    component={Link}
                    to="/optimization"
                    size="large"
                    endIcon={<ArrowForwardIcon />}
                    sx={{ 
                      mt: 2, 
                      py: 1.2, 
                      px: 3.5,
                      fontWeight: 500,
                      borderRadius: 2,
                      boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                      background: `linear-gradient(45deg, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,
                      '&:hover': {
                        boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                        background: `linear-gradient(45deg, ${theme.palette.secondary.light}, ${theme.palette.secondary.main})`
                      }
                    }}
                  >
                    Run Optimization
                  </Button>
                </Box>
              </Paper>
            </Grid>
            
            {/* Add Compare section */}
            <Grid item xs={12}>
              <Paper
                elevation={2}
                sx={{
                  p: 4,
                  display: 'flex',
                  flexDirection: 'column',
                  borderRadius: 2,
                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,
                  background: `linear-gradient(145deg, ${alpha(theme.palette.background.paper, 0.9)}, ${theme.palette.background.paper})`,
                  transition: 'all 0.3s',
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: `0 8px 20px ${alpha(theme.palette.info.main, 0.25)}`,
                    borderColor: alpha(theme.palette.info.main, 0.3),
                  },
                }}
              >
                <Grid container spacing={3} alignItems="center">
                  <Grid item xs={12} md={8}>
                    <Box sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      mb: 2
                    }}>
                      <Box sx={{ 
                        background: `linear-gradient(45deg, ${theme.palette.info.main}, ${alpha(theme.palette.info.light, 0.8)})`,
                        borderRadius: '50%', 
                        p: 1.5, 
                        mr: 2,
                        boxShadow: `0 4px 8px ${alpha(theme.palette.info.main, 0.4)}`
                      }}>
                        <CompareIcon sx={{ fontSize: 30, color: theme.palette.common.white }} />
                      </Box>
                      <Typography variant="h5" fontWeight="medium" color="info.main">
                        Compare Results
                      </Typography>
                    </Box>
                    
                    <Typography paragraph sx={{ color: 'text.secondary' }}>
                      Compare different optimization strategies and manual configurations side by side. 
                      Analyze the differences in principal distribution, interest rates, and buffer ratios 
                      to make informed decisions about your securitization structure.
                    </Typography>
                  </Grid>
                  
                  <Grid item xs={12} md={4} sx={{ textAlign: 'center' }}>
                    <Button
                      variant="contained"
                      color="info"
                      component={Link}
                      to="/comparison"
                      size="large"
                      endIcon={<ArrowForwardIcon />}
                      sx={{ 
                        py: 1.2, 
                        px: 3.5,
                        fontWeight: 500,
                        borderRadius: 2,
                        boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                        background: `linear-gradient(45deg, ${theme.palette.info.main}, ${theme.palette.info.dark})`,
                        '&:hover': {
                          boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                          background: `linear-gradient(45deg, ${theme.palette.info.light}, ${theme.palette.info.main})`
                        }
                      }}
                    >
                      View Comparisons
                    </Button>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>
          </>
        )}
      </Grid>
    </Container>
  );
};

export default HomePage;

======================================================================

DOSYA: src\pages\OptimizationPage.js
==================================================
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Paper,
  Button,
  Alert,
  CircularProgress,
  Divider,
  alpha,
  Chip,
  Stepper,
  Step,
  StepLabel,
  useTheme,
} from '@mui/material';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import SettingsIcon from '@mui/icons-material/Settings';
import SpeedIcon from '@mui/icons-material/Speed';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import RestartAltIcon from '@mui/icons-material/RestartAlt';

import OptimizationSettingsForm from '../components/optimization/OptimizationSettingsForm';
import OptimizationResults from '../components/optimization/OptimizationResults';
import OptimizationProgress from '../components/optimization/OptimizationProgress';
import { useData } from '../contexts/DataContext';
import { optimizeStructure } from '../services/apiService';

const OptimizationPage = () => {
  const theme = useTheme();
  const {
    cashFlowData,
    optimizationResults,
    setOptimizationResults,
    isLoading,
    setIsLoading,
    error,
    setError,
    optimizationSettings,
    setOptimizationSettings,
    generalSettings,
  } = useData();

  const [isOptimizing, setIsOptimizing] = useState(false);
  const [activeStep, setActiveStep] = useState(0);

  const methodName = (m) =>
    ({ classic: 'Standard Optimization', genetic: 'Evolutionary Algorithm' }[m] ||
    m);

  /* --------------------- FormÂ change -------------------- */
  const handleFormChange = (vals) => setOptimizationSettings(vals);

  /* --------------------- Optimize ----------------------- */
  const handleOptimize = async () => {
    if (!cashFlowData) return;

    try {
      setIsLoading(true);
      setError(null);
      setIsOptimizing(true);
      setOptimizationResults(null);
      setActiveStep(1);

      const method = optimizationSettings.optimization_method;
      console.log(`Starting ${method} optimizationâ€¦`);

      const body = {
        optimization_settings: optimizationSettings,
        general_settings: {
          start_date: generalSettings.start_date.toISOString().split('T')[0],
          operational_expenses: generalSettings.operational_expenses,
          min_buffer: generalSettings.min_buffer,
        },
      };

      if (method === 'classic' && optimizationSettings.selected_strategies) {
        console.log(
          `Selected strategies: ${optimizationSettings.selected_strategies.join(', ')}`,
        );
      }

      const res = await optimizeStructure(body, method);
      console.log('Optimization successful:', res);
      setOptimizationResults(res);
      setActiveStep(2);
    } catch (e) {
      setError(
        `Optimization failed. Please check your parameters and try again. Error: ${e.message}`,
      );
      console.error('Optimization error:', e);
      setIsOptimizing(false);
      setActiveStep(0);
    } finally {
      setIsLoading(false);
    }
  };

  const handleOptimizationComplete = () => setIsOptimizing(false);

  const handleReset = () => {
    setOptimizationResults(null);
    setIsOptimizing(false);
    setActiveStep(0);
    setError(null);
    window.scrollTo(0, 0);
  };

  /* progress to results */
  useEffect(() => {
    if (optimizationResults && !isOptimizing) setActiveStep(2);
  }, [optimizationResults, isOptimizing]);

  /* ----------------------- RENDER ----------------------- */
  if (!cashFlowData) {
    return (
      <Container maxWidth="lg" sx={{ mt: 6, mb: 8 }}>
        <Paper
          elevation={0}
          sx={{
            p: 4,
            textAlign: 'center',
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.warning.main, 0.3)}`,
            backgroundColor: alpha(theme.palette.warning.main, 0.05),
          }}
        >
          <Box
            sx={{
              width: 70,
              height: 70,
              borderRadius: '50%',
              backgroundColor: alpha(theme.palette.warning.main, 0.1),
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              mb: 2,
            }}
          >
            <SpeedIcon
              sx={{ fontSize: 32, color: theme.palette.warning.main }}
            />
          </Box>
          <Typography variant="h5" color="warning.main" gutterBottom>
            Cash Flow Data Required
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Please upload your cashâ€‘flow data on the Home page before starting
            the optimization process.
          </Typography>
          <Button variant="outlined" color="warning" href="/" sx={{ mt: 3 }}>
            Go to Home Page
          </Button>
        </Paper>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ my: 4 }}>
      {/* ---------------- Header ---------------- */}
      <Paper
        elevation={0}
        sx={{
          p: 4,
          mb: 4,
          borderRadius: 2,
          background: `linear-gradient(135deg, ${alpha(
            theme.palette.secondary.main,
            0.05,
          )} 0%, ${alpha(theme.palette.primary.main, 0.07)} 100%)`,
          border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
        }}
      >
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            mb: 2,
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <TrendingUpIcon
              sx={{ fontSize: 28, color: theme.palette.secondary.main, mr: 1.5 }}
            />
            <Typography variant="h4" fontWeight={500}>
              ABS Structure Optimization
            </Typography>
          </Box>

          {(activeStep > 0 || optimizationResults) && (
            <Button
              variant="outlined"
              color="primary"
              startIcon={<RestartAltIcon />}
              onClick={handleReset}
              disabled={isLoading || isOptimizing}
              sx={{ fontWeight: 500 }}
            >
              Start Over
            </Button>
          )}
        </Box>
        <Typography variant="body1" color="text.secondary">
          Optimize your assetâ€‘backedâ€‘securities structure to maximise principal
          while maintaining buffer requirements.
        </Typography>
      </Paper>

      {/* ---------------- Alerts ---------------- */}
      {error && (
        <Alert severity="error" sx={{ mb: 3, borderRadius: 2 }}>
          {error}
        </Alert>
      )}

      {/* ---------------- Stepper ---------------- */}
      <Box sx={{ mb: 4 }}>
        <Stepper activeStep={activeStep} alternativeLabel>
          {['Configure Settings', 'Run Optimization', 'Review Results'].map(
            (label) => (
              <Step key={label}>
                <StepLabel
                  StepIconProps={{
                    sx: { '& .MuiStepIcon-text': { fontWeight: 'bold' } },
                  }}
                >
                  {label}
                </StepLabel>
              </Step>
            ),
          )}
        </Stepper>
      </Box>

      {/* ------------- Progress Component -------- */}
      {isOptimizing && (
        <OptimizationProgress
          isOptimizing={isOptimizing}
          onComplete={handleOptimizationComplete}
        />
      )}

      {/* ------------- Settings Form ------------- */}
      {(activeStep === 0 || (!isOptimizing && !optimizationResults)) && (
        <Paper
          elevation={0}
          sx={{
            p: 0,
            mb: 4,
            overflow: 'hidden',
            borderRadius: 2,
            border: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
            bgcolor: 'background.paper',
          }}
        >
          <Box
            sx={{
              px: 3,
              py: 2,
              display: 'flex',
              alignItems: 'center',
              borderBottom: `1px solid ${alpha(theme.palette.text.primary, 0.08)}`,
              backgroundColor: alpha(theme.palette.primary.main, 0.02),
            }}
          >
            <SettingsIcon sx={{ color: 'text.secondary', mr: 1.5 }} />
            <Typography variant="h6" fontWeight="medium">
              Optimization Settings
            </Typography>

            <Chip
              label={methodName(optimizationSettings.optimization_method)}
              color="primary"
              variant="outlined"
              size="small"
              sx={{ ml: 'auto' }}
            />
          </Box>

          <Box sx={{ p: 3 }}>
            <OptimizationSettingsForm
              values={optimizationSettings}
              onChange={handleFormChange}
            />
          </Box>

          <Divider />

          <Box sx={{ p: 3, textAlign: 'center' }}>
            <Button
              variant="contained"
              color="primary"
              size="large"
              onClick={handleOptimize}
              disabled={isLoading || isOptimizing}
              startIcon={
                isLoading || isOptimizing ? (
                  <CircularProgress size={20} />
                ) : (
                  <PlayArrowIcon />
                )
              }
              sx={{ py: 1.2, px: 4, borderRadius: 2, fontWeight: 500 }}
            >
              {isLoading || isOptimizing ? 'Optimizingâ€¦' : 'Run Optimization'}
            </Button>
            <Typography
              variant="body2"
              color="text.secondary"
              sx={{ mt: 2 }}
            >
              This may take several minutes depending on data size and
              parameters.
            </Typography>
          </Box>
        </Paper>
      )}

      {/* ------------- Results -------------------- */}
      {optimizationResults && !isOptimizing && (
        <OptimizationResults results={optimizationResults} />
      )}
    </Container>
  );
};

export default OptimizationPage;


======================================================================

DOSYA: src\pages\StressTestingPage.js
==================================================
// src/pages/StressTestingPage.js
import React, { useState } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Grid, 
  Slider, 
  TextField, 
  InputAdornment, 
  Button, 
  Tabs, 
  Tab, 
  Divider, 
  Card, 
  CardContent, 
  Chip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  alpha,
  useTheme,
  ThemeProvider,
  createTheme,
  CssBaseline,
  IconButton,
  Tooltip,
  CircularProgress
} from '@mui/material';
import { styled } from '@mui/material/styles';
import RefreshIcon from '@mui/icons-material/Refresh';
import AssessmentIcon from '@mui/icons-material/Assessment';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import WarningAmberIcon from '@mui/icons-material/WarningAmber';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import TrendingDownIcon from '@mui/icons-material/TrendingDown';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import ShowChartIcon from '@mui/icons-material/ShowChart';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import CompareArrowsIcon from '@mui/icons-material/CompareArrows';
import TuneIcon from '@mui/icons-material/Tune';
import { useData } from '../contexts/DataContext';

// Import Recharts components
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, 
  Legend, ResponsiveContainer, AreaChart, Area, BarChart, Bar, ReferenceLine,
  ScatterChart, Scatter, ZAxis
} from 'recharts';

// Create a dark theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#4dabf5',
    },
    secondary: {
      main: '#ce93d8',
    },
    success: {
      main: '#66bb6a',
    },
    error: {
      main: '#f44336',
    },
    warning: {
      main: '#ffa726',
    },
    info: {
      main: '#29b6f6',
    },
    background: {
      default: '#0a1929',
      paper: '#132f4c',
    },
    text: {
      primary: '#ffffff',
      secondary: 'rgba(255, 255, 255, 0.7)',
    },
    divider: 'rgba(255, 255, 255, 0.12)',
    grid: 'rgba(255, 255, 255, 0.15)',
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
        },
      },
    },
    MuiChip: {
      styleOverrides: {
        root: {
          fontWeight: 500,
        },
      },
    },
    MuiCardContent: {
      styleOverrides: {
        root: {
          '&:last-child': {
            paddingBottom: 16,
          },
        },
      },
    },
  },
});

// Custom styled component for slider
const StyledSlider = styled(Slider)(({ theme }) => ({
  color: theme.palette.primary.main,
  height: 8,
  '& .MuiSlider-track': {
    border: 'none',
    backgroundImage: `linear-gradient(to right, ${theme.palette.primary.main}, ${theme.palette.primary.light})`,
  },
  '& .MuiSlider-thumb': {
    height: 24,
    width: 24,
    backgroundColor: theme.palette.background.paper,
    border: `2px solid ${theme.palette.primary.main}`,
    '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {
      boxShadow: `0 0 0 8px ${alpha(theme.palette.primary.main, 0.16)}`,
    },
    '&:before': {
      display: 'none',
    },
  },
  '& .MuiSlider-valueLabel': {
    lineHeight: 1.2,
    fontSize: 12,
    background: 'unset',
    padding: 0,
    width: 32,
    height: 32,
    borderRadius: '50% 50% 50% 0',
    backgroundColor: theme.palette.primary.main,
    transformOrigin: 'bottom left',
    transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',
    '&:before': { display: 'none' },
    '&.MuiSlider-valueLabelOpen': {
      transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',
    },
    '& > *': {
      transform: 'rotate(45deg)',
    },
  },
}));

// Helper function to get color based on difference value
const getDifferenceColor = (diff, theme) => {
  if (diff >= -1) return theme.palette.success.main;
  if (diff >= -5) return theme.palette.warning.main;
  return theme.palette.error.main;
};

// Custom tooltip for charts
const CustomTooltip = ({ active, payload, label }) => {
  const theme = darkTheme;
  if (active && payload && payload.length) {
    return (
      <Paper
        elevation={3}
        sx={{
          p: 2,
          borderRadius: 1,
          boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
          border: '1px solid',
          borderColor: alpha(theme.palette.primary.main, 0.1),
          backgroundColor: alpha(theme.palette.background.paper, 0.95),
          maxWidth: 300,
        }}
      >
        <Typography variant="subtitle2" gutterBottom>{label}</Typography>
        {payload.map((entry, index) => (
          <Box key={`tooltip-item-${index}`} sx={{ display: 'flex', justifyContent: 'space-between', my: 0.5, alignItems: 'center' }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <Box
                sx={{
                  width: 12,
                  height: 12,
                  backgroundColor: entry.color,
                  mr: 1,
                  borderRadius: '50%'
                }}
              />
              <Typography variant="body2" color="text.secondary">
                {entry.name}:
              </Typography>
            </Box>
            <Typography variant="body2" fontWeight="medium" color={entry.color}>
              {typeof entry.value === 'number' 
                ? entry.value.toFixed(2) + (entry.unit || '%')
                : entry.value}
            </Typography>
          </Box>
        ))}
      </Paper>
    );
  }
  return null;
};

// Advanced custom tooltip for scatter chart
const ScatterTooltip = ({ active, payload }) => {
  const theme = darkTheme;
  if (active && payload && payload.length) {
    const data = payload[0].payload;
    return (
      <Paper
        elevation={3}
        sx={{
          p: 2,
          borderRadius: 1,
          boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
          border: '1px solid',
          borderColor: alpha(theme.palette.primary.main, 0.1),
          backgroundColor: alpha(theme.palette.background.paper, 0.95),
          maxWidth: 300,
        }}
      >
        <Typography variant="subtitle2" gutterBottom fontWeight="medium">
          Scenario Analysis
        </Typography>
        <Divider sx={{ my: 1 }} />
        <Grid container spacing={1}>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">NPL Rate:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium">{data.npl}%</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Prepayment:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium">{data.prepayment}%</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Reinvest Shift:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium">{data.reinvest}%</Typography>
          </Grid>
          <Grid item xs={12}><Divider sx={{ my: 1 }} /></Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Modeled Rate:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium" color={theme.palette.primary.main}>
              {data.modeled}%
            </Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Realized Rate:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium" color={theme.palette.secondary.main}>
              {data.realized}%
            </Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" color="text.secondary">Difference:</Typography>
          </Grid>
          <Grid item xs={6}>
            <Typography variant="body2" fontWeight="medium" 
              color={getDifferenceColor(data.difference, theme)}>
              {data.difference}%
            </Typography>
          </Grid>
        </Grid>
      </Paper>
    );
  }
  return null;
};

const StressTestingPage = () => {
  const theme = darkTheme;
  const { calculationResults } = useData();
  const [tabValue, setTabValue] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  
  // State for stress test parameters
  const [nplRange, setNplRange] = useState([2, 15]);
  const [prepaymentRange, setPrepaymentRange] = useState([5, 25]);
  const [reinvestmentRange, setReinvestmentRange] = useState([-10, 10]);
  const [defaultReinvestRate, setDefaultReinvestRate] = useState(30);
  const [scenarios, setScenarios] = useState(10);
  const [selectedScenario, setSelectedScenario] = useState('base');
  
  // Mock data for the stress test results
  const mockResults = {
    classBCouponRate: {
      modeled: 42.5,
      realized: 38.7,
      difference: -3.8,
      status: 'warning' // 'success', 'warning', 'error'
    },
    scenarioResults: [
      { name: 'Base Case', npl: 5, prepayment: 10, reinvestment: 0, modeled: 42.5, realized: 38.7, difference: -3.8 },
      { name: 'Mild Stress', npl: 8, prepayment: 15, reinvestment: -3, modeled: 41.2, realized: 36.1, difference: -5.1 },
      { name: 'Severe Stress', npl: 12, prepayment: 20, reinvestment: -7, modeled: 39.5, realized: 33.2, difference: -6.3 },
      { name: 'Extreme Stress', npl: 15, prepayment: 25, reinvestment: -10, modeled: 37.8, realized: 30.4, difference: -7.4 },
      { name: 'Best Case', npl: 2, prepayment: 5, reinvestment: 5, modeled: 43.8, realized: 41.3, difference: -2.5 },
    ],
    sensitivityAnalysis: {
      npl: [
        { value: 2, modeled: 43.5, realized: 41.0 },
        { value: 5, modeled: 42.5, realized: 38.7 },
        { value: 8, modeled: 41.2, realized: 36.1 },
        { value: 10, modeled: 40.3, realized: 34.8 },
        { value: 12, modeled: 39.5, realized: 33.2 },
        { value: 15, modeled: 37.8, realized: 30.4 },
      ],
      prepayment: [
        { value: 5, modeled: 43.8, realized: 41.3 },
        { value: 10, modeled: 42.5, realized: 38.7 },
        { value: 15, modeled: 41.2, realized: 36.1 },
        { value: 20, modeled: 39.5, realized: 33.2 },
        { value: 25, modeled: 37.8, realized: 30.4 },
      ],
      reinvestment: [
        { value: -10, modeled: 37.8, realized: 30.4 },
        { value: -5, modeled: 40.3, realized: 34.8 },
        { value: 0, modeled: 42.5, realized: 38.7 },
        { value: 5, modeled: 43.8, realized: 41.3 },
        { value: 10, modeled: 45.0, realized: 43.6 },
      ],
    },
    combinedScenarios: [
      { npl: 2, prepayment: 5, reinvest: 5, modeled: 45.0, realized: 43.6 },
      { npl: 5, prepayment: 5, reinvest: 0, modeled: 43.2, realized: 40.5 },
      { npl: 5, prepayment: 10, reinvest: 0, modeled: 42.5, realized: 38.7 },
      { npl: 5, prepayment: 15, reinvest: 0, modeled: 41.8, realized: 37.2 },
      { npl: 8, prepayment: 10, reinvest: -3, modeled: 41.2, realized: 36.1 },
      { npl: 10, prepayment: 15, reinvest: -5, modeled: 40.3, realized: 34.8 },
      { npl: 12, prepayment: 20, reinvest: -7, modeled: 39.5, realized: 33.2 },
      { npl: 15, prepayment: 20, reinvest: -7, modeled: 38.6, realized: 31.8 },
      { npl: 15, prepayment: 25, reinvest: -10, modeled: 37.8, realized: 30.4 },
    ]
  };
  

  
  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Handle running the stress test
  const handleRunStressTest = () => {
    setIsLoading(true);
    
    // Simulate API call delay
    setTimeout(() => {
      setIsLoading(false);
    }, 1500);
  };
  
  // Format data for the sensitivity charts
  const formatSensitivityData = (dataKey) => {
    return mockResults.sensitivityAnalysis[dataKey].map(item => ({
      value: item.value,
      modeled: item.modeled,
      realized: item.realized,
      difference: item.realized - item.modeled
    }));
  };
  
  // Format combined scenarios data for scatter plot
  const formatScatterData = () => {
    return mockResults.combinedScenarios.map(item => ({
      x: item.npl, // NPL rate for X axis
      y: item.prepayment, // Prepayment rate for Y axis
      z: Math.abs(item.realized - item.modeled) * 10, // Difference size for bubble size (scaled)
      npl: item.npl,
      prepayment: item.prepayment,
      reinvest: item.reinvest,
      modeled: item.modeled,
      realized: item.realized,
      difference: (item.realized - item.modeled).toFixed(2)
    }));
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        {/* Page Header */}
        <Box
          sx={{
            mb: 4,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between'
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <AssessmentIcon 
              sx={{ 
                fontSize: 36, 
                color: theme.palette.primary.main,
                mr: 2,
                filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))'
              }} 
            />
            <Box>
              <Typography variant="h4" fontWeight="500">
                Stress Testing
              </Typography>
              <Typography variant="subtitle1" color="text.secondary">
                Analyze Class B coupon performance under various market conditions
              </Typography>
            </Box>
          </Box>
          
          <Button
            variant="contained"
            color="primary"
            startIcon={<SaveAltIcon />}
            sx={{
              px: 3,
              py: 1,
              borderRadius: 2,
              boxShadow: '0 3px 8px rgba(0,0,0,0.3)',
            }}
          >
            Export Results
          </Button>
        </Box>
        
        <Grid container spacing={4}>
          {/* Parameters Panel */}
          <Grid item xs={12} md={4}>
            <Paper 
              elevation={3}
              sx={{ 
                p: 3, 
                height: '100%',
                borderRadius: 2,
                backgroundColor: alpha(theme.palette.background.paper, 0.8),
                border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              }}
            >
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                <TuneIcon sx={{ mr: 1, color: theme.palette.primary.light }} />
                Stress Test Parameters
              </Typography>
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center">
                  <WarningAmberIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.warning.main }} />
                  NPL Rate Range (%)
                  <Tooltip title="Non-Performing Loan rate affects the cash flow available for Class B payment" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Box sx={{ px: 1, pt: 1, pb: 2 }}>
                  <StyledSlider
                    value={nplRange}
                    onChange={(e, value) => setNplRange(value)}
                    valueLabelDisplay="auto"
                    min={0}
                    max={30}
                    step={1}
                    marks={[
                      { value: 0, label: '0%' },
                      { value: 15, label: '15%' },
                      { value: 30, label: '30%' }
                    ]}
                  />
                </Box>
              </Box>
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center">
                  <TrendingDownIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.primary.light }} />
                  Prepayment Rate Range (%)
                  <Tooltip title="Early prepayment rates affect the expected cash flow timing" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Box sx={{ px: 1, pt: 1, pb: 2 }}>
                  <StyledSlider
                    value={prepaymentRange}
                    onChange={(e, value) => setPrepaymentRange(value)}
                    valueLabelDisplay="auto"
                    min={0}
                    max={50}
                    step={1}
                    marks={[
                      { value: 0, label: '0%' },
                      { value: 25, label: '25%' },
                      { value: 50, label: '50%' }
                    ]}
                  />
                </Box>
              </Box>
              
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center">
                  <AttachMoneyIcon sx={{ fontSize: 20, mr: 1, color: theme.palette.secondary.light }} />
                  Reinvestment Rate Shift (Â±%)
                  <Tooltip title="Deviation from the base reinvestment rate in percentage points" sx={{ ml: 1 }}>
                    <IconButton size="small">
                      <InfoOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Typography>
                <Box sx={{ px: 1, pt: 1, pb: 2 }}>
                  <StyledSlider
                    value={reinvestmentRange}
                    onChange={(e, value) => setReinvestmentRange(value)}
                    valueLabelDisplay="auto"
                    min={-20}
                    max={20}
                    step={1}
                    marks={[
                      { value: -20, label: '-20%' },
                      { value: 0, label: '0%' },
                      { value: 20, label: '+20%' }
                    ]}
                  />
                </Box>
              </Box>
              
              <Box sx={{ mt: 4 }}>
                <TextField
                  fullWidth
                  label="Base Reinvestment Rate (%)"
                  value={defaultReinvestRate}
                  onChange={(e) => setDefaultReinvestRate(Number(e.target.value))}
                  type="number"
                  InputProps={{
                    endAdornment: <InputAdornment position="end">%</InputAdornment>,
                  }}
                  variant="outlined"
                  size="small"
                  sx={{ mb: 3 }}
                />
                
                <TextField
                  fullWidth
                  label="Number of Scenarios"
                  value={scenarios}
                  onChange={(e) => setScenarios(Number(e.target.value))}
                  type="number"
                  variant="outlined"
                  size="small"
                  sx={{ mb: 3 }}
                />
                
                <FormControl fullWidth variant="outlined" size="small" sx={{ mb: 4 }}>
                  <InputLabel>Pre-defined Scenario</InputLabel>
                  <Select
                    value={selectedScenario}
                    onChange={(e) => setSelectedScenario(e.target.value)}
                    label="Pre-defined Scenario"
                  >
                    <MenuItem value="base">Base Case</MenuItem>
                    <MenuItem value="mild">Mild Stress</MenuItem>
                    <MenuItem value="moderate">Moderate Stress</MenuItem>
                    <MenuItem value="severe">Severe Stress</MenuItem>
                    <MenuItem value="extreme">Extreme Stress</MenuItem>
                    <MenuItem value="custom">Custom Scenario</MenuItem>
                  </Select>
                </FormControl>
                
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  size="large"
                  startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : <AssessmentIcon />}
                  onClick={handleRunStressTest}
                  disabled={isLoading}
                  sx={{
                    py: 1.2,
                    borderRadius: 2,
                    boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
                    '&:hover': {
                      boxShadow: '0 6px 14px rgba(0,0,0,0.4)',
                    }
                  }}
                >
                  {isLoading ? 'Running Tests...' : 'Run Stress Tests'}
                </Button>
              </Box>
            </Paper>
          </Grid>
          
          {/* Results Panel */}
          <Grid item xs={12} md={8}>
            <Paper 
              elevation={3}
              sx={{ 
                borderRadius: 2,
                overflow: 'hidden',
                backgroundColor: alpha(theme.palette.background.paper, 0.8),
                border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
              }}
            >
              <Box sx={{ 
                borderBottom: 1, 
                borderColor: 'divider',
                backgroundColor: alpha(theme.palette.background.paper, 0.4),
                px: 2
              }}>
                <Tabs
                  value={tabValue}
                  onChange={handleTabChange}
                  variant="scrollable"
                  scrollButtons="auto"
                  sx={{
                    '& .MuiTab-root': {
                      minWidth: 100,
                      py: 2
                    }
                  }}
                >
                  <Tab 
                    label="Summary" 
                    icon={<ShowChartIcon />} 
                    iconPosition="start"
                  />
                  <Tab 
                    label="NPL Sensitivity" 
                    icon={<WarningAmberIcon />} 
                    iconPosition="start"
                  />
                  <Tab 
                    label="Prepayment Impact" 
                    icon={<TrendingDownIcon />} 
                    iconPosition="start"
                  />
                  <Tab 
                    label="Combined Analysis" 
                    icon={<CompareArrowsIcon />} 
                    iconPosition="start"
                  />
                </Tabs>
              </Box>
              
              {/* Summary Tab */}
              {tabValue === 0 && (
                <Box sx={{ p: 3 }}>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <Box sx={{ 
                        p: 2.5, 
                        borderRadius: 2, 
                        border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`,
                        backgroundColor: alpha(theme.palette.background.paper, 0.4),
                        display: 'flex',
                        flexWrap: 'wrap',
                        gap: 4
                      }}>
                        <Box>
                          <Typography variant="body2" color="text.secondary">Modeled Coupon Rate</Typography>
                          <Typography variant="h3" color="primary.main" sx={{ mt: 0.5 }}>
                            {mockResults.classBCouponRate.modeled.toFixed(1)}%
                          </Typography>
                        </Box>
                        
                        <Box>
                          <Typography variant="body2" color="text.secondary">Realized Coupon Rate</Typography>
                          <Typography 
                            variant="h3" 
                            sx={{ 
                              mt: 0.5, 
                              color: getDifferenceColor(mockResults.classBCouponRate.difference, theme)
                            }}
                          >
                            {mockResults.classBCouponRate.realized.toFixed(1)}%
                          </Typography>
                        </Box>
                        
                        <Box sx={{ ml: 'auto', textAlign: 'right' }}>
                          <Typography variant="body2" color="text.secondary">Difference</Typography>
                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', mt: 1 }}>
                            <Chip 
                              label={`${mockResults.classBCouponRate.difference > 0 ? '+' : ''}${mockResults.classBCouponRate.difference.toFixed(1)}%`}
                              color={
                                mockResults.classBCouponRate.difference >= -1 ? "success" :
                                mockResults.classBCouponRate.difference >= -5 ? "warning" : "error"
                              }
                              sx={{ fontWeight: 'bold', fontSize: '1.1rem', height: 32, px: 1 }}
                            />
                          </Box>
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            {mockResults.classBCouponRate.difference >= -1 ? "Within target" :
                             mockResults.classBCouponRate.difference >= -5 ? "Moderate deviation" : "Significant deviation"}
                          </Typography>
                        </Box>
                      </Box>
                    </Grid>
                    
                    <Grid item xs={12}>
                      <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                        Scenario Comparison
                      </Typography>
                      <Box sx={{ height: 400 }}>
                        <ResponsiveContainer width="100%" height="100%">
                          <BarChart
                            data={mockResults.scenarioResults}
                            margin={{ top: 20, right: 30, left: 20, bottom: 70 }}
                          >
                            <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                            <XAxis 
                              dataKey="name" 
                              tick={{ fill: theme.palette.text.secondary }}
                              angle={-45}
                              textAnchor="end"
                              height={70}
                            />
                            <YAxis 
                              tickFormatter={(value) => `${value}%`}
                              tick={{ fill: theme.palette.text.secondary }}
                              domain={[0, 'dataMax + 5']}
                            />
                            <RechartsTooltip content={<CustomTooltip />} />
                            <Legend 
                              wrapperStyle={{ paddingTop: 20 }}
                              formatter={(value) => (
                                <span style={{ color: theme.palette.text.primary }}>{value}</span>
                              )}
                            />
                            <Bar 
                              name="Modeled Rate" 
                              dataKey="modeled" 
                              fill={theme.palette.primary.main}
                              radius={[4, 4, 0, 0]}
                            />
                            <Bar 
                              name="Realized Rate" 
                              dataKey="realized" 
                              fill={theme.palette.secondary.main}
                              radius={[4, 4, 0, 0]}
                            />
                          </BarChart>
                        </ResponsiveContainer>
                      </Box>
                    </Grid>
                  </Grid>
                </Box>
              )}
              
              {/* NPL Sensitivity Tab */}
              {tabValue === 1 && (
                <Box sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Class B Coupon Rate vs. NPL Rates
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    This analysis shows how Non-Performing Loan (NPL) rates affect the Class B coupon rates. Higher NPL rates typically reduce available cash flow for Class B payments.
                  </Typography>
                  
                  <Box sx={{ height: 400, mb: 4 }}>
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        data={formatSensitivityData('npl')}
                        margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                        <XAxis 
                          dataKey="value"
                          label={{ value: 'NPL Rate (%)', position: 'insideBottomRight', offset: -5, fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <YAxis 
                          tickFormatter={(value) => `${value}%`}
                          label={{ value: 'Coupon Rate (%)', angle: -90, position: 'insideLeft', fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                          domain={[0, 'dataMax + 5']}
                        />
                        <RechartsTooltip content={<CustomTooltip />} />
                        <Legend 
                          wrapperStyle={{ paddingTop: 20 }}
                          formatter={(value) => (
                            <span style={{ color: theme.palette.text.primary }}>{value}</span>
                          )}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="modeled" 
                          name="Modeled Rate" 
                          stroke={theme.palette.primary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.primary.main }}
                          activeDot={{ r: 7, fill: theme.palette.primary.light }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="realized" 
                          name="Realized Rate" 
                          stroke={theme.palette.secondary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.secondary.main }}
                          activeDot={{ r: 7, fill: theme.palette.secondary.light }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </Box>
                  
                  <Box sx={{ mt: 4, p: 3, borderRadius: 2, bgcolor: alpha(theme.palette.background.paper, 0.4), border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}` }}>
                    <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                      Key Insights:
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      â€¢ The modeled and realized rates both decrease as NPL rates increase<br />
                      â€¢ The gap between modeled and realized rates widens with higher NPL rates<br />
                      â€¢ At NPL rates above 12%, the deviation becomes significant (over 5%)<br />
                      â€¢ Base case projections assume a 5% NPL rate
                    </Typography>
                  </Box>
                </Box>
              )}
              
              {/* Prepayment Impact Tab */}
              {tabValue === 2 && (
                <Box sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Class B Coupon Rate vs. Prepayment Rates
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    This analysis shows how early prepayment rates affect Class B coupon performance. Higher prepayment rates can impact the expected cash flow timing and reinvestment opportunities.
                  </Typography>
                  
                  <Box sx={{ height: 400, mb: 4 }}>
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        data={formatSensitivityData('prepayment')}
                        margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                        <XAxis 
                          dataKey="value"
                          label={{ value: 'Prepayment Rate (%)', position: 'insideBottomRight', offset: -5, fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <YAxis 
                          tickFormatter={(value) => `${value}%`}
                          label={{ value: 'Coupon Rate (%)', angle: -90, position: 'insideLeft', fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                          domain={[0, 'dataMax + 5']}
                        />
                        <RechartsTooltip content={<CustomTooltip />} />
                        <Legend 
                          wrapperStyle={{ paddingTop: 20 }}
                          formatter={(value) => (
                            <span style={{ color: theme.palette.text.primary }}>{value}</span>
                          )}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="modeled" 
                          name="Modeled Rate" 
                          stroke={theme.palette.primary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.primary.main }}
                          activeDot={{ r: 7, fill: theme.palette.primary.light }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="realized" 
                          name="Realized Rate" 
                          stroke={theme.palette.secondary.main}
                          strokeWidth={2}
                          dot={{ r: 5, fill: theme.palette.secondary.main }}
                          activeDot={{ r: 7, fill: theme.palette.secondary.light }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </Box>
                  
                  <Box sx={{ mt: 4, p: 3, borderRadius: 2, bgcolor: alpha(theme.palette.background.paper, 0.4), border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}` }}>
                    <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                      Key Insights:
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      â€¢ Higher prepayment rates lead to lower coupon rates for Class B notes<br />
                      â€¢ At prepayment rates above 20%, the deviation between modeled and realized becomes critical<br />
                      â€¢ Base case projections assume a 10% prepayment rate<br />
                      â€¢ Prepayment sensitivity analysis suggests careful monitoring of early repayments
                    </Typography>
                  </Box>
                </Box>
              )}
              
              {/* Combined Analysis Tab */}
              {tabValue === 3 && (
                <Box sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Multifactor Analysis of Rate Deviation
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    This combined analysis shows how NPL and prepayment rates together affect Class B coupon rate deviation. Bubble size indicates the magnitude of deviation.
                  </Typography>
                  
                  <Box sx={{ height: 500 }}>
                    <ResponsiveContainer width="100%" height="100%">
                      <ScatterChart
                        margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke={theme.palette.grid} />
                        <XAxis 
                          type="number" 
                          dataKey="x" 
                          name="NPL Rate" 
                          unit="%" 
                          domain={[0, 20]}
                          label={{ value: 'NPL Rate (%)', position: 'insideBottomRight', offset: -5, fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <YAxis 
                          type="number" 
                          dataKey="y" 
                          name="Prepayment Rate" 
                          unit="%"
                          domain={[0, 30]}
                          label={{ value: 'Prepayment Rate (%)', angle: -90, position: 'insideLeft', fill: theme.palette.text.secondary }}
                          tick={{ fill: theme.palette.text.secondary }}
                        />
                        <ZAxis type="number" range={[60, 350]} />
                        <RechartsTooltip content={<ScatterTooltip />} />
                        <Legend 
                          wrapperStyle={{ paddingTop: 20 }}
                          formatter={(value) => (
                            <span style={{ color: theme.palette.text.primary }}>{value}</span>
                          )}
                        />
                        <Scatter 
                          name="Rate Deviation" 
                          data={formatScatterData()} 
                          fill={theme.palette.error.main}
                          fillOpacity={0.7}
                        />
                      </ScatterChart>
                    </ResponsiveContainer>
                  </Box>
                  
                  <Box sx={{ mt: 4, p: 3, borderRadius: 2, bgcolor: alpha(theme.palette.background.paper, 0.4), border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}` }}>
                    <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                      Risk Heatmap Interpretation
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      â€¢ Larger bubbles indicate greater deviation between modeled and realized coupon rates<br />
                      â€¢ The upper right quadrant (high NPL, high prepayment) represents the most severe stress conditions<br />
                      â€¢ Scenarios with high NPL rates and high prepayment rates tend to result in the largest deviations<br />
                      â€¢ Base case parameters (5% NPL, 10% prepayment) show moderate but acceptable deviation
                    </Typography>
                  </Box>
                </Box>
              )}
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </ThemeProvider>
  );
};

export default StressTestingPage;

======================================================================

DOSYA: src\services\apiService.js
==================================================
// frontend/src/services/apiService.js
import axios from 'axios';

const API_URL =
  process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

/**
 * Ortak axios istemcisi
 */
const apiClient = axios.create({
  baseURL: API_URL,
  headers: { 'Content-Type': 'application/json' },
  // 5Â dakika (300Â 000Â ms) â€“ optimizasyon iÅŸlemleri uzun sÃ¼rebilir
  timeout: 300_000,
});

/* --------------------------------------------------------------------- */
/*                               UPLOAD                                  */
/* --------------------------------------------------------------------- */

/**
 * Excel dosyasÄ± yÃ¼kle
 * @param {File} file
 * @returns {Promise<Object>}
 */
const uploadFile = async (file) => {
  const formData = new FormData();
  formData.append('file', file);

  try {
    console.log('Uploading file:', file.name);

    const response = await axios.post(
      `${API_URL}/upload-excel/`,
      formData,
      {
        headers: { 'Content-Type': 'multipart/form-data' },
      }
    );

    console.log('File upload successful');
    return response.data;
  } catch (error) {
    console.error('Error uploading file:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                             CALCULATION                               */
/* --------------------------------------------------------------------- */

/**
 * Hesaplama servisi.
 * 2.Â parametre olarak optimizasyon Ã§Ä±ktÄ±sÄ± gÃ¶nderilirse
 * ClassÂ B nominali otomatik eklenir.
 *
 * @param {Object} params   â€“ CalculationRequest gÃ¶vdesi
 * @param {Object|null} optResult â€“ OptimizationResult (opsiyonel)
 * @returns {Promise<Object>}
 */
const calculateResults = async (params, optResult = null) => {
  try {
    // Ä°steÄŸe baÄŸlÄ± ClassÂ B nominal entegrasyonu
    const finalParams = { ...params };

    if (
      optResult &&
      optResult.class_b_nominal &&
      Number(optResult.class_b_nominal) > 0
    ) {
      finalParams.tranche_b = {
        ...(finalParams.tranche_b || {}),
        nominal: optResult.class_b_nominal,
      };
    }

    console.log('Calculating results with params:', finalParams);

    const response = await apiClient.post('/calculate/', finalParams);

    console.log('Calculation successful');
    return response.data;
  } catch (error) {
    console.error('Error calculating results:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                             OPTIMIZATION                              */
/* --------------------------------------------------------------------- */

/**
 * YapÄ± optimizasyonu (classic | genetic)
 *
 * @param {Object} params â€“ OptimizationRequest gÃ¶vdesi
 * @param {'classic'|'genetic'} [method='classic']
 * @returns {Promise<Object>}
 */
const optimizeStructure = async (params, method = 'classic') => {
  try {
    console.log(`Starting optimization with method: ${method}`);
    console.log(
      'Optimization params:',
      JSON.stringify(params, null, 2)
    );

    // Ä°ptal edilebilir istek oluÅŸtur
    const CancelToken = axios.CancelToken;
    const source = CancelToken.source();

    // 5Â dakikada zaman aÅŸÄ±mÄ±
    const timeout = setTimeout(() => {
      source.cancel(
        'Operation timeout: The optimization process took too long'
      );
    }, 300_000);

    const response = await apiClient.post(
      `/optimize/${method}/`,
      params,
      { cancelToken: source.token }
    );

    clearTimeout(timeout);

    console.log(`${method} optimization completed successfully`);
    return response.data;
  } catch (error) {
    console.error(`Error in ${method} optimization:`, error);

    if (axios.isCancel(error)) {
      console.log('Request canceled:', error.message);
      throw new Error(
        'Optimization process was canceled: ' + error.message
      );
    }

    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);

      const status = error.response.status;
      let message = 'Optimization failed';

      switch (status) {
        case 400:
          message =
            'Invalid optimization parameters: ' +
            (error.response.data.detail ||
              'Please check your parameters');
          break;
        case 500:
          message =
            'Server error during optimization. The calculation may be too complex.';
          break;
        case 504:
          message =
            'Optimization timed out. Try again with simpler parameters.';
          break;
        default:
          message =
            `Optimization error (${status}): ` +
            (error.response.data.detail || error.message);
      }

      throw new Error(message);
    }

    throw error;
  }
};

/* --------------------------------------------------------------------- */
/*                           PROGRESSÂ POLLING                            */
/* --------------------------------------------------------------------- */

/**
 * Sunucudan optimizasyon ilerlemesini sorgula
 * @returns {Promise<Object>}
 */
const pollOptimizationProgress = async () => {
  try {
    const response = await apiClient.get('/optimize/progress/');
    return response.data;
  } catch (error) {
    console.error('Error polling optimization progress:', error);
    return {
      progress: 0,
      phase: 'Error',
      message: 'Failed to get progress information',
      error: true,
    };
  }
};

/* --------------------------------------------------------------------- */
/*                                EXPORT                                 */
/* --------------------------------------------------------------------- */

export {
  uploadFile,
  calculateResults,
  optimizeStructure,
  pollOptimizationProgress,
};


======================================================================



BACKEND DOSYALARI VE Ä°Ã‡ERÄ°KLERÄ°:
==============================

DOSYA: backend\Dockerfile
==================================================
# backend/Dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

======================================================================

DOSYA: backend\requirements.txt
==================================================
# backend/requirements.txt
fastapi==0.104.1
uvicorn==0.23.2
pydantic==2.4.2
pandas==2.1.1
numpy==1.26.0
python-multipart==0.0.6
openpyxl==3.1.2
python-dateutil==2.8.2
scikit-optimize==0.9.0

======================================================================

DOSYA: backend\app\main.py
==================================================
import time
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from app.routers import calculation, optimization
import uvicorn

app = FastAPI(
    title="ABS Analysis Tool",
    description="Cash flow analysis for securitization",
    version="1.0.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, specify the actual frontend domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Add GZip compression for faster responses
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Add custom middleware for timeout and performance tracking
@app.middleware("http")
async def add_process_time_header(request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Include routers
app.include_router(calculation.router, prefix="/api", tags=["Calculation"])
app.include_router(optimization.router, prefix="/api", tags=["Optimization"])

@app.get("/")
async def root():
    return {"message": "ABS Analysis Tool API is running"}

# Configure server settings if run directly
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        timeout_keep_alive=600,  # 10 dakika keep-alive timeout
        workers=1,  # Optimization iÅŸlemi iÃ§in tek bir iÅŸÃ§i daha iyi olabilir
    )

======================================================================

DOSYA: backend\app\__init__.py
==================================================


======================================================================

DOSYA: backend\app\models\input_models.py
==================================================
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import date

class GeneralSettings(BaseModel):
    start_date: date
    operational_expenses: float
    min_buffer: float

class TrancheA(BaseModel):
    maturity_days: int
    base_rate: float
    spread: float
    reinvest_rate: float
    nominal: float

class TrancheB(BaseModel):
    maturity_days: int
    base_rate: float
    spread: float
    reinvest_rate: float
    nominal: Optional[float] = None  # Added Optional nominal field

class NPVSettings(BaseModel):
    method: str  # "weighted_avg_rate" or "custom_rate"
    custom_rate: Optional[float] = None

class OptimizationSettings(BaseModel):
    optimization_method: str = Field(default="classic")
    selected_strategies: List[str] = Field(default=["equal", "increasing", "decreasing", "middle_weighted"])
    a_tranches_range: List[int] = Field(default=[2, 6])
    maturity_range: List[int] = Field(default=[32, 365])
    maturity_step: int = Field(default=10)
    min_class_b_percent: float = Field(default=10.0)
    target_class_b_coupon_rate: float = Field(default=30.0)
    additional_days_for_class_b: int = Field(default=10)
    class_b_percent_deviation: float = Field(default=1.0)  # New field with tighter default value
    
    # Evolutionary algorithm parameters
    population_size: Optional[int] = Field(default=50)
    num_generations: Optional[int] = Field(default=40)

class CalculationRequest(BaseModel):
    general_settings: GeneralSettings
    tranches_a: List[TrancheA]
    tranche_b: TrancheB
    npv_settings: NPVSettings
    is_optimized: Optional[bool] = False
    optimization_method: Optional[str] = None

======================================================================

DOSYA: backend\app\models\output_models.py
==================================================
# backend/app/models/output_models.py
from pydantic import BaseModel
from typing import List, Dict, Any, Optional

class CashFlowSummary(BaseModel):
    total_records: int
    total_principal: float
    total_interest: float
    total_cash_flow: float
    date_range: List[str]
    
class CalculationResult(BaseModel):
    class_a_total: float
    class_b_total: float
    class_a_principal: float
    class_b_principal: float
    class_a_interest: float
    class_b_coupon: float
    min_buffer_actual: float
    total_principal_paid: float
    total_loan_principal: float
    financing_cost: float
    tranche_results: List[Dict[str, Any]]
    interest_rate_conversions: List[Dict[str, Any]]
    
class OptimizationResult(BaseModel):
    best_strategy: str
    class_a_maturities: List[int]
    class_a_nominals: List[float]
    class_a_rates: List[float]
    class_a_reinvest: List[float]
    class_b_maturity: int
    class_b_rate: float
    class_b_reinvest: float
    class_b_nominal: float
    class_b_coupon_rate: float
    direct_class_b_coupon_rate: float = 0.0  # Add this new field with default value
    min_buffer_actual: float
    last_cash_flow_day: int
    additional_days: int
    results_by_strategy: Dict[str, Dict[str, Any]]
    class_b_percent: Optional[float] = None  # Optional field for Class B percentage

======================================================================

DOSYA: backend\app\routers\calculation.py
==================================================
# backend/app/routers/calculation.py
from fastapi import APIRouter, UploadFile, File, HTTPException
from app.models.input_models import CalculationRequest
from app.models.output_models import CalculationResult, CashFlowSummary
from app.services.calculation_service import perform_calculation, load_excel_data
import pandas as pd
from typing import Dict, Any
import io

router = APIRouter()

# Global variable to store the dataframe after upload
# In a production app, you would use a database or Redis cache instead
df_store = {"df": None}

@router.post("/upload-excel/", response_model=CashFlowSummary)
async def upload_excel(file: UploadFile = File(...)):
    try:
        contents = await file.read()
        df = load_excel_data(contents)
        
        # Store the dataframe in memory for later use
        df_store["df"] = df
        
        # Return summary data
        return CashFlowSummary(
            total_records=len(df),
            total_principal=float(df['principal_amount'].sum()),
            total_interest=float(df['interest_amount'].sum()),
            total_cash_flow=float(df['cash_flow'].sum()),
            date_range=[df['installment_date'].min().strftime('%d/%m/%Y'), 
                      df['installment_date'].max().strftime('%d/%m/%Y')]
        )
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Could not process file: {str(e)}")

@router.post("/calculate/", response_model=CalculationResult)
async def calculate(request: CalculationRequest):
    try:
        # Get the stored dataframe
        df = df_store.get("df")
        if df is None:
            raise HTTPException(status_code=400, detail="No data found. Please upload Excel file first.")
        
        # Perform the calculation
        result = perform_calculation(df, request)
        return result
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Calculation error: {str(e)}")

======================================================================

DOSYA: backend\app\routers\optimization.py
==================================================
import time
import traceback
import logging
import asyncio
from fastapi.responses import JSONResponse
from fastapi import APIRouter, HTTPException, Path
from app.models.input_models import OptimizationSettings, GeneralSettings
from app.models.output_models import OptimizationResult

# Import the optimization_progress object and all optimization functions
from app.services.optimization_service import (
    optimization_progress,  # Import the progress tracker
    perform_optimization, 
    perform_genetic_optimization
)
from app.routers.calculation import df_store  # Import the shared dataframe store

# Configure logger
logger = logging.getLogger(__name__)

router = APIRouter()

@router.post("/optimize/classic/", response_model=OptimizationResult)
async def optimize_classic(
    optimization_settings: OptimizationSettings,
    general_settings: GeneralSettings
):
    try:
        # Reset progress tracker
        optimization_progress.reset()
        
        # Get the stored dataframe
        df = df_store.get("df")
        if df is None:
            raise HTTPException(status_code=400, detail="No data found. Please upload Excel file first.")
        
        # Log the request
        logger.info(f"Starting classic optimization with parameters: {optimization_settings}")
        
        # Perform the optimization with classic method in a separate thread
        # to not block the event loop and allow progress updates
        def run_optimization():
            return perform_optimization(df, general_settings, optimization_settings)
        
        # Run the CPU-bound optimization task in a thread pool
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, run_optimization)
        
        # Log success
        logger.info("Classic optimization completed successfully")
        
        # Ensure progress is set to 100% when complete
        optimization_progress.update(
            step=100,
            phase="Complete",
            message="Optimization completed successfully"
        )
        
        return result
    except Exception as e:
        # Log the error
        logger.error(f"Classic optimization error: {str(e)}")
        logger.error(traceback.format_exc())
        
        # Update progress tracker in case of error (don't reset)
        optimization_progress.update(
            phase="Error",
            message=f"Classic optimization error: {str(e)}",
            step=100
        )
        
        raise HTTPException(status_code=500, detail=f"Classic optimization error: {str(e)}")

@router.post("/optimize/genetic/", response_model=OptimizationResult)
async def optimize_genetic(
    optimization_settings: OptimizationSettings,
    general_settings: GeneralSettings
):
    try:
        # Reset progress tracker
        optimization_progress.reset()
        
        df = df_store.get("df")
        if df is None:
            raise HTTPException(status_code=400, detail="No data found. Please upload Excel file first.")
        
        # Log the request
        logger.info(f"Starting genetic optimization with parameters: {optimization_settings}")
        
        # Perform the optimization in a separate thread
        def run_optimization():
            return perform_genetic_optimization(df, general_settings, optimization_settings)
        
        # Run the CPU-bound optimization task in a thread pool
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, run_optimization)
        
        # Log success
        logger.info("Genetic optimization completed successfully")
        
        # Ensure progress is set to 100% when complete
        optimization_progress.update(
            step=100,
            phase="Complete",
            message="Optimization completed successfully"
        )
        
        return result
    except Exception as e:
        # Log the error
        logger.error(f"Genetic optimization error: {str(e)}")
        logger.error(traceback.format_exc())
        
        # Update progress tracker in case of error (don't reset)
        optimization_progress.update(
            phase="Error",
            message=f"Genetic optimization error: {str(e)}",
            step=100
        )
        
        raise HTTPException(status_code=500, detail=f"Genetic optimization error: {str(e)}")

# Backward compatibility main endpoint - updated to only support classic and genetic
@router.post("/optimize/", response_model=OptimizationResult)
async def optimize(
    optimization_settings: OptimizationSettings,
    general_settings: GeneralSettings
):
    method = getattr(optimization_settings, "optimization_method", "classic")
    logger.info(f"Optimizing with method: {method}")
    
    # Reset progress before starting
    optimization_progress.reset()
    
    # Add timeout handling
    try:
        # SÄ±nÄ±rlÄ± kombinasyon sayÄ±sÄ± ve iterasyon
        if hasattr(optimization_settings, "maturity_range") and len(optimization_settings.maturity_range) == 2:
            # Ä°ÅŸlem sÃ¼resini azaltmak iÃ§in parametreleri sÄ±nÄ±rla
            range_diff = optimization_settings.maturity_range[1] - optimization_settings.maturity_range[0]
            if range_diff > 200 and optimization_settings.maturity_step < 15:
                logger.warning(f"Large maturity range ({range_diff}) with small step ({optimization_settings.maturity_step}). Adjusting step.")
                optimization_settings.maturity_step = max(15, optimization_settings.maturity_step)
        
        if method == "classic":
            return await optimize_classic(optimization_settings, general_settings)
        elif method == "genetic":
            return await optimize_genetic(optimization_settings, general_settings)
        else:
            # Default to classic method for any unsupported types
            logger.warning(f"Unknown optimization method: {method}, defaulting to classic")
            optimization_settings.optimization_method = "classic"
            return await optimize_classic(optimization_settings, general_settings)
    except Exception as e:
        # GÃ¼ncelleme yapmak iÃ§in hata durumunda progress'i gÃ¼ncelle
        optimization_progress.update(
            phase="Error", 
            message=f"Optimization error: {str(e)}",
            step=100
        )
        
        logger.error(f"Error in main optimize endpoint: {str(e)}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"Optimization error: {str(e)}")

@router.get("/optimize/progress/")
async def get_optimization_progress():
    """Get the current status of the optimization process"""
    # Ä°lerleme sÄ±fÄ±rlanmÄ±ÅŸ olabileceÄŸinden force_update
    progress_data = optimization_progress.get_info()
    logger.debug(f"Progress data: {progress_data}")  # Debugging iÃ§in loglama ekleyin
    return progress_data

======================================================================

DOSYA: backend\app\services\calculation_service.py
==================================================
# -*- coding: utf-8 -*-
"""
Calculation Service â€“ 2025â€‘04â€‘18
* Ortak hesaplama mantÄ±ÄŸÄ±nÄ± tranche_utils.py'den kullanarak yeniden dÃ¼zenlenmiÅŸ
* Class B kupon oranÄ± hesaplama optimization ve calculation servisleri arasÄ±nda uyumlu
"""

from typing import List, Dict, Any
import io
import pandas as pd
import numpy as np

from app.models.input_models import CalculationRequest
from app.models.output_models import CalculationResult
from app.utils.tranche_utils import calculate_tranche_results

# --------------------------------------------------------------------------- #
#                               FILE LOADER                                   #
# --------------------------------------------------------------------------- #
def load_excel_data(contents: bytes) -> pd.DataFrame:
    """Excel dosyasÄ±nÄ± okuyup minimum temizliÄŸi yapar."""
    try:
        df = pd.read_excel(io.BytesIO(contents))
        df.rename(columns={"Copyinstallment_date": "installment_date"},
                  inplace=True, errors="ignore")
        df["installment_date"] = pd.to_datetime(
            df["installment_date"], dayfirst=True, errors="coerce"
        )

        required = {"principal_amount", "interest_amount"}
        if not required.issubset(df.columns):
            raise ValueError(f"Missing columns: {required - set(df.columns)}")

        df["cash_flow"] = df["principal_amount"] + df["interest_amount"]
        df["original_cash_flow"] = df["cash_flow"].copy()
        return df

    except Exception as exc:
        raise ValueError(f"Excel processing error: {exc}") from exc


# --------------------------------------------------------------------------- #
#                             MAIN CALCULATION                                #
# --------------------------------------------------------------------------- #
def perform_calculation(df: pd.DataFrame,
                        request: CalculationRequest) -> CalculationResult:
    """ABS nakitâ€‘akÄ±ÅŸÄ± hesabÄ± - ortak tranche_utils mantÄ±ÄŸÄ±nÄ± kullanÄ±r"""

    # --------------------------- GENEL VERÄ°LER ------------------------------ #
    start_date = pd.Timestamp(request.general_settings.start_date)
    ops_exp = request.general_settings.operational_expenses

    # ---------------------------- TRANCHE A -------------------------------- #
    a_maturities = [t.maturity_days for t in request.tranches_a]
    a_base_rates = [t.base_rate for t in request.tranches_a]
    a_spreads = [t.spread for t in request.tranches_a]
    a_reinvest_rates = [t.reinvest_rate for t in request.tranches_a]
    a_nominals = [round(t.nominal / 1_000) * 1_000 for t in request.tranches_a]

    # ---------------------------- TRANCHE B -------------------------------- #
    # â‘  nominal: optimize geldiyse kullan, yoksa %10.178 kuralÄ±
    if request.tranche_b.nominal and request.tranche_b.nominal > 0:
        b_nominal = request.tranche_b.nominal
    else:
        percent_b = 10.17811704
        total_a = sum(a_nominals)
        b_nominal = (total_a * percent_b) / (100 - percent_b)
        b_nominal = round(b_nominal / 1_000) * 1_000

    b_nominal = max(1_000, round(b_nominal / 1_000) * 1_000)

    # â‘¡ diÄŸer B parametreleri
    raw_b_day = request.tranche_b.maturity_days
    b_maturity = min(365, max(1, raw_b_day))          # 1â€‘365 sÄ±nÄ±rÄ±
    b_base_rate = request.tranche_b.base_rate
    b_spread = request.tranche_b.spread
    b_reinvest_rate = request.tranche_b.reinvest_rate

    # ----------------------- ORTAK HESAPLAMA MODÃœLÃœ KULLAN ---------------- #
    results = calculate_tranche_results(
        df, start_date,
        a_maturities, a_base_rates, a_spreads, a_reinvest_rates, a_nominals,
        b_maturity, b_base_rate, b_spread, b_reinvest_rate, b_nominal,
        ops_exp
    )

    # SonuÃ§larÄ± Ã§Ä±ktÄ± formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼r
    return CalculationResult(
        class_a_total=results['class_a_total'],
        class_b_total=results['class_b_total'],
        class_a_principal=results['class_a_principal'],
        class_b_principal=results['class_b_principal'],
        class_a_interest=results['class_a_interest'],
        class_b_coupon=results['class_b_coupon'],
        min_buffer_actual=results['min_buffer_actual'],
        total_principal_paid=results['total_principal_paid'],
        total_loan_principal=results['total_loan_principal'],
        financing_cost=results['financing_cost'],
        tranche_results=results['tranche_results'],
        interest_rate_conversions=results['interest_rate_conversions'],
    )

======================================================================

DOSYA: backend\app\services\optimization_service.py
==================================================
"""
Optimization service for ABS structure analysis - Yeniden DÃ¼zenlenmiÅŸ.
Ortak hesaplama mantÄ±ÄŸÄ±nÄ± tranche_utils.py'den kullanarak uyumlu hale getirilmiÅŸ.
"""
import time
import pandas as pd
import numpy as np
import itertools
from datetime import datetime, timedelta
import random
import traceback
import logging
from typing import Dict, List, Any, Tuple, Optional

from app.models.input_models import OptimizationSettings, GeneralSettings
from app.models.output_models import OptimizationResult
from app.utils.finance_utils import (
    simple_to_compound_annual,
    get_nearest_maturity,
    get_last_cash_flow_day
)
from app.utils.cash_flow_utils import (
    assign_cash_flows_to_tranches,
    calculate_totals
)
from app.utils.tranche_utils import (
    calculate_tranche_results,
    adjust_class_a_nominals_for_target_coupon
)

# Configure logger
logger = logging.getLogger(__name__)

class OptimizationProgress:
    """Class to track and report optimization progress"""
    def __init__(self):
        self.reset()
        
    def reset(self):
        """Reset all progress tracking variables"""
        self.current_step = 0
        self.total_steps = 100
        self.current_phase = "Initializing"
        self.status_message = "Starting optimization..."
        self.progress = 0
        self.last_update_time = time.time()
        self.start_time = time.time()
        logger.info("Progress tracker reset")
        
    def update(self, step=None, total=None, phase=None, message=None):
        """Update progress information"""
        current_time = time.time()
        
        # Update more frequently
        force_update = (current_time - self.last_update_time) > 0.2
        
        if step is not None:
            self.current_step = step
        if total is not None:
            self.total_steps = total
        if phase is not None:
            self.current_phase = phase
        if message is not None:
            self.status_message = message
            
        # Calculate percentage
        if self.total_steps > 0:
            new_progress = min(99, int((self.current_step / self.total_steps) * 100))
            if self.current_phase == "Complete" or self.current_phase == "Error":
                new_progress = 100  # Set to 100% when complete or error
            
            progress_changed = new_progress != self.progress
            self.progress = new_progress
        
        # Log progress updates
        if phase is not None or message is not None or progress_changed or force_update:
            elapsed = current_time - self.start_time
            logger.info(f"Progress: {self.progress}% - {self.current_phase} - {self.status_message} (elapsed: {elapsed:.1f}s)")
            self.last_update_time = current_time
        
    def get_info(self):
        """Get current progress information with additional data"""
        current_time = time.time()
        elapsed = current_time - self.start_time
        
        return {
            "progress": self.progress,
            "phase": self.current_phase,
            "message": self.status_message,
            "step": self.current_step,
            "total_steps": self.total_steps,
            "timestamp": current_time,
            "elapsed_seconds": elapsed,
            "start_time": self.start_time
        }

# Create the global optimization_progress instance
optimization_progress = OptimizationProgress()

def evaluate_params(
    df: pd.DataFrame,
    start_date: pd.Timestamp,
    maturities: List[int], 
    nominals: List[float], 
    class_b_maturity: int, 
    maturity_to_base_rate_A: Dict[int, float], 
    maturity_to_reinvest_rate_A: Dict[int, float],
    class_b_base_rate: float, 
    class_b_reinvest_rate: float,
    target_class_b_percent: float, 
    class_b_percent_deviation: float,
    target_class_b_coupon_rate: float, 
    min_buffer: float,
    ops_expenses: float = 0.0
) -> Dict[str, Any]:
    """Helper function to evaluate a set of parameters using shared calculate_tranche_results logic"""
    # Verify input parameters
    if not maturities or not nominals or len(maturities) != len(nominals):
        return {
            'is_valid': False,
            'score': 0,
            'results': None,
            'error': "Invalid input dimensions",
            'b_nominal': 0,
            'class_b_percent': 0
        }
    
    # Ensure types are correct
    maturities = [int(m) for m in maturities]
    nominals = list(nominals)
    
    # Round nominals to nearest 1000 and ensure no zeros
    nominals = [max(1000, round(n / 1000) * 1000) for n in nominals]
    
    # Get rates from lookup tables with fallback values
    available_lookup_keys = list(maturity_to_base_rate_A.keys())
    base_rates = [maturity_to_base_rate_A.get(
        get_nearest_maturity(m, available_lookup_keys), 42.0) for m in maturities]
    
    reinvest_rates = [maturity_to_reinvest_rate_A.get(
        get_nearest_maturity(m, list(maturity_to_reinvest_rate_A.keys())), 30.0) for m in maturities]
    
    # Default all spreads to 0
    spreads = [0.0] * len(maturities)
    
    # Calculate total Class A nominal
    total_a_nominal = sum(nominals)
    if total_a_nominal <= 0:
        return {
            'is_valid': False,
            'score': 0,
            'results': None,
            'error': "Total Class A nominal must be positive",
            'b_nominal': 0,
            'class_b_percent': 0
        }
    
    # Calculate Class B nominal based on target percentage
    target_b_share = target_class_b_percent / 100
    class_b_nominal = (total_a_nominal * target_b_share) / (1 - target_b_share)
    
    # Round to nearest 1000
    class_b_nominal = round(class_b_nominal / 1_000) * 1_000
    
    # Calculate actual Class B percentage
    total_nominal = total_a_nominal + class_b_nominal
    actual_class_b_percent = (class_b_nominal / total_nominal) * 100
    
    # If the actual percentage is outside allowed range, adjust the nominal value
    min_class_b_percent = max(0.1, target_class_b_percent - class_b_percent_deviation)
    max_class_b_percent = min(50, target_class_b_percent + class_b_percent_deviation)
    
    if actual_class_b_percent < min_class_b_percent or actual_class_b_percent > max_class_b_percent:
        logger.debug(f"Adjusting Class B nominal to meet target percent. Current: {actual_class_b_percent:.2f}%, Target: {target_class_b_percent:.2f}%Â±{class_b_percent_deviation:.2f}%")
        
        # Calculate corrected B share
        if actual_class_b_percent < min_class_b_percent:
            corrected_b_share = min_class_b_percent / 100
        else:
            corrected_b_share = max_class_b_percent / 100
        
        # Recalculate B nominal
        class_b_nominal = (total_a_nominal * corrected_b_share) / (1 - corrected_b_share)
        class_b_nominal = round(class_b_nominal / 1_000) * 1_000
        
        # Recalculate actual percentage
        total_nominal = total_a_nominal + class_b_nominal
        actual_class_b_percent = (class_b_nominal / total_nominal) * 100
        
        logger.debug(f"Adjusted Class B percent to: {actual_class_b_percent:.2f}%")
    
    try:
        # Use shared calculation logic
        result = calculate_tranche_results(
            df, start_date,
            maturities, base_rates, spreads, reinvest_rates, nominals,
            class_b_maturity, class_b_base_rate, 0.0, class_b_reinvest_rate, class_b_nominal,
            ops_expenses
        )
        
        # Extract relevant metrics
        class_a_principal = result['class_a_principal']
        class_b_principal = result['class_b_principal']
        class_a_interest = result['class_a_interest']
        class_b_coupon = result['class_b_coupon']
        class_a_total = result['class_a_total']
        class_b_total = result['class_b_total']
        min_buffer_actual = result['min_buffer_actual']
        effective_coupon_rate = result['effective_coupon_rate']
        direct_coupon_rate = result['direct_coupon_rate']
        
        # Check if valid (meets minimum buffer requirement)
        is_valid = min_buffer_actual >= min_buffer
        
        # Check if Class B percentage is within acceptable range
        class_b_percent_diff = abs(actual_class_b_percent - target_class_b_percent)
        is_class_b_percent_valid = min_class_b_percent <= actual_class_b_percent <= max_class_b_percent
        
        # A solution is valid only if it meets both buffer and Class B percentage requirements
        is_valid = is_valid and is_class_b_percent_valid
        
        # Calculate coupon rate difference from target
        coupon_rate_diff = abs(effective_coupon_rate - target_class_b_coupon_rate)
        
        # Collect results
        result_dict = {
            'class_a_principal': class_a_principal,
            'class_b_principal': class_b_principal,
            'class_a_interest': class_a_interest, 
            'class_b_coupon': class_b_coupon,
            'class_a_total': class_a_total,
            'class_b_total': class_b_total,
            'min_buffer_actual': min_buffer_actual,
            'total_principal': class_a_principal + class_b_principal,
            'class_b_coupon_rate': effective_coupon_rate,
            'direct_coupon_rate': direct_coupon_rate,
            'class_b_percent': actual_class_b_percent,
            'class_b_percent_diff': class_b_percent_diff,
            'coupon_rate_diff': coupon_rate_diff,
            'num_a_tranches': len(maturities)
        }
        
        # Scoring with balanced weighting between coupon rate and Class B percentage
        coupon_rate_weight = np.exp(-coupon_rate_diff / 3.0)
        class_b_percent_weight = np.exp(-class_b_percent_diff / 2.0)
        combined_weight = (coupon_rate_weight * 0.6) + (class_b_percent_weight * 0.4)
        weighted_principal = result_dict['total_principal'] * combined_weight
        
        return {
            'is_valid': is_valid,
            'score': weighted_principal if is_valid else 0,
            'results': result_dict if is_valid else None,
            'b_nominal': class_b_nominal,
            'class_b_percent': actual_class_b_percent
        }
    
    except Exception as e:
        # Return invalid result on any error
        logger.error(f"Error in evaluate_params: {str(e)}")
        logger.debug(traceback.format_exc())
        return {
            'is_valid': False,
            'score': 0,
            'results': None,
            'error': str(e),
            'b_nominal': class_b_nominal,
            'class_b_percent': actual_class_b_percent
        }

def perform_optimization(df: pd.DataFrame, general_settings: GeneralSettings, optimization_settings: OptimizationSettings) -> OptimizationResult:
    """Perform ABS structure optimization with improved coupon rate and Class B percentage targeting
    
    Args:
        df: DataFrame containing cash flow data
        general_settings: General settings for the optimization
        optimization_settings: Optimization-specific settings
        
    Returns:
        OptimizationResult object with the optimized structure
    """
    
    # Initialize progress tracking
    optimization_progress.update(step=0, total=100, 
                                phase="Standard Optimization", 
                                message="Starting standard optimization...")
    
    # Extract settings
    min_a_tranches, max_a_tranches = optimization_settings.a_tranches_range
    maturity_range = optimization_settings.maturity_range
    maturity_step = optimization_settings.maturity_step
    
    # Use the new Class B percentage targeting parameters 
    target_class_b_percent = getattr(optimization_settings, "min_class_b_percent", 15.0)
    class_b_percent_deviation = getattr(optimization_settings, "class_b_percent_deviation", 1.0)
    target_class_b_coupon_rate = optimization_settings.target_class_b_coupon_rate
    additional_days = optimization_settings.additional_days_for_class_b
    
    # Log the actual values used for debugging
    logger.info(f"Target Class B percent: {target_class_b_percent}, deviation: {class_b_percent_deviation}")
    
    # Get selected strategies - use all if not specified
    selected_strategies = getattr(optimization_settings, "selected_strategies", 
                                ["equal", "increasing", "decreasing", "middle_weighted"])
    
    optimization_progress.update(step=5, 
                               message=f"Selected strategies: {', '.join(selected_strategies)}")
    
    # Set maximum allowed difference for coupon rate - tightened for better matching
    max_allowed_diff = 0.5  # Maximum 0.5% difference (reduced from 1.0%)
    
    optimization_progress.update(step=5, 
                               message=f"Target coupon rate: {target_class_b_coupon_rate}%, Target Class B: {target_class_b_percent}Â±{class_b_percent_deviation}%")
    
    start_date = pd.Timestamp(general_settings.start_date)
    ops_expenses = general_settings.operational_expenses
    min_buffer = general_settings.min_buffer
    
    # Get original parameters for Class A from the example data
    original_maturities_A = [61, 120, 182, 274]
    original_base_rates_A = [45.6, 44.5, 43.3, 42.5]
    original_reinvest_rates_A = [40.0, 37.25, 32.5, 30.0]
    
    # Class B values (fallback values)
    class_b_maturity_orig = 300
    class_b_base_rate_orig = 0.0
    class_b_reinvest_rate_orig = 25.5
    
    optimization_progress.update(step=10, 
                               message="Creating rate lookup tables and preparing data...")
    
    # Create rate lookup tables for Class A
    maturity_to_base_rate_A = dict(zip(original_maturities_A, original_base_rates_A))
    maturity_to_reinvest_rate_A = dict(zip(original_maturities_A, original_reinvest_rates_A))
    
    # Calculate total nominal amount (from example)
    total_a_nominal = 1765000000  # Example from original code
    
    # Define search space
    num_a_tranches_options = range(min_a_tranches, max_a_tranches + 1)
    possible_maturities = list(range(maturity_range[0], maturity_range[1] + 1, maturity_step))
    
    optimization_progress.update(step=15, 
                               message=f"Using tranches from {min_a_tranches} to {max_a_tranches}")
    
    # Dictionaries to track best results for each strategy
    strategy_names = ["equal", "increasing", "decreasing", "middle_weighted"]
    
    best_params_by_strategy = {strategy: None for strategy in strategy_names}
    best_results_by_strategy = {strategy: None for strategy in strategy_names}
    best_weighted_principal_by_strategy = {strategy: 0 for strategy in strategy_names}
    best_coupon_rate_diff_by_strategy = {strategy: float('inf') for strategy in strategy_names}
    best_class_b_percent_diff_by_strategy = {strategy: float('inf') for strategy in strategy_names}
    
    # Find last cash flow day
    last_cash_flow_day = get_last_cash_flow_day(df, start_date)
    
    optimization_progress.update(step=20, 
                               message=f"Last cash flow day: {last_cash_flow_day}")
    
    # Create a temporary copy of dataframe for calculations
    df_temp = df.copy()
    df_temp['cash_flow'] = df_temp['original_cash_flow'].copy()
    
    # Fix: Ensure target_date uses standard hyphen
    target_date = pd.Timestamp('2025-02-16')
    target_rows = df_temp[df_temp['installment_date'].dt.date == target_date.date()]
    
    if not target_rows.empty:
        t_idx = target_rows.index[0]
        orig_cf = df_temp.at[t_idx, 'cash_flow']
        new_cf = max(0, orig_cf - ops_expenses)
        df_temp.at[t_idx, 'cash_flow'] = new_cf
    
    # Initialize progress counter
    current_iteration = 0
    
    # Calculate total iterations (approximate)
    total_maturity_combinations = 0
    for num_a_tranches in num_a_tranches_options:
        # Rough estimate of combinations, will be reduced later
        total_maturity_combinations += min(1000, len(list(itertools.combinations(possible_maturities, num_a_tranches))))
    
    # 4 strategies per maturity combo
    total_iterations = total_maturity_combinations * len(selected_strategies)
    optimization_progress.update(message=f"Estimated iterations: {total_iterations}")
    
    # Progress tracking variables
    current_phase = "Testing Configurations"
    optimization_progress.update(phase=current_phase)
    
    # Fix: Ensure class_b_maturity is at least 1
    # Calculate Class B maturity as Last Cash Flow Day + Additional Days
    class_b_maturity = max(1, min(365, last_cash_flow_day + additional_days))
    
    # Loop through Class A tranche counts
    for num_a_tranches_idx, num_a_tranches in enumerate(num_a_tranches_options):
        tranche_progress_base = 20 + (num_a_tranches_idx * 15)  # 15% progress per tranche count
        
        optimization_progress.update(
            step=tranche_progress_base,
            message=f"Testing with {num_a_tranches} Class A tranches"
        )
        
        # Minimum gap between consecutive maturities
        min_gap = 15  # In days
        
        # Create sequential maturity combinations
        maturity_combinations = []
        for maturities in itertools.combinations(possible_maturities, num_a_tranches):
            # Check if sorted and with minimum gap
            sorted_maturities = sorted(maturities)
            if all(sorted_maturities[i+1] - sorted_maturities[i] >= min_gap for i in range(len(sorted_maturities)-1)):
                maturity_combinations.append(sorted_maturities)
        
        # More intelligent sampling of maturity combinations
        # If too many combinations, use stratified sampling
        max_samples = 20  # Reduced from 30 to 20 for faster processing
        if len(maturity_combinations) > max_samples:
            # Sort by average maturity and select samples from different parts of the distribution
            sorted_combinations = sorted(maturity_combinations, 
                                        key=lambda x: sum(x)/len(x))
            step = len(sorted_combinations) // max_samples
            sampled_indices = [i * step for i in range(max_samples)]
            maturity_combinations = [sorted_combinations[i] for i in sampled_indices]
        
        # Calculate progress step for this set of combinations
        combo_count = len(maturity_combinations)
        combo_progress_step = 10 / max(1, combo_count)
        
        # Track consecutive failures to optimize performance
        consecutive_failures = 0
        max_consecutive_failures = 10  # Fast-fail threshold
        
        # Process maturity combinations
        for combo_idx, maturities in enumerate(maturity_combinations):
            combo_progress = tranche_progress_base + (combo_idx * combo_progress_step)
            
            # Skip updates for most combinations to reduce overhead
            if combo_idx % 5 == 0:  # Update every 5 combinations
                optimization_progress.update(
                    step=int(combo_progress),
                    message=f"Testing maturity combination {combo_idx+1}/{combo_count}: {maturities}"
                )
            
            # Assign rates based on nearest original Class A maturity
            a_base_rates = []
            a_reinvest_rates = []
            for m in maturities:
                nearest = get_nearest_maturity(m, original_maturities_A)
                a_base_rates.append(maturity_to_base_rate_A[nearest])
                a_reinvest_rates.append(maturity_to_reinvest_rate_A[nearest])
            
            # Use the base rate of the longest Class A tranche for Class B
            # but always use the original reinvest rate from UI
            if len(a_base_rates) > 0:
                b_base_rate = a_base_rates[-1]  # Use the base rate of the longest-maturity Class A tranche
                b_reinvest_rate = class_b_reinvest_rate_orig  # Always use original reinvest rate
            else:
                b_base_rate = class_b_base_rate_orig
                b_reinvest_rate = class_b_reinvest_rate_orig
            
            # Different nominal distribution strategies
            distribution_strategies = [
                strategy for strategy in selected_strategies 
                if strategy in ["equal", "increasing", "decreasing", "middle_weighted"]
            ]
            
            # If no valid strategies, use all
            if not distribution_strategies:
                distribution_strategies = ["equal", "increasing", "decreasing", "middle_weighted"]
                logger.warning(f"No valid strategies selected, using all: {distribution_strategies}")
            
            # Reset consecutive failures counter for each new maturity combination
            consecutive_failures = 0
            
            # Process each strategy
            for strategy in distribution_strategies:
                # Calculate required Class B nominal to achieve target percentage
                # Formula: class_b_nominal = total_a_nominal * (target_percent / (100 - target_percent))
                target_b_share = target_class_b_percent / 100
                class_b_nominal = (total_a_nominal * target_b_share) / (1 - target_b_share)
                
                # Round to nearest 1000
                class_b_nominal = round(class_b_nominal / 1000) * 1000
                
                # Calculate total nominal amount based on Class A and B
                remaining_nominal = total_a_nominal
                
                # Distribute nominal amounts based on strategy
                if strategy == "equal":
                    a_nominals = [remaining_nominal / num_a_tranches] * num_a_tranches
                    
                elif strategy == "increasing":
                    # Weight by maturity days
                    weights = np.array(maturities)
                    a_nominals = (weights / weights.sum()) * remaining_nominal
                    
                elif strategy == "decreasing":
                    # Inverse weight by maturity days
                    weights = 1 / np.array(maturities)
                    a_nominals = (weights / weights.sum()) * remaining_nominal
                    
                elif strategy == "middle_weighted":
                    # Give more weight to middle tranches
                    if num_a_tranches >= 3:
                        weights = np.ones(num_a_tranches)
                        mid_idx = num_a_tranches // 2
                        weights[mid_idx] = 1.5
                        if num_a_tranches > 3:
                            weights[mid_idx-1] = 1.3
                            weights[mid_idx+1] = 1.3
                        a_nominals = (weights / weights.sum()) * remaining_nominal
                    else:
                        a_nominals = [remaining_nominal / num_a_tranches] * num_a_tranches
                else:
                    # Invalid strategy, use equal distribution as fallback
                    logger.warning(f"Unknown strategy: {strategy}, using equal distribution")
                    a_nominals = [remaining_nominal / num_a_tranches] * num_a_tranches
                
                # Round to nearest 1000
                a_nominals = [round(n / 1000) * 1000 for n in a_nominals]
                
                # Ensure sum equals the remaining nominal
                adjustment = (remaining_nominal - sum(a_nominals)) / num_a_tranches
                a_nominals = [n + adjustment for n in a_nominals]
                a_nominals = [round(n / 1000) * 1000 for n in a_nominals]
                
                # Make final adjustment to last tranche to ensure exact total
                a_nominals[-1] += remaining_nominal - sum(a_nominals)
                
                # Now adjust the nominals to achieve target coupon rate - use shared utility function
                try:
                    # Generate default spreads (all zeros)
                    a_spreads = [0.0] * len(a_nominals)
                    b_spread = 0.0
                    
                    adjusted_a_nominals, adjustment_success, adjusted_b_percent = adjust_class_a_nominals_for_target_coupon(
                        df_temp, start_date,
                        maturities, a_nominals, a_base_rates, a_spreads, a_reinvest_rates,
                        class_b_maturity, b_base_rate, b_spread, b_reinvest_rate, class_b_nominal,
                        target_class_b_coupon_rate, target_class_b_percent, min_buffer, ops_expenses,
                        max_allowed_diff, class_b_percent_deviation
                    )
                    
                    if adjustment_success:
                        a_nominals = adjusted_a_nominals
                        # Reset consecutive failures counter on success
                        consecutive_failures = 0
                    else:
                        # Increment consecutive failures counter
                        consecutive_failures += 1
                except Exception as e:
                    logger.error(f"Error adjusting nominals: {str(e)}")
                    consecutive_failures += 1
                    # Continue with original nominals
                
                # Evaluate the result with the shared evaluate_params function
                eval_result = evaluate_params(
                    df_temp, start_date,
                    maturities, a_nominals, class_b_maturity,
                    maturity_to_base_rate_A, maturity_to_reinvest_rate_A,
                    b_base_rate, b_reinvest_rate,
                    target_class_b_percent, class_b_percent_deviation,
                    target_class_b_coupon_rate, min_buffer,
                    ops_expenses
                )
                
                # Check if valid and meets buffer requirement
                if eval_result['is_valid'] and eval_result['results']:
                    result_dict = eval_result['results']
                    total_principal = result_dict['total_principal']
                    class_b_coupon_rate = result_dict['class_b_coupon_rate']
                    min_buffer_actual = result_dict['min_buffer_actual']
                    class_b_percent = result_dict['class_b_percent']
                    class_b_percent_diff = result_dict['class_b_percent_diff']
                    coupon_rate_diff = result_dict['coupon_rate_diff']
                    
                    # Improved scoring function combining both objectives
                    # Exponential penalty for rate difference
                    coupon_rate_weight = np.exp(-coupon_rate_diff / 2.0)
                    # Exponential penalty for Class B percentage difference
                    class_b_percent_weight = np.exp(-class_b_percent_diff / 2.0)
                    # Combined weight with 60% emphasis on coupon rate, 40% on Class B percentage
                    combined_weight = (coupon_rate_weight * 0.6) + (class_b_percent_weight * 0.4)
                    
                    weighted_principal = total_principal * combined_weight
                    
                    # Check if this is the best solution for this strategy
                    # Use a balanced approach between coupon rate and Class B percentage matching
                    # with a slight preference for coupon rate matching
                    is_better = False
                    
                    # Determine if this solution is better based on combined criteria
                    if coupon_rate_diff <= best_coupon_rate_diff_by_strategy[strategy] * 1.1 and \
                       class_b_percent_diff <= best_class_b_percent_diff_by_strategy[strategy] * 1.1:
                        # If both metrics are comparable or better, use weighted principal as tiebreaker
                        if weighted_principal > best_weighted_principal_by_strategy[strategy]:
                            is_better = True
                    elif coupon_rate_diff <= max_allowed_diff and \
                         class_b_percent_diff <= class_b_percent_deviation and \
                         weighted_principal > best_weighted_principal_by_strategy[strategy] * 1.15:
                        # If within allowed differences and significantly better weighted principal
                        is_better = True
                    elif (coupon_rate_diff < best_coupon_rate_diff_by_strategy[strategy] * 0.7 or \
                          class_b_percent_diff < best_class_b_percent_diff_by_strategy[strategy] * 0.7) and \
                         weighted_principal > best_weighted_principal_by_strategy[strategy] * 0.9:
                        # If one metric is much better without sacrificing too much weighted principal
                        is_better = True
                    
                    if is_better:
                        best_coupon_rate_diff_by_strategy[strategy] = coupon_rate_diff
                        best_class_b_percent_diff_by_strategy[strategy] = class_b_percent_diff
                        best_weighted_principal_by_strategy[strategy] = weighted_principal
                        
                        # Reset consecutive failures on finding a good solution
                        consecutive_failures = 0
                        
                        best_params_by_strategy[strategy] = {
                            'num_a_tranches': num_a_tranches,
                            'a_maturity_days': list(maturities),
                            'a_base_rates': a_base_rates,
                            'a_reinvest_rates': a_reinvest_rates,
                            'a_nominal_amounts': a_nominals,
                            'b_maturity_days': [class_b_maturity],
                            'b_base_rates': [b_base_rate],
                            'b_reinvest_rates': [b_reinvest_rate],
                            'b_nominal': [class_b_nominal],
                            'strategy': strategy,
                            'last_cash_flow_day': last_cash_flow_day,
                            'added_days': additional_days,
                            'class_b_percent': class_b_percent,
                            'direct_coupon_rate': result_dict['direct_coupon_rate'],
                            'effective_coupon_rate': result_dict['class_b_coupon_rate']
                        }
                        
                        best_results_by_strategy[strategy] = {
                            'class_a_principal': result_dict['class_a_principal'],
                            'class_b_principal': result_dict['class_b_principal'],
                            'class_a_interest': result_dict['class_a_interest'],
                            'class_b_coupon': result_dict['class_b_coupon'],
                            'class_a_total': result_dict['class_a_total'],
                            'class_b_total': result_dict['class_b_total'],
                            'min_buffer_actual': min_buffer_actual,
                            'total_principal': total_principal,
                            'class_b_coupon_rate': class_b_coupon_rate,
                            'direct_coupon_rate': result_dict['direct_coupon_rate'],
                            'target_class_b_coupon_rate': target_class_b_coupon_rate,
                            'coupon_rate_diff': coupon_rate_diff,
                            'class_b_percent': class_b_percent,
                            'target_class_b_percent': target_class_b_percent,
                            'class_b_percent_diff': class_b_percent_diff,
                            'class_b_base_rate': b_base_rate,
                            'num_a_tranches': num_a_tranches
                        }
                        
                        optimization_progress.update(
                            message=f"Found better solution for {strategy}: coupon_rate={class_b_coupon_rate:.2f}%, " +
                                   f"diff={coupon_rate_diff:.2f}%, Class B={class_b_percent:.2f}%, " +
                                   f"total_principal={total_principal:,.2f}"
                        )
                
                # Update iteration counter
                current_iteration += 1
                
                # Update progress periodically
                if current_iteration % 20 == 0:  # Reduced frequency of updates
                    progress_percent = min(80, 20 + int(current_iteration / total_iterations * 60))
                    optimization_progress.update(
                        step=progress_percent,
                        message=f"Completed {current_iteration} iterations out of approximately {total_iterations}"
                    )
                
                # Check if we should skip remaining strategies for this maturity combination
                if consecutive_failures >= max_consecutive_failures:
                    optimization_progress.update(
                        message=f"Skipping remaining strategies for this maturity combination due to {consecutive_failures} consecutive failures"
                    )
                    break
            
            # Early termination if we've found very good solutions across multiple strategies
            good_strategies_count = sum(1 for strat in strategy_names if 
                                      best_coupon_rate_diff_by_strategy[strat] <= 0.3 and
                                      best_class_b_percent_diff_by_strategy[strat] <= 0.5)
            if good_strategies_count >= 2 and combo_idx > combo_count // 4:
                optimization_progress.update(
                    message=f"Found {good_strategies_count} very good solutions, ending search early"
                )
                break
    
    # Update progress to preparing results phase
    optimization_progress.update(
        step=85,
        phase="Finalizing Results",
        message="Comparing strategies and preparing results..."
    )
    
    # Compare valid strategies
    valid_strategies = {k: v for k, v in best_results_by_strategy.items() if v is not None}
    
    if not valid_strategies:
        # No valid solution found
        optimization_progress.update(
            step=90,
            message="No valid configuration found. Try adjusting optimization parameters."
        )
        raise ValueError("No valid configuration found. Try adjusting optimization parameters.")
    
    # Improved strategy selection with balanced weighting between coupon rate and Class B percentage
    # Find best overall strategy prioritizing both objectives
    best_overall_strategy = min(
        valid_strategies.items(),
        key=lambda x: (
            # First sort by normalized combined objective 
            (x[1]['coupon_rate_diff'] / target_class_b_coupon_rate * 0.6) + 
            (x[1]['class_b_percent_diff'] / target_class_b_percent * 0.4),
            # Then by negative principal (higher principal is better)
            -x[1]['total_principal']
        )
    )[0]
    
    # Get best parameters and results
    best_strategy = best_overall_strategy
    best_params = best_params_by_strategy[best_strategy]
    best_results = best_results_by_strategy[best_strategy]
    
    optimization_progress.update(
        step=95,
        message=f"Selected best strategy: {best_strategy}, coupon_rate: {best_results['class_b_coupon_rate']:.2f}%, " +
               f"diff: {best_results['coupon_rate_diff']:.2f}%, Class B: {best_results['class_b_percent']:.2f}%, " +
               f"total_principal: {best_results['total_principal']:,.2f}"
    )
    
    # Extract values for the result
    class_a_maturities = best_params['a_maturity_days']
    class_a_nominals = best_params['a_nominal_amounts']
    class_a_rates = best_params['a_base_rates']
    class_a_reinvest = best_params['a_reinvest_rates']
    
    class_b_maturity = best_params['b_maturity_days'][0]
    class_b_rate = best_params['b_base_rates'][0]
    class_b_reinvest = best_params['b_reinvest_rates'][0]
    class_b_nominal = best_params['b_nominal'][0]
    class_b_percent = best_params['class_b_percent']
    
    # Debug logging
    print(f"*** OPTIMIZATION RESULTS ***")
    print(f"Class B coupon rate (effective): {best_results['class_b_coupon_rate']}")
    print(f"Class B coupon rate (direct): {best_params.get('direct_coupon_rate', best_results['direct_coupon_rate'])}")
    print(f"Class B maturity: {class_b_maturity}")
    
    # Final progress update
    optimization_progress.update(
        step=100,
        phase="Complete",
        message="Optimization completed successfully."
    )
    
    # Return the optimization result with enhanced data
    return OptimizationResult(
        best_strategy=best_strategy,
        class_a_maturities=class_a_maturities,
        class_a_nominals=class_a_nominals,
        class_a_rates=class_a_rates,
        class_a_reinvest=class_a_reinvest,
        class_b_maturity=class_b_maturity,
        class_b_rate=class_b_rate,
        class_b_reinvest=class_b_reinvest,
        class_b_nominal=class_b_nominal,
        class_b_percent=class_b_percent,
        class_b_coupon_rate=best_results['class_b_coupon_rate'],
        direct_class_b_coupon_rate=best_results['direct_coupon_rate'],
        min_buffer_actual=best_results['min_buffer_actual'],
        last_cash_flow_day=last_cash_flow_day,
        additional_days=additional_days,
        results_by_strategy={k: v for k, v in best_results_by_strategy.items() if v is not None}
    )

def perform_genetic_optimization(df: pd.DataFrame, general_settings: GeneralSettings, optimization_settings: OptimizationSettings) -> OptimizationResult:
    """Genetic algorithm optimization with improved Class B percentage targeting - 
    Uses shared calculation logic from tranche_utils"""
    try:
        # Initialize progress tracking
        optimization_progress.update(step=0, total=100, 
                                    phase="Genetic Optimization", 
                                    message="Starting genetic algorithm optimization...")
        
        logger.info("Starting genetic algorithm optimization...")
        
        # Basic parameters
        start_date = pd.Timestamp(general_settings.start_date)
        ops_expenses = general_settings.operational_expenses
        min_buffer = general_settings.min_buffer
        
        # Use the new Class B percentage targeting parameters
        target_class_b_percent = getattr(optimization_settings, "min_class_b_percent", 15.0)
        
        # Use the tighter class_b_percent_deviation value (default 1.0)
        class_b_percent_deviation = getattr(optimization_settings, "class_b_percent_deviation", 1.0)
        
        # Log the actual values used for debugging
        logger.info(f"Genetic: Target Class B percent: {target_class_b_percent}, deviation: {class_b_percent_deviation}")
        
        target_class_b_coupon_rate = optimization_settings.target_class_b_coupon_rate
        additional_days = optimization_settings.additional_days_for_class_b
        population_size = getattr(optimization_settings, "population_size", 50)
        num_generations = getattr(optimization_settings, "num_generations", 40)
        
        optimization_progress.update(step=5, 
                                    message=f"Population size: {population_size}, generations: {num_generations}, " +
                                           f"Target Class B: {target_class_b_percent}Â±{class_b_percent_deviation}%")
        
        logger.info(f"Parameters: population_size={population_size}, num_generations={num_generations}, " +
                   f"target_class_b_percent={target_class_b_percent}Â±{class_b_percent_deviation}%")
        
        # Get last cash flow day
        last_cash_flow_day = get_last_cash_flow_day(df, start_date)
        
        # Update progress to 10%
        optimization_progress.update(step=10, 
                                    message=f"Last cash flow day: {last_cash_flow_day}")
        
        # Fix: Ensure class_b_maturity is at least 1 to avoid division by zero
        # Class B maturity as Last Cash Flow Day + Additional Days, capped at 365
        class_b_maturity = max(1, min(365, last_cash_flow_day + additional_days))
        
        # Get original parameters for Class A 
        original_maturities_A = [61, 120, 182, 274]
        original_base_rates_A = [45.6, 44.5, 43.3, 42.5]
        original_reinvest_rates_A = [40.0, 37.25, 32.5, 30.0]
        
        # Class B values
        class_b_base_rate_orig = 0.0
        class_b_reinvest_rate_orig = 25.5
        
        # Create rate lookup tables for Class A
        maturity_to_base_rate_A = dict(zip(original_maturities_A, original_base_rates_A))
        maturity_to_reinvest_rate_A = dict(zip(original_maturities_A, original_reinvest_rates_A))
        
        # Update progress to 15%
        optimization_progress.update(step=15, 
                                    message="Preparing optimization data...")
        
        # Create temporary dataframe for calculation
        df_temp = df.copy()
        df_temp['cash_flow'] = df_temp['original_cash_flow'].copy()
        
        # Fix: Ensure target_date uses standard hyphen
        target_date = pd.Timestamp('2025-02-16')
        target_rows = df_temp[df_temp['installment_date'].dt.date == target_date.date()]
        
        if not target_rows.empty:
            t_idx = target_rows.index[0]
            orig_cf = df_temp.at[t_idx, 'cash_flow']
            new_cf = max(0, orig_cf - ops_expenses)
            df_temp.at[t_idx, 'cash_flow'] = new_cf
        
        # Total A nominal
        total_a_nominal = 1765000000
        
        # Fixed number of tranches
        num_a_tranches = 4
        
        # Parameter boundaries
        min_maturity = optimization_settings.maturity_range[0]
        max_maturity = optimization_settings.maturity_range[1]
        
        # Initialize population with valid individuals
        population = []
        min_gap = 15  # Minimum days between maturities
        
        optimization_progress.update(step=20, 
                                   phase="Initializing Population",
                                   message="Creating initial population...")
        
        logger.info("Initializing population...")
        
        # Function to create a valid individual with Class B percentage gene
        def create_valid_individual():
            # Generate valid maturities - ensure they are integers
            maturities = []
            maturities.append(random.randint(min_maturity, min_maturity + 60))
            
            for j in range(1, num_a_tranches):
                prev_maturity = maturities[j-1]
                min_new = prev_maturity + min_gap
                max_new = min(max_maturity, prev_maturity + 120)  # Cap max gap
                
                if min_new > max_new:
                    min_new = max_new
                
                maturities.append(random.randint(min_new, max_new))
            
            # Ensure all maturities are integers
            maturities = [int(m) for m in maturities]
            
            # Random weights
            weights = [random.random() for _ in range(num_a_tranches)]
            total_weight = sum(weights)
            weights = [w / total_weight for w in weights]
            
            # Convert to nominals
            nominals = [w * total_a_nominal for w in weights]
            
            # Random Class B percentage within allowed range
            # This is a key enhancement in the genetic algorithm
            min_percent = max(0.1, target_class_b_percent - class_b_percent_deviation)
            max_percent = min(50, target_class_b_percent + class_b_percent_deviation)
            random_b_percent = random.uniform(min_percent, max_percent)
            
            # Calculate Class B nominal based on random percentage
            # Formula: class_b_nominal = total_a_nominal * (b_percent / (100 - b_percent))
            b_share = random_b_percent / 100
            class_b_nominal = (total_a_nominal * b_share) / (1 - b_share)
            
            # Round to nearest 1000
            class_b_nominal = round(class_b_nominal / 1000) * 1000
            
            # Calculate actual Class B percentage
            total_nominal = total_a_nominal + class_b_nominal
            actual_b_percent = (class_b_nominal / total_nominal) * 100
            
            return {
                'maturities': maturities,
                'nominals': nominals,
                'class_b_nominal': class_b_nominal,
                'class_b_percent': actual_b_percent,
                'fitness': 0  # Will be evaluated
            }
        
        # Create initial population
        failure_count = 0
        for i in range(population_size):
            try:
                individual = create_valid_individual()
                population.append(individual)
                
                # Update progress periodically
                if i % 10 == 0:
                    optimization_progress.update(
                        step=20 + int((i / population_size) * 5),
                        message=f"Initializing population: {i+1}/{population_size}"
                    )
            except Exception as e:
                logger.error(f"Error creating individual {i}: {str(e)}")
                failure_count += 1
                # Try again
                if failure_count < 50:  # Limit retries
                    i -= 1  # Retry this index
                else:
                    logger.error("Too many failures creating population, proceeding with limited population")
                    break
        
        # Ensure we have at least some individuals
        if len(population) < 5:
            optimization_progress.update(
                phase="Error",
                message="Failed to create sufficient initial population"
            )
            raise ValueError("Failed to create sufficient initial population")
        
        # Update progress to 25%
        optimization_progress.update(step=25, 
                                   phase="Evolution",
                                   message="Starting genetic algorithm evolution...")
        
        # Evolution loop
        best_individual = None
        best_fitness = -float('inf')
        
        logger.info("Starting genetic algorithm evolution...")
        
        generation_progress_step = 50 / num_generations  # 50% of progress for generations
        
        # Tournament selection function
        def tournament_select(pop, tournament_size=3):
            if not pop:
                raise ValueError("Empty population for tournament selection")
                
            contestants = random.sample(pop, min(tournament_size, len(pop)))
            return max(contestants, key=lambda x: x.get('fitness', -float('inf')))
        
        for generation in range(num_generations):
            # Update progress for each generation
            generation_progress = 25 + int(generation * generation_progress_step)
            optimization_progress.update(
                step=generation_progress,
                message=f"Generation {generation+1} of {num_generations}"
            )
            
            logger.info(f"Generation {generation+1} of {num_generations}")
            
            # Evaluate fitness
            fitness_sum = 0
            valid_count = 0
            
            for idx, individual in enumerate(population):
                try:
                    maturities = individual['maturities']
                    nominals = individual['nominals']
                    class_b_nominal = individual['class_b_nominal']
                    
                    # Ensure maturities are integers for evaluation
                    maturities_int = [int(m) for m in maturities]
                    
                    # Get rates based on nearest maturity
                    a_base_rates = [maturity_to_base_rate_A.get(
                        get_nearest_maturity(m, list(maturity_to_base_rate_A.keys())), 42.0) for m in maturities_int]
                    
                    a_reinvest_rates = [maturity_to_reinvest_rate_A.get(
                        get_nearest_maturity(m, list(maturity_to_reinvest_rate_A.keys())), 30.0) for m in maturities_int]
                    
                    # Calculate actual Class B percentage
                    total_a_nominal = sum(nominals)
                    total_nominal = total_a_nominal + class_b_nominal
                    actual_b_percent = (class_b_nominal / total_nominal) * 100
                    
                    individual['class_b_percent'] = actual_b_percent
                    
                    # Try to adjust nominals for target coupon rate using the shared utility function
                    try:
                        # Generate default spreads (all zeros)
                        a_spreads = [0.0] * len(nominals)
                        b_spread = 0.0
                        
                        adjusted_nominals, adjustment_success, adjusted_b_percent = adjust_class_a_nominals_for_target_coupon(
                            df_temp, start_date,
                            maturities_int, nominals, a_base_rates, a_spreads, a_reinvest_rates,
                            class_b_maturity, class_b_base_rate_orig, b_spread, class_b_reinvest_rate_orig, class_b_nominal,
                            target_class_b_coupon_rate, target_class_b_percent, min_buffer, ops_expenses
                        )
                        
                        if adjustment_success:
                            nominals = adjusted_nominals
                            individual['nominals'] = nominals
                            individual['class_b_percent'] = adjusted_b_percent
                    except Exception as e:
                        logger.error(f"Error adjusting nominals: {str(e)}")
                        # Continue with original nominals
                    
                    # Evaluate the adjusted parameters using shared evaluate_params
                    eval_result = evaluate_params(
                        df_temp, start_date,
                        maturities_int, nominals, class_b_maturity,
                        maturity_to_base_rate_A, maturity_to_reinvest_rate_A,
                        class_b_base_rate_orig, class_b_reinvest_rate_orig,
                        target_class_b_percent, class_b_percent_deviation,
                        target_class_b_coupon_rate, min_buffer,
                        ops_expenses
                    )
                    
                    # Set fitness - ensure it's a number
                    if eval_result['is_valid']:
                        individual['fitness'] = float(eval_result['score'])
                        individual['result'] = eval_result
                        fitness_sum += individual['fitness']
                        valid_count += 1
                    else:
                        individual['fitness'] = -1.0 # Invalid but better than -inf for selection
                        individual['result'] = None
                    
                    # Track the best
                    if individual['fitness'] > best_fitness:
                        best_fitness = individual['fitness']
                        best_individual = individual.copy()
                        logger.info(f"Found better solution: score={best_fitness}")
                        
                        # Update progress message when finding better solution
                        if 'result' in individual and individual['result'] and 'results' in individual['result']:
                            results = individual['result']['results']
                            if results:
                                coupon_rate = results.get('class_b_coupon_rate', 0)
                                coupon_diff = abs(coupon_rate - target_class_b_coupon_rate)
                                class_b_percent = results.get('class_b_percent', 0)
                                percent_diff = abs(class_b_percent - target_class_b_percent)
                                
                                optimization_progress.update(
                                    message=f"Generation {generation+1}: Found better solution with score {best_fitness:.2f}, " +
                                           f"coupon rate: {coupon_rate:.2f}% (diff: {coupon_diff:.2f}%), " +
                                           f"Class B: {class_b_percent:.2f}% (diff: {percent_diff:.2f}%)"
                                )
                        else:
                            optimization_progress.update(
                                message=f"Generation {generation+1}: Found better solution with score {best_fitness:.2f}"
                            )
                except Exception as e:
                    logger.error(f"Error evaluating individual {idx} in generation {generation}: {str(e)}")
                    # Set very low fitness to avoid selection
                    individual['fitness'] = -float('inf')
                    individual['result'] = None
            
            # Log average fitness for valid individuals
            if valid_count > 0:
                avg_fitness = fitness_sum / valid_count
                logger.info(f"Generation {generation+1} average fitness: {avg_fitness:.2f} ({valid_count} valid individuals)")
            
            # Create next generation
            new_population = []
            
            # Elitism - keep best individuals
            sorted_pop = sorted(population, key=lambda x: x.get('fitness', -float('inf')), reverse=True)
            elite_count = max(2, population_size // 10)
            new_population.extend(sorted_pop[:elite_count])
            
            # Fill rest with crossover and mutation
            crossover_attempts = 0
            while len(new_population) < population_size and crossover_attempts < population_size * 2:
                crossover_attempts += 1
                try:
                    # Tournament selection
                    parent1 = tournament_select(population)
                    parent2 = tournament_select(population)
                    
                    # Crossover - mix maturities
                    child_maturities = []
                    for i in range(num_a_tranches):
                        # 50% chance from each parent
                        if random.random() < 0.5:
                            child_maturities.append(parent1['maturities'][i])
                        else:
                            child_maturities.append(parent2['maturities'][i])
                    
                    # Ensure maturities are valid integers
                    child_maturities = sorted([int(m) for m in child_maturities])
                    
                    # Fix any invalid gaps
                    for i in range(1, num_a_tranches):
                        if child_maturities[i] - child_maturities[i-1] < min_gap:
                            child_maturities[i] = child_maturities[i-1] + min_gap
                    
                    # Weight crossover with averaging
                    child_weights = []
                    for i in range(num_a_tranches):
                        weight1 = parent1['nominals'][i] / total_a_nominal
                        weight2 = parent2['nominals'][i] / total_a_nominal
                        child_weights.append((weight1 + weight2) / 2)
                    
                    # Normalize weights
                    total_weight = sum(child_weights)
                    child_weights = [w / total_weight for w in child_weights]
                    child_nominals = [w * total_a_nominal for w in child_weights]
                    
                    # Class B percentage crossover
                    # Use weighted average of parent percentages
                    if random.random() < 0.5:
                        # Weighted average with random weight
                        weight = random.random()
                        child_b_percent = (parent1['class_b_percent'] * weight) + (parent2['class_b_percent'] * (1 - weight))
                    else:
                        # Pick one parent's value
                        child_b_percent = parent1['class_b_percent'] if random.random() < 0.5 else parent2['class_b_percent']
                    
                    # Calculate Class B nominal from percentage
                    b_share = child_b_percent / 100
                    child_b_nominal = (total_a_nominal * b_share) / (1 - b_share)
                    child_b_nominal = round(child_b_nominal / 1000) * 1000
                    
                    # Mutation - mutate maturities
                    if random.random() < 0.3:  # 30% mutation rate
                        mutation_idx = random.randint(0, num_a_tranches-1)
                        
                        # Different mutation for different positions
                        if mutation_idx == 0:
                            # First maturity
                            child_maturities[0] = random.randint(min_maturity, min(child_maturities[1] - min_gap, min_maturity + 60))
                        elif mutation_idx == num_a_tranches - 1:
                            # Last maturity
                            child_maturities[-1] = random.randint(child_maturities[-2] + min_gap, max_maturity)
                        else:
                            # Middle maturity
                            min_val = child_maturities[mutation_idx-1] + min_gap
                            max_val = child_maturities[mutation_idx+1] - min_gap
                            
                            if min_val < max_val:
                                child_maturities[mutation_idx] = random.randint(min_val, max_val)
                    
                    # Mutation - mutate weights
                    if random.random() < 0.3:
                        mutation_idx = random.randint(0, num_a_tranches-1)
                        mutation_amount = random.uniform(-0.1, 0.1)
                        child_weights[mutation_idx] = max(0.1, min(0.4, child_weights[mutation_idx] + mutation_amount))
                        
                        # Renormalize
                        total_weight = sum(child_weights)
                        child_weights = [w / total_weight for w in child_weights]
                        child_nominals = [w * total_a_nominal for w in child_weights]
                    
                    # Mutation - mutate Class B percentage
                    if random.random() < 0.3:
                        mutation_amount = random.uniform(-class_b_percent_deviation / 2, class_b_percent_deviation / 2)
                        child_b_percent = max(0.1, min(50, child_b_percent + mutation_amount))
                        
                        # Recalculate B nominal
                        b_share = child_b_percent / 100
                        child_b_nominal = (total_a_nominal * b_share) / (1 - b_share)
                        child_b_nominal = round(child_b_nominal / 1000) * 1000
                    
                    # Add child to new population
                    new_population.append({
                        'maturities': child_maturities,  # These are already integers
                        'nominals': child_nominals,
                        'class_b_nominal': child_b_nominal,
                        'class_b_percent': child_b_percent,
                        'fitness': 0  # Will be evaluated in next generation
                    })
                except Exception as e:
                    logger.error(f"Error in crossover/mutation: {str(e)}")
                    continue
            
            # If we couldn't create enough children, fill with new random individuals
            while len(new_population) < population_size:
                try:
                    new_population.append(create_valid_individual())
                except Exception as e:
                    logger.error(f"Error creating new individual to fill population: {str(e)}")
                    # If we failed a few times, just break and proceed with smaller population
                    if len(new_population) > population_size * 0.7:
                        break
            
            # Replace population
            population = new_population
            
            # Early termination if we have an excellent solution
            if best_individual and best_individual.get('result') and best_individual['result'].get('results'):
                best_results = best_individual['result']['results']
                if best_results:
                    coupon_diff = abs(best_results.get('class_b_coupon_rate', 0) - target_class_b_coupon_rate)
                    percent_diff = abs(best_results.get('class_b_percent', 0) - target_class_b_percent)
                    
                    # Only terminate early if both objectives are very good
                    if coupon_diff < 0.2 and percent_diff < 0.5:
                        optimization_progress.update(
                            message=f"Found excellent solution (coupon diff < 0.2%, Class B diff < 0.5%), ending evolution early"
                        )
                        break
        
        # Update to 75% progress
        optimization_progress.update(step=75, 
                                phase="Finalizing",
                                message="Evolution complete, preparing final results...")
        
        # If no valid solution found
        if best_individual is None or best_fitness <= 0:
            optimization_progress.update(
                step=80,
                phase="Error",
                message="Genetic optimization failed: No valid solution found"
            )
            logger.error("Genetic optimization failed: No valid solution found")
            # Fall back to classic optimization
            optimization_progress.update(
                message="Falling back to classic optimization method..."
            )
            return perform_optimization(df, general_settings, optimization_settings)
        
        # Get the best result
        best_maturities = best_individual['maturities']
        best_nominals = best_individual['nominals']
        best_class_b_nominal = best_individual['class_b_nominal']
        best_class_b_percent = best_individual['class_b_percent']
        best_result = best_individual['result']
        
        # Get rates based on original data
        best_base_rates = [maturity_to_base_rate_A.get(get_nearest_maturity(m, original_maturities_A), 42.0) for m in best_maturities]
        best_reinvest_rates = [maturity_to_reinvest_rate_A.get(get_nearest_maturity(m, original_maturities_A), 30.0) for m in best_maturities]
        
        optimization_progress.update(step=90, 
                                message="Creating optimization result...")
        
        logger.info("Genetic optimization completed successfully")
        
        # Debug logging
        print(f"*** GENETIC OPTIMIZATION RESULTS ***")
        if best_result and best_result['results']:
            print(f"Class B coupon rate (effective): {best_result['results'].get('class_b_coupon_rate', 0)}")
            print(f"Class B coupon rate (direct): {best_result['results'].get('direct_coupon_rate', 0)}")
        print(f"Class B maturity: {class_b_maturity}")
        
        # Prepare the result from the best_result dictionary
        result_dict = best_result['results'] if best_result and best_result['results'] else {}
        
        # Final progress update to 100%
        optimization_progress.update(step=100, 
                                phase="Complete",
                                message="Genetic optimization completed successfully")
        
        # Return the optimization result with all necessary data
        return OptimizationResult(
            best_strategy="genetic",
            class_a_maturities=[int(m) for m in best_maturities],  # Ensure integers
            class_a_nominals=best_nominals,
            class_a_rates=best_base_rates,
            class_a_reinvest=best_reinvest_rates,
            class_b_maturity=int(class_b_maturity),
            class_b_rate=class_b_base_rate_orig,
            class_b_reinvest=class_b_reinvest_rate_orig,
            class_b_nominal=best_class_b_nominal,
            class_b_percent=best_class_b_percent,
            class_b_coupon_rate=result_dict.get('class_b_coupon_rate', 0),
            direct_class_b_coupon_rate=result_dict.get('direct_coupon_rate', 0),
            min_buffer_actual=result_dict.get('min_buffer_actual', 0),
            last_cash_flow_day=int(last_cash_flow_day),
            additional_days=int(additional_days),
            results_by_strategy={"genetic": result_dict}
        )
    except Exception as e:
        # Handle any exceptions
        logger.error(f"Error in genetic optimization: {str(e)}")
        logger.debug(traceback.format_exc())
        
        # Fall back to classic optimization
        optimization_progress.update(
            step=80,
            phase="Error Recovery",
            message=f"Error in genetic optimization: {str(e)}. Falling back to classic optimization method..."
        )
        return perform_optimization(df, general_settings, optimization_settings)

======================================================================

DOSYA: backend\app\utils\cash_flow_utils.py
==================================================
"""
Utility functions for cash flow processing and tranche calculations.
"""
import pandas as pd
import numpy as np
from datetime import timedelta
from typing import List, Dict, Any, Tuple
from app.utils.finance_utils import (
    get_next_business_day,
    simple_to_compound_annual,
    calculate_reinvestment_date
)

def assign_cash_flows_to_tranches(
    df: pd.DataFrame, 
    start_date: pd.Timestamp, 
    all_maturity_dates: List[pd.Timestamp], 
    all_reinvest_rates: List[float]
) -> List[List[Dict[str, Any]]]:
    """
    Distribute cash flows into tranches, adjust for weekends,
    and calculate reinvestment returns.
    
    Args:
        df: DataFrame containing cash flow data
        start_date: Start date for calculations
        all_maturity_dates: List of maturity dates for each tranche
        all_reinvest_rates: List of reinvestment rates for each tranche
        
    Returns:
        List of cash flow lists for each tranche
    """
    num_tranches = len(all_maturity_dates)
    tranch_cash_flows = [[] for _ in range(num_tranches)]
    
    for idx, row in df.iterrows():
        inst_date = row['installment_date']
        cf = row['cash_flow']
        principal_amt = row.get('principal_amount', 0)
        interest_amt = row.get('interest_amount', 0)
        
        if pd.isnull(inst_date) or inst_date < start_date:
            continue
        
        reinvest_date = calculate_reinvestment_date(inst_date)
        assigned = False
        
        # First pass - assign to the first matching tranche
        for i in range(num_tranches):
            if inst_date < all_maturity_dates[i]:
                if reinvest_date < all_maturity_dates[i]:
                    days_diff = (all_maturity_dates[i] - reinvest_date).days
                    if days_diff > 0:
                        r_compound = simple_to_compound_annual(all_reinvest_rates[i]) / 100.0
                        factor = (1 + r_compound)**(days_diff/365) - 1
                        r_return = cf * factor
                    else:
                        r_return = 0.0
                    tranch_cash_flows[i].append({
                        'date': inst_date,
                        'cash_flow': cf,
                        'principal_amount': principal_amt,
                        'interest_amount': interest_amt,
                        'reinvest_date': reinvest_date,
                        'reinvestment_return': r_return,
                        'moved_from': None
                    })
                    assigned = True
                    break
        
        # If not assigned in first pass
        if not assigned and num_tranches > 0:
            # Second pass - assign based on reinvest date
            re_assign = False
            for i in range(num_tranches):
                if reinvest_date < all_maturity_dates[i]:
                    days_diff = (all_maturity_dates[i] - reinvest_date).days
                    if days_diff > 0:
                        r_compound = simple_to_compound_annual(all_reinvest_rates[i]) / 100.0
                        factor = (1 + r_compound)**(days_diff/365) - 1
                        r_return = cf * factor
                    else:
                        r_return = 0.0
                    tranch_cash_flows[i].append({
                        'date': inst_date,
                        'cash_flow': cf,
                        'principal_amount': principal_amt,
                        'interest_amount': interest_amt,
                        'reinvest_date': reinvest_date,
                        'reinvestment_return': r_return,
                        'moved_from': None
                    })
                    re_assign = True
                    break
            
            # If still not assigned, put in the last tranche
            if not re_assign:
                last_idx = num_tranches - 1
                days_diff = (all_maturity_dates[last_idx] - reinvest_date).days
                if days_diff > 0:
                    r_compound = simple_to_compound_annual(all_reinvest_rates[last_idx]) / 100.0
                    factor = (1 + r_compound)**(days_diff/365) - 1
                    r_return = cf * factor
                else:
                    r_return = 0.0
                tranch_cash_flows[last_idx].append({
                    'date': inst_date,
                    'cash_flow': cf,
                    'principal_amount': principal_amt,
                    'interest_amount': interest_amt,
                    'reinvest_date': reinvest_date,
                    'reinvestment_return': r_return,
                    'moved_from': None,
                    'note': 'Reinvestment date >= all'
                })
    
    # Third pass: if reinvest_date >= current tranche maturity, move the cash flow to a later tranche
    for i in range(num_tranches-1):
        final_cf = []
        for cf_info in tranch_cash_flows[i]:
            if cf_info['reinvest_date'] >= all_maturity_dates[i]:
                moved = False
                for j in range(i+1, num_tranches):
                    if cf_info['reinvest_date'] < all_maturity_dates[j]:
                        days_diff = (all_maturity_dates[j] - cf_info['reinvest_date']).days
                        if days_diff > 0:
                            r_compound = simple_to_compound_annual(all_reinvest_rates[j]) / 100.0
                            factor = (1 + r_compound)**(days_diff/365) - 1
                            new_ret = cf_info['cash_flow'] * factor
                        else:
                            new_ret = 0.0
                        new_cf = dict(cf_info)
                        new_cf['reinvestment_return'] = new_ret
                        new_cf['moved_from'] = i
                        tranch_cash_flows[j].append(new_cf)
                        moved = True
                        break
                
                if not moved and (i+1) < num_tranches:
                    last_i = num_tranches - 1
                    days_diff = (all_maturity_dates[last_i] - cf_info['reinvest_date']).days
                    if days_diff > 0:
                        r_compound = simple_to_compound_annual(all_reinvest_rates[last_i]) / 100.0
                        factor = (1 + r_compound)**(days_diff/365) - 1
                        new_ret = cf_info['cash_flow'] * factor
                    else:
                        new_ret = 0.0
                    new_cf = dict(cf_info)
                    new_cf['reinvestment_return'] = new_ret
                    new_cf['moved_from'] = i
                    tranch_cash_flows[last_i].append(new_cf)
            else:
                final_cf.append(cf_info)
        
        tranch_cash_flows[i] = final_cf
    
    return tranch_cash_flows

def calculate_totals(
    cash_flows: List[Dict[str, Any]], 
    maturity_date: pd.Timestamp, 
    reinvest_rate: float
) -> Tuple[float, float, float, float]:
    """
    Calculate totals for a tranche.
    
    Args:
        cash_flows: List of cash flow information dictionaries
        maturity_date: Maturity date for the tranche
        reinvest_rate: Reinvestment rate for the tranche
        
    Returns:
        Tuple of (total_cash_flow, total_reinvest, total_principal, total_interest)
    """
    r_comp = simple_to_compound_annual(reinvest_rate)
    total_cash_flow = 0.0
    total_principal = 0.0
    total_interest = 0.0
    total_reinvest = 0.0
    
    for c in cash_flows:
        cf = c['cash_flow']
        principal = c.get('principal_amount', 0)
        interest = c.get('interest_amount', 0)
        
        total_cash_flow += cf
        total_principal += principal
        total_interest += interest
        
        rd = c['reinvest_date']
        days_diff = (maturity_date - rd).days
        
        if days_diff > 0:
            factor = (1 + r_comp/100)**(days_diff/365) - 1
            ret = cf * factor
            total_reinvest += ret
    
    return total_cash_flow, total_reinvest, total_principal, total_interest

======================================================================

DOSYA: backend\app\utils\finance_utils.py
==================================================
# backend/app/utils/finance_utils.py
import pandas as pd
from datetime import datetime, timedelta

def simple_to_compound_annual(simple_rate_percent):
    """Convert an annual simple rate (in %) to an annual compounded rate (in %)."""
    r_simple = simple_rate_percent / 100.0
    # daily rate under simple assumption:
    r_daily = r_simple / 365
    annual_compound = (1 + r_daily)**365 - 1
    return annual_compound * 100.0

def simple_to_maturity_compound(simple_rate_percent, days):
    """Convert a simple rate over 'days' to an equivalent annual compounded rate."""
    if days <= 0:
        return 0.0
    r_simple = simple_rate_percent / 100.0
    period_simple = r_simple * (days / 365)  # portion of the year
    period_compound = (1 + period_simple)**(365 / days) - 1
    return period_compound * 100.0

def overnight_to_annual_compound(simple_rate_percent):
    """Convert an annual simple rate to annual compound."""
    daily_rate = simple_rate_percent / 365 / 100
    annual_compound = (1 + daily_rate)**365 - 1
    return annual_compound * 100.0

def get_next_business_day(date):
    """If the date falls on a weekend, move it to the next business day."""
    while date.weekday() >= 5:  # 5=Saturday, 6=Sunday
        date += timedelta(days=1)
    return date

def calculate_reinvestment_date(installment_date):
    """Adjust the installment date for weekends and add 1 day."""
    if installment_date.weekday() >= 5:
        installment_date = get_next_business_day(installment_date)
    reinvest_date = installment_date + timedelta(days=1)
    reinvest_date = get_next_business_day(reinvest_date)
    return reinvest_date

def get_nearest_maturity(target_maturity, available_maturities):
    """Find the closest maturity day in the available maturities."""
    return min(available_maturities, key=lambda x: abs(x - target_maturity))

def get_last_cash_flow_day(df, start_date):
    """Find the last cash flow day and calculate as days from start date."""
    start_date = pd.Timestamp(start_date)
    last_cash_flow_date = df['installment_date'].max()
    
    if pd.notna(last_cash_flow_date):
        days = (last_cash_flow_date - start_date).days
        return max(0, days)  # Should not be negative
    else:
        return 365  # Default value

======================================================================

DOSYA: backend\app\utils\tranche_utils.py
==================================================
# backend/app/utils/tranche_utils.py
"""
Optimization ve Calculation servisleri arasÄ±nda ortak hesaplama
fonksiyonlarÄ±nÄ± iÃ§eren utility modÃ¼lÃ¼.
"""

import pandas as pd
import numpy as np
from typing import List, Dict, Any, Tuple, Optional
from app.utils.finance_utils import (
    simple_to_compound_annual,
    get_nearest_maturity
)
from app.utils.cash_flow_utils import (
    assign_cash_flows_to_tranches,
    calculate_totals
)

def calculate_tranche_results(
    df: pd.DataFrame,
    start_date: pd.Timestamp,
    a_maturities: List[int],
    a_base_rates: List[float],
    a_spreads: List[float],
    a_reinvest_rates: List[float],
    a_nominals: List[float],
    b_maturity: int,
    b_base_rate: float,
    b_spread: float,
    b_reinvest_rate: float,
    b_nominal: float,
    ops_expenses: float = 0.0
) -> Dict[str, Any]:
    """
    Hem optimization hem de calculation servislerinde kullanÄ±lacak
    ortak tranche hesaplama mantÄ±ÄŸÄ±nÄ± iÃ§erir.
    
    Args:
        df: Nakit akÄ±ÅŸÄ± verileri iÃ§eren DataFrame
        start_date: BaÅŸlangÄ±Ã§ tarihi
        a_maturities: Class A vadeleri (gÃ¼n)
        a_base_rates: Class A baz faiz oranlarÄ±
        a_spreads: Class A spread deÄŸerleri
        a_reinvest_rates: Class A yeniden yatÄ±rÄ±m oranlarÄ±
        a_nominals: Class A nominal deÄŸerleri
        b_maturity: Class B vadesi (gÃ¼n)
        b_base_rate: Class B baz faiz oranÄ±
        b_spread: Class B spread deÄŸeri
        b_reinvest_rate: Class B yeniden yatÄ±rÄ±m oranÄ±
        b_nominal: Class B nominal deÄŸeri
        ops_expenses: Operasyon giderleri
        
    Returns:
        HesaplanmÄ±ÅŸ sonuÃ§larÄ± iÃ§eren sÃ¶zlÃ¼k
    """
    # GeÃ§ici dataframe kopyasÄ±
    df_temp = df.copy()
    df_temp["cash_flow"] = df_temp["original_cash_flow"].copy()
    
    # Operasyonel giderleri dÃ¼ÅŸ (16 Åžubat 2025)
    if ops_expenses > 0:
        target_date = pd.Timestamp("2025-02-16")
        mask = df_temp["installment_date"].dt.date == target_date.date()
        if mask.any():
            idx = df_temp[mask].index[0]
            df_temp.at[idx, "cash_flow"] = max(0, df_temp.at[idx, "cash_flow"] - ops_expenses)
    
    # TÃ¼m parametreleri birleÅŸtir
    all_maturity_days = a_maturities + [b_maturity]
    all_base_rates = a_base_rates + [b_base_rate]
    all_spreads = a_spreads + [b_spread]
    all_reinvest_rates = a_reinvest_rates + [b_reinvest_rate]
    all_nominals = a_nominals + [b_nominal]
    all_maturity_dates = [start_date + pd.Timedelta(days=days) for days in all_maturity_days]
    
    # Nakit akÄ±ÅŸlarÄ±nÄ± tranchelere daÄŸÄ±t
    tranch_cash_flows = assign_cash_flows_to_tranches(
        df_temp, start_date, all_maturity_dates, all_reinvest_rates
    )
    
    # Tranche sonuÃ§larÄ±nÄ± hesapla
    results = []
    buffer = 0.0
    
    for i, days in enumerate(all_maturity_days):
        is_a = i < len(a_maturities)
        t_name = f"Class {'A' if is_a else 'B'}{i+1 if is_a else ''}".strip()
        
        # Nakit akÄ±ÅŸÄ±, reinvestment ve buffer hesapla
        c_flow, r_ret, total_principal, total_interest = calculate_totals(
            tranch_cash_flows[i], all_maturity_dates[i], all_reinvest_rates[i]
        )
        
        # Buffer faiz getirisi hesapla
        buf_reinv = 0.0
        if i > 0 and buffer > 0 and days > all_maturity_days[i-1]:
            factor = (1 + simple_to_compound_annual(all_reinvest_rates[i])/100)**(
                (days - all_maturity_days[i-1]) / 365
            ) - 1
            buf_reinv = buffer * factor
        
        # Toplam kullanÄ±labilir nakit
        available = c_flow + r_ret + buffer + buf_reinv
        nominal = all_nominals[i]
        
        # Faiz oranÄ± parametreleri
        base_rate = all_base_rates[i]
        spread = all_spreads[i]
        total_rate = base_rate + spread/100
        
        if is_a:
            # Class A iÃ§in hesaplama
            total_rate = base_rate + spread/100
            disc = 1 / (1 + total_rate/100 * days/365) if days else 1
            principal = nominal * disc
            interest = nominal - principal
            coupon = 0.0
            coupon_rate = 0.0
            eff_coupon = 0.0
            total_pay = nominal
        else:
            # Class B iÃ§in hesaplama
            principal = max(0.001, nominal)
            coupon = max(0, available - principal)
            interest = 0.0
            coupon_rate = coupon / principal * 100 if principal > 0.001 else 0.0
            eff_coupon = (coupon / principal * 365 / days * 100) if principal > 0.001 and days > 0 else 0.0
            total_pay = principal + coupon
        
        # Buffer hesapla
        new_buffer = max(0.0, available - total_pay)
        buf_ratio = new_buffer / nominal * 100 if nominal else 0.0
        
        # SonuÃ§larÄ± ekle
        results.append({
            "Tranche": t_name,
            "Start Date": start_date.strftime("%d/%m/%Y"),
            "Maturity Days": days,
            "Maturity Date": all_maturity_dates[i].strftime("%d/%m/%Y"),
            "Base Rate (%)": all_base_rates[i],
            "Spread (bps)": all_spreads[i],
            "Total Interest Rate (%)": total_rate,
            "Coupon Rate (%)": coupon_rate,
            "Effective Coupon (%)": eff_coupon,
            "Original Nominal": nominal,
            "Adjusted Nominal": nominal,
            "Buffer In": buffer,
            "Cash Flow Total": c_flow,
            "Reinvestment Return": r_ret,
            "Buffer Reinvestment": buf_reinv,
            "Total Available": available,
            "Principal": principal,
            "Interest": interest,
            "Coupon Payment": coupon,
            "Nominal Payment": nominal,
            "Total Payment": total_pay,
            "Buffer Out": new_buffer,
            "Buffer Cash Flow Ratio (%)": buf_ratio,
            "Discount Factor": 1.0,
            "Is Class A": is_a,
        })
        
        # Buffer gÃ¼ncelle
        buffer = new_buffer
    
    # SonuÃ§larÄ± Class A ve B olarak ayÄ±r
    a_results = [r for r in results if r["Is Class A"]]
    b_results = [r for r in results if not r["Is Class A"]]
    
    # ToplamalarÄ± hesapla
    class_a_principal = sum(r["Principal"] for r in a_results)
    class_b_principal = sum(r["Principal"] for r in b_results)
    class_a_interest = sum(r["Interest"] for r in a_results)
    class_b_coupon = sum(r["Coupon Payment"] for r in b_results)
    class_a_total = sum(r["Total Payment"] for r in a_results)
    class_b_total = sum(r["Total Payment"] for r in b_results)
    
    # En dÃ¼ÅŸÃ¼k buffer oranÄ±
    min_buffer_actual = min(r["Buffer Cash Flow Ratio (%)"] for r in a_results) if a_results else 0.0
    
    # Toplam Ã¶denen ve finans maliyeti
    total_principal_paid = class_a_principal + class_b_principal
    total_loan_principal = df_temp["principal_amount"].sum()
    financing_cost = total_principal_paid - total_loan_principal
    
    # Faiz oranÄ± dÃ¶nÃ¼ÅŸÃ¼m bilgileri
    rate_conversions = []
    for i, days in enumerate(all_maturity_days):
        is_a = i < len(a_maturities)
        t_name = f"Class {'A' if is_a else 'B'}{i+1 if is_a else ''}".strip()
        
        if is_a:
            # Class A tranches iÃ§in
            total_rate = all_base_rates[i] + all_spreads[i]/100
            simple_annual = total_rate
            compound_for_period = simple_to_maturity_compound(total_rate, days)
            reinvest_simple = all_reinvest_rates[i]
            reinvest_compound = overnight_to_annual_compound(all_reinvest_rates[i])
            coupon_rate = "-"
            eff_coupon_rate = "-"
        else:
            # Class B tranches iÃ§in
            coupon_rate = results[i]["Coupon Rate (%)"]
            eff_coupon_rate = results[i]["Effective Coupon (%)"]
            simple_annual = "-"
            compound_for_period = "-"
            reinvest_simple = all_reinvest_rates[i]
            reinvest_compound = overnight_to_annual_compound(all_reinvest_rates[i])
        
        rate_conversions.append({
            "Tranche": t_name,
            "Maturity Days": days,
            "Simple Annual Interest (%)": simple_annual,
            "Compound Interest for Period (%)": compound_for_period,
            "Reinvest Simple Annual (%)": reinvest_simple,
            "Reinvest O/N Compound (%)": reinvest_compound,
            "Coupon Rate (%)": coupon_rate,
            "Effective Coupon Rate (%)": eff_coupon_rate,
        })
    
    # DoÄŸrudan kupon oranÄ± ve efektif kupon oranÄ±
    direct_coupon_rate = results[-1]["Coupon Rate (%)"] if b_results else 0.0
    effective_coupon_rate = results[-1]["Effective Coupon (%)"] if b_results else 0.0
    
    # SonuÃ§larÄ± dÃ¶ndÃ¼r
    return {
        "tranche_results": results,
        "interest_rate_conversions": rate_conversions,
        "class_a_total": class_a_total,
        "class_b_total": class_b_total,
        "class_a_principal": class_a_principal,
        "class_b_principal": class_b_principal,
        "class_a_interest": class_a_interest,
        "class_b_coupon": class_b_coupon,
        "min_buffer_actual": min_buffer_actual,
        "total_principal_paid": total_principal_paid,
        "total_loan_principal": total_loan_principal,
        "financing_cost": financing_cost,
        "direct_coupon_rate": direct_coupon_rate,
        "effective_coupon_rate": effective_coupon_rate
    }

def simple_to_maturity_compound(simple_rate_percent, days):
    """Convert a simple rate over 'days' to an equivalent annual compounded rate."""
    if days <= 0:
        return 0.0
    r_simple = simple_rate_percent / 100.0
    period_simple = r_simple * (days / 365)  # portion of the year
    period_compound = (1 + period_simple)**(365 / days) - 1
    return period_compound * 100.0

def overnight_to_annual_compound(simple_rate_percent):
    """Convert an annual simple rate to annual compound."""
    daily_rate = simple_rate_percent / 365 / 100
    annual_compound = (1 + daily_rate)**365 - 1
    return annual_compound * 100.0

def adjust_class_a_nominals_for_target_coupon(
    df: pd.DataFrame,
    start_date: pd.Timestamp,
    a_maturities: List[int],
    a_nominals: List[float],
    a_base_rates: List[float],
    a_spreads: List[float],
    a_reinvest_rates: List[float],
    b_maturity: int,
    b_base_rate: float,
    b_spread: float,
    b_reinvest_rate: float,
    class_b_nominal: float,
    target_class_b_coupon_rate: float,
    target_class_b_percent: float,
    min_buffer: float,
    ops_expenses: float = 0.0,
    max_allowed_diff: float = 0.5,
    class_b_percent_deviation: float = 1.0,
    max_iterations: int = 30
) -> Tuple[List[float], bool, float]:
    """
    Class A nominal miktarlarÄ±nÄ± hedef Class B kupon oranÄ±na ulaÅŸacak ÅŸekilde
    ayarlar. Bu fonksiyon optimize ve hesaplama servisleri arasÄ±nda tutarlÄ±lÄ±k saÄŸlar.
    
    Args:
        df: Nakit akÄ±ÅŸÄ± verileri iÃ§eren DataFrame
        start_date: BaÅŸlangÄ±Ã§ tarihi
        a_maturities: Class A vadeleri (gÃ¼n)
        a_nominals: Class A nominal deÄŸerleri (baÅŸlangÄ±Ã§ deÄŸerleri)
        a_base_rates: Class A baz faiz oranlarÄ±
        a_spreads: Class A spread deÄŸerleri
        a_reinvest_rates: Class A yeniden yatÄ±rÄ±m oranlarÄ±
        b_maturity: Class B vadesi (gÃ¼n)
        b_base_rate: Class B baz faiz oranÄ±
        b_spread: Class B spread deÄŸeri
        b_reinvest_rate: Class B yeniden yatÄ±rÄ±m oranÄ±
        class_b_nominal: Class B nominal deÄŸeri
        target_class_b_coupon_rate: Hedef Class B kupon oranÄ±
        target_class_b_percent: Hedef Class B yÃ¼zdesi
        min_buffer: Minimum buffer gereksinimi
        ops_expenses: Operasyon giderleri
        max_allowed_diff: Ä°zin verilen maksimum fark
        class_b_percent_deviation: Ä°zin verilen Class B yÃ¼zde sapmasÄ±
        max_iterations: Maksimum iterasyon sayÄ±sÄ±
        
    Returns:
        (ayarlanmÄ±ÅŸ_nominal_listesi, baÅŸarÄ±_bayraÄŸÄ±, gerÃ§ek_class_b_yÃ¼zdesi)
    """
    # BaÅŸlangÄ±Ã§ parametreleri
    original_a_total = sum(a_nominals)
    original_proportions = [n / original_a_total for n in a_nominals]
    
    # Nominal kÄ±sÄ±tlamalarÄ±
    min_adjustment = 0.001  # Orijinalin %0.1'ine kadar dÃ¼ÅŸebilir
    max_adjustment = 3.0    # Orijinalin 3 katÄ±na kadar Ã§Ä±kabilir
    
    # SÄ±nÄ±rlarÄ± kontrol et
    b_maturity = max(1, min(365, b_maturity))
    
    # Class B yÃ¼zde hesapla
    total_nominal = original_a_total + class_b_nominal
    actual_class_b_percent = (class_b_nominal / total_nominal) * 100
    
    # Ä°lk deÄŸerlendirme
    result = calculate_tranche_results(
        df, start_date,
        a_maturities, a_base_rates, a_spreads, a_reinvest_rates, a_nominals,
        b_maturity, b_base_rate, b_spread, b_reinvest_rate, class_b_nominal,
        ops_expenses
    )
    
    baseline_coupon_rate = result['effective_coupon_rate']
    baseline_min_buffer = result['min_buffer_actual']
    baseline_direct_rate = result['direct_coupon_rate']
    
    # Ä°lk dÃ¼zeltme yaklaÅŸÄ±mÄ±
    if baseline_coupon_rate > 0:
        direct_adjustment = target_class_b_coupon_rate / baseline_coupon_rate
        direct_adjustment = max(min_adjustment, min(max_adjustment, direct_adjustment))
        
        test_nominals = [original_proportions[i] * original_a_total * direct_adjustment 
                       for i in range(len(a_nominals))]
        
        test_nominals = [max(1000, round(n / 1000) * 1000) for n in test_nominals]
        
        # DÃ¼zeltilmiÅŸ deÄŸerleri test et
        test_result = calculate_tranche_results(
            df, start_date,
            a_maturities, a_base_rates, a_spreads, a_reinvest_rates, test_nominals,
            b_maturity, b_base_rate, b_spread, b_reinvest_rate, class_b_nominal,
            ops_expenses
        )
        
        direct_coupon_rate = test_result['effective_coupon_rate']
        direct_min_buffer = test_result['min_buffer_actual']
        
        # Recalculate actual Class B percentage with adjusted Class A
        test_a_total = sum(test_nominals)
        test_total_nominal = test_a_total + class_b_nominal
        test_class_b_percent = (class_b_nominal / test_total_nominal) * 100
        
        # Check if Class B percentage is within allowed range
        min_class_b_percent = max(0.1, target_class_b_percent - class_b_percent_deviation)
        max_class_b_percent = min(50, target_class_b_percent + class_b_percent_deviation)
        is_class_b_percent_valid = min_class_b_percent <= test_class_b_percent <= max_class_b_percent
        
        # DoÄŸrudan yaklaÅŸÄ±m yeterince iyiyse kullan
        if direct_min_buffer >= min_buffer and abs(direct_coupon_rate - target_class_b_coupon_rate) <= max_allowed_diff and is_class_b_percent_valid:
            return test_nominals, True, test_class_b_percent
        
        # BaÅŸlangÄ±Ã§ â€‹â€‹deÄŸerini ayarla
        current_adjustment = direct_adjustment
        adjustment_direction = 1 if direct_coupon_rate < target_class_b_coupon_rate else -1
    else:
        current_adjustment = 1.0
        adjustment_direction = 0  # NÃ¶tr baÅŸla
    
    # BaÅŸlangÄ±Ã§ yÃ¶nÃ¼nÃ¼ belirle (direct_approach tarafÄ±ndan belirlenmemiÅŸse)
    if baseline_coupon_rate < target_class_b_coupon_rate and adjustment_direction == 0:
        adjustment_direction = 1  # ArttÄ±r
        current_adjustment = 1.2  # %20 artÄ±ÅŸla baÅŸla
    elif baseline_coupon_rate > target_class_b_coupon_rate and adjustment_direction == 0:
        adjustment_direction = -1  # Azalt
        
        # Hedeften uzaklÄ±ÄŸa gÃ¶re agresif ayarlama
        coupon_ratio = baseline_coupon_rate / target_class_b_coupon_rate
        if coupon_ratio > 10:
            current_adjustment = 0.01  # Orijinal boyutun %1'i
        elif coupon_ratio > 5:
            current_adjustment = 0.05  # Orijinal boyutun %5'i
        elif coupon_ratio > 2:
            current_adjustment = 0.1   # Orijinal boyutun %10'u
        else:
            current_adjustment = 0.5   # Orijinal boyutun %50'si
    
    best_diff = float('inf')
    best_nominals = a_nominals.copy()
    best_class_b_percent = actual_class_b_percent
    success = False
    
    # Ã–nceki sonuÃ§lar (enterpolasyon iÃ§in)
    last_adjustment = current_adjustment
    last_coupon_rate = baseline_coupon_rate
    
    # Ä°yileÅŸtirilmiÅŸ adaptif arama dÃ¶ngÃ¼sÃ¼
    for iteration in range(max_iterations):
        # Mevcut ayarlama faktÃ¶rÃ¼nÃ¼ uygula
        current_nominals = [original_proportions[i] * original_a_total * current_adjustment 
                           for i in range(len(a_nominals))]
        
        # 1000'e yuvarla ve sÄ±fÄ±r olmamasÄ±nÄ± saÄŸla
        current_nominals = [max(1000, round(n / 1000) * 1000) for n in current_nominals]
        
        # Mevcut ayarlamayÄ± deÄŸerlendir
        result = calculate_tranche_results(
            df, start_date,
            a_maturities, a_base_rates, a_spreads, a_reinvest_rates, current_nominals,
            b_maturity, b_base_rate, b_spread, b_reinvest_rate, class_b_nominal,
            ops_expenses
        )
        
        coupon_rate = result['effective_coupon_rate']
        min_buffer_actual = result['min_buffer_actual']
        
        # Calculate difference from target
        rate_diff = abs(coupon_rate - target_class_b_coupon_rate)
        
        # Calculate actual Class B percentage
        current_a_total = sum(current_nominals)
        current_total_nominal = current_a_total + class_b_nominal
        current_class_b_percent = (class_b_nominal / current_total_nominal) * 100
        percent_diff = abs(current_class_b_percent - target_class_b_percent)
        
        # Check if Class B percentage is within allowed range
        is_class_b_percent_valid = min_class_b_percent <= current_class_b_percent <= max_class_b_percent
        
        # Bu sonuÃ§ daha iyiyse ve buffer gereksinimini karÅŸÄ±lÄ±yorsa kaydet
        if min_buffer_actual >= min_buffer and is_class_b_percent_valid and rate_diff < best_diff:
            best_diff = rate_diff
            best_nominals = current_nominals.copy()
            best_class_b_percent = current_class_b_percent
            
            # Hedefe yakÄ±nsak, baÅŸarÄ± olarak kabul et
            if rate_diff <= max_allowed_diff:
                success = True
                
                # Hedefe Ã§ok yakÄ±nsa, erken Ã§Ä±k
                if rate_diff < 0.1:
                    break
        
        # Linear enterpolasyon ile daha iyi tahmin
        if iteration > 0 and last_coupon_rate != coupon_rate:
            if abs(current_adjustment - last_adjustment) > 0.000001:
                # Oran deÄŸiÅŸimi eÄŸimini hesapla
                rate_slope = (coupon_rate - last_coupon_rate) / (current_adjustment - last_adjustment)
                
                if abs(rate_slope) > 0.001:  # SÄ±fÄ±ra bÃ¶lÃ¼nmeyi Ã¶nle
                    # Hedefi vurmak iÃ§in gereken tahmini ayarlama
                    estimated_adjustment = last_adjustment + (target_class_b_coupon_rate - last_coupon_rate) / rate_slope
                    
                    # Makul sÄ±nÄ±rlar iÃ§inde tut
                    next_adjustment = max(min_adjustment, min(max_adjustment, estimated_adjustment))
                    
                    # Sadece Ã§ok uÃ§ deÄŸilse enterpolasyonu kullan
                    if 0.5 * current_adjustment <= next_adjustment <= 2.0 * current_adjustment:
                        # Mevcut deÄŸerleri kaydet
                        last_adjustment = current_adjustment
                        last_coupon_rate = coupon_rate
                        
                        # Enterpolasyon sonucu ayarla
                        current_adjustment = next_adjustment
                        continue
        
        # Sonraki enterpolasyon iÃ§in mevcut deÄŸerleri kaydet
        last_adjustment = current_adjustment
        last_coupon_rate = coupon_rate
        
        # SonuÃ§lara gÃ¶re adaptif ayarlama
        if coupon_rate < target_class_b_coupon_rate:
            if adjustment_direction == 1:
                # DoÄŸru yÃ¶ndeyiz (arttÄ±rÄ±yoruz), daha agresif ol
                coupon_ratio = target_class_b_coupon_rate / coupon_rate
                current_adjustment *= min(1.5, coupon_ratio)
            else:
                # Ã‡ok ileri gittik, yÃ¶n deÄŸiÅŸtir ve daha kÃ¼Ã§Ã¼k adÄ±m
                adjustment_direction = 1
                current_adjustment = 1.0 + (1.0 - current_adjustment) * 0.3
        else:  # coupon_rate > target_class_b_coupon_rate
            if adjustment_direction == -1:
                # DoÄŸru yÃ¶ndeyiz (azaltÄ±yoruz), daha agresif ol
                coupon_ratio = coupon_rate / target_class_b_coupon_rate
                current_adjustment *= max(0.5, 1/coupon_ratio)
            else:
                # Ã‡ok ileri gittik, yÃ¶n deÄŸiÅŸtir ve daha kÃ¼Ã§Ã¼k adÄ±m
                adjustment_direction = -1
                current_adjustment = 1.0 - (current_adjustment - 1.0) * 0.3
        
        # AyarlamanÄ±n sÄ±nÄ±rlar iÃ§inde olduÄŸundan emin ol
        current_adjustment = max(min_adjustment, min(max_adjustment, current_adjustment))
        
        # Ã‡ok kÃ¼Ã§Ã¼k deÄŸiÅŸiklikler yapÄ±yorsak ve takÄ±lÄ± kaldÄ±ysak erken Ã§Ä±k
        if abs(current_adjustment - last_adjustment) < 0.001 and iteration > 10:
            break
    
    return best_nominals, success, best_class_b_percent

======================================================================

